<?xml version="1.0" encoding="UTF-8"?>
<!-- Original course and code: Erik Wilde and Dilan Mahendran, UC Berkeley School of Information -->
<!-- Original course name: Web Architecture and Information Management - INFO 153 (CCN 42509), SP 2011 -->
<!-- New course and code remix: Gregory Jonason -->
<!-- New course name: Information and Communication Technologies I - COMM 3353 (SEC 20668), FA 2013 -->
<!-- $Id: 201303fa_comm3353.xml 1346 2013-08-26 19:55:01Z gregory.jonason $ -->
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="ischool" ?>
<hotspot xmlns="http://gregjonason.com/xmlns/hotspot" xmlns:hotspot="http://gregjonason.com/xmlns/hotspot" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://gregjonason.com/xmlns/hotspot  xmlns/hotspot/schemas/hotspot.xsd">
  <configuration>
    <link subsections="yes" bookmarks="yes" versions="201303fa_comm3353.xml" home="./" help="quick" contents="./" glossary="http://dret.net/glossary/" author="http://gregjonason.com/"/>
    <paths img="img" listing="src"/>
    <outline count-text=" [*]" count-depth="all"/>
    <hyperlink extra=""/>
    <extension file="html" link=""/>
    <counter separator=":&#160;"/>
  </configuration>
  <license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
    <div class="license">
      <p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="img/somerights20.png" border="0" height="31" width="88"/></a></p>
      <p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
    </div>
  </license>
  <title short="Web Architecture and Information Management"><a href="./" title="Course Homepage">Communication Web Technologies I</a><br/>Fall 2013; COMM 3353 (Section 20668)</title>
  <author affiliation="UH Houston JJVSOC"><a href="http://www.uh.edu/class/communication/" title="">Gregory Jonason</a></author>
  <affiliation short="UH Houston JJVSOC"><a href="http://www.uh.edu/class/communication/" title="University of Houston">University of Houston</a> <a href="http://www.uh.edu/class/communication/" title="JJVSOC">Jack J. Valenti School of Communication</a></affiliation>
  <date short="Fall 2013">Fall Semester 2013</date>
  <copyright>2013 Gregory Jonason</copyright>
  <categories>
    <category element="xml" class="xml" name="XML"/>
    <category element="elem" class="xml elem" name="XML Element"/>
    <category element="html" class="html" name="HTML"/>
    <category element="htmla" class="html" name="HTML Attribute"/>
    <category element="htmel" class="html elem" name="HTML Element"/>
    <category element="cssp" class="css" name="CSS Property"/>
    <category element="csss" class="css" name="CSS Selector"/>
    <category element="css" class="css" name="CSS"/>
    <category element="xpathf" class="xpath" name="XPath Function"/>
    <category element="xpath" class="xpath" name="XPath"/>
    <category element="xslte" class="xslt elem" name="XSLT Element"/>
    <category element="xslta" class="xslt" name="XSLT Attribute"/>
    <category element="xslt" class="xslt" name="XSLT"/>
    <category element="xsde" class="xsd elem" name="XSD Element"/>
    <category element="xsda" class="xsd" name="XSD Attribute"/>
    <category element="xsd" class="xsd" name="XSD"/>
    <category element="uri" class="uri" name="URI"/>
    <category element="http" class="http" name="HTTP"/>
    <category element="mime" class="mime" name="MIME"/>
    <category element="atom" class="atom" name="Atom"/>
  </categories>
  <toc name="toc.html">
    <table xmlns="" rules="all" cellspacing="0" cellpadding="5" width="100%">
      <!-- xmlns="" makes sure the document can be included into a web page setting xmlns to the HTML namespace. -->
      <thead>
        <tr>
          <th valign="bottom">Date</th>
          <th valign="bottom">Subject</th>
          <th valign="bottom">Slides</th>
          <th valign="bottom">Required Reading</th>
          <th valign="bottom">Additional Resources</th>
        </tr>
      </thead>
      <tbody>
        <hotspot:for-each-presentation>
          <tr>
            <td align="right" valign="top"><hotspot:date/></td>
            <td valign="top">
              <hotspot:if-toc class="author">
                <span class="guest">Guest Lecture by <hotspot:toc class="author"/> : </span>
              </hotspot:if-toc>
            <b><hotspot:title/><span class="toggle">:</span></b> <span class="toggle"><span class="abstract"><hotspot:toc class="abstract"/></span></span></td>
            <td align="center"><hotspot:presentation-link title="Lecture Slides"><hotspot:title form="short"/></hotspot:presentation-link> <hotspot:toc class="notes"/></td>
            <td align="center"><hotspot:toc class="reading"/></td>
            <td align="center"><hotspot:toc class="resources"/></td>
          </tr>
        </hotspot:for-each-presentation>
      </tbody>
    </table>
  </toc>

<!-- BEGIN 01 Overview and Introduction -->

  <presentation id="intro">
    <title short="Introduction">Overview and Introduction</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="resources"><a href="http://gregjonason.com/intro/index.html">Introduction</a></toc>
    <toc class="abstract">This introductory lecture gives the motivation for the course, some information about the people involved and the organization of the course, a high-level overview of the course's topics, and an overview of the assignments which are an important part of the course program.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <slide>
      <title>Course Goals</title>
      <ul>
        <li>Understanding how the Web works</li>
        <li>Publishing information on the Web</li>
        <li>Providing services on the Web</li>
        <li>Managing information on the Web</li>
        <ul>
          <li><em>lectures</em> focus on principles and technologies</li>
          <li><em>assignments</em> focus on applications</li>
          <li><em>tools</em> are important but secondary</li>
        </ul>
        <li><em><q>An Overview of the Web as an Open Information System</q></em></li>
      </ul>
    </slide>
    <slide>
      <title>What this Course Is Not</title>
      <ul>
        <li>Not a skills course</li>
        <ul>
          <li>You will get some hands-on experience, but you won't learn to be a web developer</li>
        </ul>
        <li>Not a visual design course</li>
        <ul>
          <li>Design in the sense of architectural pattern, not design in the sense of visual layout</li>
        </ul>
        <li>Not an interaction design course</li>
        <ul>
          <li>But knowing architectural principles is a prerequisite for good interaction design on the Web</li>
        </ul>
      </ul>
    </slide>
    <slide>
      <title>Web Architecture and Information Management</title>
      <dl>
        <dt>Architecture</dt>
        <dd>6. <em>Computing.</em> The conceptual structure and overall logical organization of a computer or computer-based system from the point of view of its use or design; a particular realization of this. (OED)</dd>
        <dt>Management</dt>
        <dd>1. a. Organization, supervision, or direction; the application of skill or care in the manipulation, use, treatment, or control (of a thing or person), or in the conduct of something. (OED)</dd>
      </dl>
      <ul>
        <li>Learning the conceptual structure and organization of the Web</li>
        <li>Understanding how the Web is being applied to the manipulation, use, treatment, and control of information</li>
        <li>Thinking about and knowledgeably discussing how the Web is and can be used</li>
      </ul>
    </slide>
    <slide>
      <title>Web Architecture and Information Management</title>
      <ol>
        <li>Part 1: Building Blocks of the Web
        <ul>
          <li>History and background of the Web</li>
          <li>Filesystems and directory structure</li>
          <li>Foundations of Web page design (HTML &amp; CSS)</li>
          <li>Web browsers</li>
          <li>Communications (Internet &amp; HTTP)</li>
          <li>Web applications and databases</li>      
          <li>Client-side scripting (JavaScript &amp; Ajax)</li>
          <li>Multimedia content (pictures &amp; audio/video)</li>
        </ul>
        </li>
        <li>Part 2: Web-based Information Management
        <ul>
          <li>Web search engines and other intermediaries</li>
          <li>Syndication (RSS &amp; Atom)</li>
          <li>Semantic Web (Microformats &amp; RDFa)</li>
          <li>Mobile Web</li>
          <li>Real-time Web (Twitter et al.)</li>
          <li>Web values: Security &amp; privacy</li>
          <li>Web values: Openness &amp; transparency</li>
        </ul>
        </li>
      </ol>
    </slide>
    <part id="course-organization">
      <title>Organizational Issues</title>
      <slide>
        <title>About this Course</title>
        <ul>
          <li>Course Web page:<br/><code><a href="https://elearning.uh.edu/">https://elearning.uh.edu/</a></code></li>
          <li><a href="https://elearning.uh.edu/">COMM 3353 course Web page</a> for assignments</li>
          <li>Instructor email: <code><a href="mailto:greg@uh.edu">greg@uh.edu</a></code></li>
<!--          <ul>
            <li>archived in the <a href="http://gregjonason.com/d1c04397-1a77-495a-ae6a-0d7a028d0a52/page/a170ccc2-c742-4dd3-b5e3-ff5b187a0f08">bSpace email archive</a></li>
          </ul> -->
          <li>Letter grade based on participation, attendance, paper and exams</li>
          <ul>
            <li>participation: 20%</li>
            <li>attendance: 20%</li>
            <li>paper: 30%</li>
            <li>mid-term exam: 30%</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>About Greg</title>
        <ul>
          <li>University of Texas, AUstin, Texas - B.S. Communication, Radio-Television-Film (RTF) (1991-1995)</li>
          <li>WorldLink Data Communications, Manager of Operations (1996-1998) </li>
          <li>University of Houston, ManPower (Contractor) (1998-1999)</li>
          <li>University of Houston, Houston, Texas -  (2000-2004)</li>
          <li>University of Houston Houston, Texas (1999-date)</li>
          <li>Currently in my last semester of coursework for my doctoral degree at the College of Education</li>
          <li>Office hours: Email me to make an appointment (<a href="mailto:greg@uh.edu">greg@uh.edu</a>)</li>
        </ul>
      </slide>
<!--      <slide>
        <title>Assignments</title>
        <ul>
          <li>Weekly assignments (available on the <a href="http://gregjonason.com/d1c04397-1a77-495a-ae6a-0d7a028d0a52/page/47515a16-c888-4b09-b8ad-62961de34694">bSpace assignments page</a>)</li>
          <ul>
            <li>assigned Wednesday, due following Wednesday</li>
            <li><link href="lab-times"/> on Friday for assignment support</li>
          </ul>
          <li>Support provided by <a href="[URL GOES HERE]">[TA NAME]</a> <a href="mailto:[TA'S EMAIL ADDRESS]">([TA'S EMAIL ADDRESS])</a> </li>
          <li>Closely following the course topics</li>
        </ul>
      </slide>
      <slide id="lab-times">
        <title>Lab Times</title>
        <ul>
          <li>Lab time on [DAY] in/at [LOCATION]</li>
          <ul>
            <li>[TIME]-[TIME] am/pm: [LOCATION]</li>
          </ul>
          <li>Your best opportunity to get immediate support</li>
          <li>Bring your laptops, we provide no computer access</li>
          <li>Questions by email will also be answered (eventually …)</li>
          <ul>
          </ul>
        </ul>
      </slide> -->
      <slide>
        <title>Course Reading</title>
        <ul>
          <li>No official textbook</li>
          <li>Each lecture has readings and/or resources associated with it</li>
          <li>Reading the assigned reading in advance is required</li>
          <li>Searching for additional resources is encouraged</li>
          <ul>
            <li>really good resources might go into the syllabus</li>
            <li>bSpace has features for information sharing</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>About these Slides</title>
        <ul>
          <li>Generated from <a href="http://dret.net/projects/xslidy/">Hotspot</a> <a href="web-spring10.xml">XML</a></li>
          <li>Designed for online presentation and use (lots of links!)</li>
          <ul>
            <li>Firefox <a href="http://dret.typepad.com/dretblog/2008/07/go-up.html">Go Up</a> allows easy navigation up one level</li>
            <li>Firefox <a href="https://addons.mozilla.org/en-US/firefox/addon/1949">Site Navigation Bar</a> supports navigation of <html>link</html> links</li>
            <li>Firefox <a href="https://addons.mozilla.org/en-US/firefox/addon/2933">Link Widgets</a> requires a bit more configuration (more flexibility)</li>
            <li>for printing, use <q>a</q> (all slides), and then <q>s</q> (smaller font) a couple of times</li>
          </ul>
          <li>A good real-world example for Web-based publishing</li>
          <ul>
            <li>Slidy/Kilauea is useful, but there is no support for structures and hyperlinking</li>
            <li>Hotspot adds these features by adding an XSLT transformation</li>
            <li>Hotspot is useful, but there is no interface (XML editing only)</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Additional Resources</title>
        <ul>
          <li><a href="http://dret.net/glossary/">Online Glossary at <code>http://dret.net/glossary/</code></a></li>
          <ul>
            <li>suggestions, updates, corrections are welcome</li>
            <li>another exercise in how to use XML and XSLT for information management</li>
          </ul>
          <li><a href="http://dret.net/biblio/">Bibliography at <code>http://dret.net/biblio/</code></a></li>
          <ul>
            <li>suggestions, updates, corrections are welcome</li>
            <li>produced by an XML-centric system for managing bibliography data</li>
          </ul>
          <li>The <a href="http://www.w3.org/"><em>World Wide Web Consortium (W3C)</em></a></li>
          <ul>
            <li>headed by <em href="http://www.w3.org/People/Berners-Lee/">Tim-Berners Lee</em>, inventor of the Web (with <a href="http://en.wikipedia.org/wiki/Robert_Cailliau">Robert Cailliau</a>)</li>
          </ul>
          <li>The <a href="http://www.ietf.org/"><em>Internet Engineering Task Force (IETF)</em></a></li>
          <ul>
            <li>mainly Internet standards, but also responsible for URIs and HTTP</li>
          </ul>
        </ul>
      </slide>
    </part>
    <part id="course-contents">
      <title>Course Topics</title>
      <slide>
        <title>Course Overview</title>
        <ul>
          <li>50/50 mix of foundations and applications</li>
          <li>Week 1: History and background of the Web</li>
          <li>Weeks 2-8: Building blocks of the Web</li>
          <li>March 16: Mid-term exam</li>
          <li>Spring break (week of 3/21)</li>
          <li>Weeks 10-14: Web-based information management</li>
          <li>May 11: Final exam</li>
        </ul>
      </slide>
      <slide>
        <title>Building Blocks of the Web</title>
        <table>
          <tr>
            <td>
              <ul>
                <li>Filesystems &amp; directory structure</li>
                <li>HTML</li>
                <li>CSS</li>
                <li>Web browsers</li>
                <li>Internet architecture</li>
                <li>URIs &amp; HTTP</li>
              </ul>
            </td>
            <td>
              <ul>
                <li>Basic web applications</li>
                <li>Media types</li>
                <li>Multimedia</li>
                <li>Cookies</li>
                <li>Client-side scripting</li>
                <li>Advanced web applications</li>
              </ul>
            </td>
          </tr>
        </table>
      </slide>
      <slide>
        <title>Web-Based Information Management</title>
        <table>
          <tr>
            <td>
              <ul>
                <li>Web search</li>
                <li>Web intermediaries</li>
                <li>Content syndication</li>
                <li>Third-party content</li>
              </ul>
            </td>
            <td>
              <ul>
                <li>Semantic web</li>
                <li>Mobile web</li>
                <li>Real-time web</li>
                <li>Security &amp; privacy</li>
                <li>Openness &amp; transparency</li>
              </ul>
            </td>
          </tr>
        </table>
      </slide>
    </part>
  </presentation>

<!-- END 01 Overview and Introduction -->


<!-- BEGIN 02 Web History -->

  <presentation id="history">
    <title short="History">Web History</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading">
      <a href="http://www.nytimes.com/2008/06/17/science/17mund.html">The Web Time Forgot</a>&#160;· <a title="Note: you can skip the appendices" href="http://www.w3c.rl.ac.uk/primers/history/origins.pdf">History of the Web</a>&#160;· <a href="http://www.w3.org/History/1989/proposal.html">A Proposal</a>
    </toc>
    <toc class="resources">
      <a href="http://people.ischool.berkeley.edu/~buckland/otlet.html">Paul Otlet</a>&#160;· <a href="http://people.ischool.berkeley.edu/~buckland/goldberg.html">Emanuel Goldberg</a>&#160;· <a href="https://sherlock.ischool.berkeley.edu/wells/world_brain.html">World Brain</a>&#160;· <a href="http://www.ibiblio.org/pioneers/">Internet Pioneers</a>&#160;· <a href="http://www.dougengelbart.org/pubs/augment-3906.html">Augmenting Human Intellect</a>&#160;· <a href="http://portal.acm.org/citation.cfm?id=43953">Hypertext '87</a>&#160;· <a href="http://www.w3.org/History.html">W3C Web Chronology</a>&#160;· <a href="http://www.w3.org/2004/Talks/w3c10-HowItAllStarted/?toc=true">How It All Started</a>&#160;· <a href="http://www.isoc.org/internet/history/">Histories of the Internet</a>
    </toc>
    <toc class="abstract">The Web is, in the words of its creator Tim Berners-Lee, a "global information space." The Web is relatively new, but the vision of a global information space is at least a century old. Looking back at these early visions can give us a sense of the recurring problems in human communication and information management to which the Web was intended to be a solution. Yet we must be careful to avoid seeing an unbroken line of technological progress where there was none: many of the pioneers of information management were forgotten, and later generations constructed their own pragmatic historical narratives.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <part id="early-visions">
 <title>Early visions</title>
      <slide>
	      <title>Diderot's Encyclopédie and the European Enlightenment </title>
	<blockquote cite="http://en.wikipedia.org/wiki/Encyclopédie"><q>The work whose first volume we are presenting today has two aims. As an Encyclopedia, it is to set forth as well as possible the order and connection of the parts of human knowledge. As a <em>Reasoned Dictionary of the Sciences, Arts, and Trades</em>, it is to contain the general principles that form the basis of each science and each art, liberal, or mechanical, and the most essential facts that make up the body and substance of each.</q></blockquote>
	<center>
		<img src="img/diderot.jpeg" alt="Encyclopédie"/>
	</center>
	<p class="quotenote">Jean Le Rond d'Alembert, <a href="http://en.wikipedia.org/wiki/Encyclopédie">Preliminary Discourse to the Encyclopédie of Diderot</a>,1751</p>
      </slide>
       <title>Early visions</title>
      <slide>
        <title>Basic Problems</title>
        <ul>
	  <li>Problem of the generation and collection of vast amounts of knowledge and information</li>
	  <li>Problem of Accessibility</li>
	  <li>Problem of Presentation</li>
	  <li>Problem of Relevance (meaning, semantics)</li>
 	 </ul>
	 <br>
	 <ul>
	<li><b>Abstraction of Form from Content</b></li>
	<ul><li>All dogs are canines</li>
	<li>All <em>X</em> are <em>Y</em></li>
	</ul>
	<li>The sum of the angles of a triangle is equal to Lady Gaga</li>
	</ul>
  	</br> 
	</slide>
	     <title>Early visions</title>
      <slide>
        <title>Paul Otlet &amp; the Mundaneum</title>
        <ul>
          <li>Otlet (1868-1944) was a Belgian lawyer and bibliographer who envisioned "the creation of a kind of artificial brain by means of cards containing actual information or simply notes or references"</li>
          <li>The "monographic principle": individual facts would be extracted from texts and put onto individual 3x5 cards that would be indexed and cross-referenced (hypertext)</li>
          <li>In 1895 he began building this system, called the Mundaneum, and amassed over 12 million cards</li>
          <li>Eventually the project collapsed under the strain of managing that much paper, and Otlet began to envision electronic alternatives</li>
        </ul>
        <div class="credit"><em>Source:</em> Edward Vanhoutte, <a href="http://edwardvanhoutte.blogspot.com/2009/03/paul-otlet-1868-1944-and-vannevar-bush.html">"Paul Otlet (1868-1944) and Vannevar Bush (1890-1974)"</a></div>
      </slide>
      <title>Early visions</title>
      <slide>
        <title>Paul Otlet &amp; the Mundaneum</title>
        <ul>
          <li>Otlet (1868-1944) was a Belgian lawyer and bibliographer who envisioned "the creation of a kind of artificial brain by means of cards containing actual information or simply notes or references"</li>
          <li>The "monographic principle": individual facts would be extracted from texts and put onto individual 3x5 cards that would be indexed and cross-referenced (hypertext)</li>
          <li>In 1895 he began building this system, called the Mundaneum, and amassed over 12 million cards</li>
          <li>Eventually the project collapsed under the strain of managing that much paper, and Otlet began to envision electronic alternatives</li>
        </ul>
        <div class="credit"><em>Source:</em> Edward Vanhoutte, <a href="http://edwardvanhoutte.blogspot.com/2009/03/paul-otlet-1868-1944-and-vannevar-bush.html">"Paul Otlet (1868-1944) and Vannevar Bush (1890-1974)"</a></div>
      </slide>
      <slide>
        <title>Paul Otlet &amp; the Mundaneum</title>
        <center>
          <object width="640" height="505"><param name="movie" value="http://www.youtube.com/v/hSyfZkVgasI&amp;hl=en_US&amp;fs=1&amp;rel=0&amp;color1=0x3a3a3a&amp;color2=0x999999"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/hSyfZkVgasI&amp;hl=en_US&amp;fs=1&amp;rel=0&amp;color1=0x3a3a3a&amp;color2=0x999999" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="505"></embed></object>
        </center>
      </slide>
      <slide>
        <title>Wilhelm Ostwald &amp; The Bridge</title>
        <img style="float: right; margin-right: 2em;" src="http://people.ischool.berkeley.edu/~buckland/laponto.jpg" alt="Manifesto of The Bridge in Esperanto"/>
        <ul>
          <li>Ostwald (1853-1932) was a Baltic German chemist and winner of the Nobel Prize in Chemistry in 1909</li>
          <li>Used his prize money to finance Die Bruecke ("The Bridge"), an "international institute for the organizing of intellectual work", counting Marie Curie and Andrew Carnegie among its members</li>
          <li>Promoted the creation of a "world brain" along  Otlet's principles</li>
          <ul>
            <li>The monographic principle / hypertext</li>
            <li>Standardization of paper sizes</li>
            <li>Uniform indexing using Otlet's universal classification scheme</li>
          </ul>
        </ul>
        <div class="credit"><em>Source:</em> Michael Buckland, <a href="http://people.ischool.berkeley.edu/~buckland/ponto.html">"Wilhelm Ostwald and The Bridge</a></div>
      </slide>
      <slide>
        <title>H.G. Wells &amp; the World Brain</title>
        <blockquote cite="https://sherlock.ischool.berkeley.edu/wells/world_brain.html">There is no practical obstacle whatever now to the creation of an efficient index to all human knowledge, ideas and achievements, to the creation, that is, of a complete planetary memory for all mankind. … The whole human memory can be, and probably in a short time will be, made accessible to every individual. … It need not be concentrated in any one single place. It need not be vulnerable as a human head or a human heart is vulnerable. It can be reproduced exactly and fully, in Peru, China, Iceland, Central Africa, or wherever else seems to afford an insurance against danger and interruption. … It is a matter of such manifest importance and desirability for science, for the practical needs of mankind, for general education and the like, that it is difficult not to believe that in quite the near future, this Permanent World Encyclopaedia, so compact in its material form and so gigantic in its scope and possible influence, will not come into existence.</blockquote>
        <p class="quotenote">H.G. Wells, <a href="https://sherlock.ischool.berkeley.edu/wells/world_brain.html">"World Brain: The Idea of a Permanent World Encyclopaedia"</a>, 1937</p>
      </slide>
      <slide>
        <title>Emanuel Goldberg</title>
        <img style="float: right; margin-right: 2em;" src="http://www2.polito.it/didattica/polymath/ICT/Htmls/Argomenti/Appunti/StoriaIpertesto/Img/Emanuel%20Goldberg.jpg" alt="Emanuel Goldberg"/>
        <ul>
          <li>Goldberg (1881-1970) was a Russian Jew, chemist by training, who invented many key optical imaging technologies</li>
          <ul>
            <li>He received his doctorate from Wilhelm Ostwald's institute</li>
          </ul>
          <li>In 1927 Goldberg built the first functioning document retrieval system to use electronics</li>
          <ul>
            <li>"He would dial a number, would press a button and after three seconds the document would be projected [on a screen]"</li>
            <li>Wells' (later) vision of a "World Brain" was based such microfilm technology</li>
          </ul>
          <li>In 1933 he was kidnapped by Nazis and disappeared into oblivion</li>
        </ul>
        <div class="credit"><em>Source:</em> Michael Buckland, <a href="http://people.ischool.berkeley.edu/~buckland/goldberg.html">"Emanuel Goldberg, 1881-1970: Pioneer of Information Science"</a></div>
      </slide>
      <slide>
        <title>Vannevar Bush &amp; the Memex</title>
        <ul>
          <li>Bush (1890-1974) was an American engineer and first director of the Office of Scientific Research and Development, which oversaw the Manhattan Project to develop the atomic bomb</li>
          <li>In 1945 Bush published an essay in <em>The Atlantic Monthly</em> entitled "As We May Think," in which he described an imaginary personal information machine called the Memex</li>
          <li>Bush's ideas were based on his experiences building a "microfilm rapid selector" at MIT in the late 1930s</li>
          <ul>
            <li>Unbeknownst to him he was recreating much of Goldberg's work from a decade earlier</li>
          </ul>
          <li>Bush's status as a pillar of the American scientific community and the wide popularity of his essay have resulted in his being credited with the ideas that led to the Web</li>
          <ul>
            <li>Bush and Memex are token historical references in countless computer and information science papers</li>
          </ul>
          <div class="credit"><em>Source:</em> Michael Buckland, <a href="http://people.ischool.berkeley.edu/~buckland/goldbush.html">"Emanuel Goldberg, Electronic Document Retrieval, And Vannevar Bush's Memex"</a></div>
        </ul>
      </slide>
      <slide>
        <title>Vannevar Bush &amp; the Memex</title>
	<center>
	<img src="img/memex2.jpg" alt="Memex Close up"/>
	</center>
      </slide>
    </part>
    <part id="hypertext-precursors">
      <title>Hypertext systems</title>
      <slide>
        <title>Hypertext / Hypermedia</title>
        <blockquote cite="http://portal.acm.org/citation.cfm?id=43953">
          <div>"Hypertext" is non-sequentially linked pieces of text or other information. If the focus of such a system or document is on non-textual types (1) of information, the term hypermedia is often used instead. In traditional printed documents, practically the only such link supported is the footnote [really?], so hypertext is often referred to as "the generalized footnote."</div><br/>
          <div>(1) E.g. graphics, sound, moving images from videodisks, executable programs.</div>
        </blockquote>
        <p class="quotenote">Jakob Nielsen, <a href="http://portal.acm.org/citation.cfm?id=43953">"Hypertext '87 Trip Report"</a></p>
      </slide>
      <slide>
        <title>Linear text</title>
        <center>
          <img src="img/linear-text.png" alt="Linear text"/>
        </center>
      </slide>
      <slide>
        <title>Hypertext</title>
        <center>
          <img src="img/hypertext.png" alt="Hypertext"/>
        </center>
      </slide>
      <slide>
        <title>Hypertexts</title>
        <center>
          <div style="width: 1000px">
            <img style="float: left; margin-left: 1em; margin-right: 1em" alt="The Cave of Time" src="http://upload.wikimedia.org/wikipedia/en/f/f0/Cave_of_time.jpg"/>
            <img style="float: right; margin-right: 1em; margin-right: 1em" alt="HyperCard" src="http://upload.wikimedia.org/wikipedia/en/4/4b/Hypercard.png"/>
          </div>
        </center>
      </slide>
      <slide>
        <title>Xanadu</title>
        <img style="float: right; margin-right: 2em;" src="http://people.virginia.edu/~dg6n/classes/0405.1.fall.mdst110/lectures/pictures/computerlib_front_30.jpg" alt="Computer Lib/Dream Machines"/>
        <ul>
          <li>Project Xanadu was the first computer hypertext project, founded in 1960 by Ted Nelson</li>
          <li>No implementation was relased until 1998, and that was incomplete</li>
          <li>Despite his failure to produce a working system, Nelson is responsible for popularizing ideas about hypertext</li>
          <li>His 1974 book <em>Computer Lib/Dream Machines</em> inspired many early computing and hypertext pioneers</li>
        </ul>
      </slide>
      <slide>
        <title>NLS/Augment</title>
        <img style="float: right; margin-right: 2em;" src="http://www.mprove.de/diplom/_media/fig3.2_NLSWorkstation.jpg" alt="Engelbart’s NLS workstation"/>
        <ul>
          <li>NLS (oN-Line System) was developed by Doug Engelbart at the Stanford Research Institute in the 1960s</li>
          <li>NLS was the first working computer system to employ hypertext links</li>
          <li>Engelbart and his Augmentation Research group also invented the mouse and dividing the screen into windows</li>
        </ul>
      </slide>
      <slide>
        <title>NoteCards</title>
        <img style="float: right; margin-right: 2em;" src="http://farm4.static.flickr.com/3030/3074153348_fd0bcfbf22_o_d.jpg" alt="NoteCards"/>
        <ul>
          <li>Developed at Xerox PARC (Palo Alto Research Center) in 1984</li>
          <li>"Notecards" contain text, graphics, or images</li>
          <li>Notecards are connected into networks by links</li>
          <li>"Browsers" and "file boxes" are used to manage networks of cards and links</li>
        </ul>
      </slide>
      <slide>
        <title>HyperCard</title>
        <img style="float: right; margin-right: 2em;" src="http://upload.wikimedia.org/wikipedia/en/4/4b/Hypercard.png" alt="HyperCard"/>
        <ul>
          <li>Developed at Apple and first released in 1987; bundled with all new Macs at that time</li>
          <li>The most successful hypermedia system prior to the Web</li>
          <li>A "stack" of virtual "cards", similar to NoteCard</li>
          <li>HyperCard was the <a href="http://c2.com/cgi/wiki?WikiWikiHyperCard">inspiration</a> for the first wiki</li>
        </ul>
      </slide>
      <slide>
        <title>Hypertext/Hypermedia Research</title>
        <ul>
          <li>These are just a few of the many, many hypertext and hypermedia systems developed during the 1970s and 1980s</li>
          <li>Hypertext was a very active area of research in academia and industry</li>
          <li>By 1987 there was a conference (ACM Conference on Hypertext and Hypermedia) that is still going on today</li>
          <li>However, the Web did not arise from this community and was initially rejected by it</li>
        </ul>
      </slide>
    </part>
    <part id="birth-of-the-web">
      <title>Birth of the Web</title>
      <slide>
        <title>A global information space</title>
        <blockquote cite="http://www.worldcat.org/oclc/41238513">Suppose all the information stored on computers everywhere were linked, I thought. Suppose I could program my computer to create a space in which anything could be linked to anything. All the bits of information in every computer at CERN, and on the planet, would be available to me and to anyone else. There would be a single, global information space.</blockquote>
        <p class="quotenote">Tim Berners-Lee, <a href="http://www.worldcat.org/oclc/41238513"><em>Weaving the Web</em></a></p>
      </slide>
      <slide>
        <title>CERN</title>
        <ul>
          <li>Pan-European laboratory for research in nuclear physics using particle colliders</li>
          <li>Experiments take months to complete, generate massive amounts of data, and involve hundreds or thousands of scientists around the world</li>
          <li>100s of networked computers needed to control the colliders, monitor the experiments and manage data</li>
          <ul>
            <li>By 1990 CERN is the largest Internet node in Europe</li>
          </ul>
          <li>1989: The Large-Electron Positron (LEP) collider is completed</li>
          <ul>
            <li>Tim Berners-Lee <a href="http://www.w3.org/History/1989/proposal.html">proposes</a> a new distributed information system in relation to the next-generation facility, the LHC (completed in 2007)</li>
          </ul>
        </ul>
        <div class="credit"><em>Source:</em> Oxford Brookes University, <a href="http://www.w3c.rl.ac.uk/primers/history/origins.pdf">History of the Web</a></div>
      </slide>
      <slide>
        <title>Tim Berners-Lee</title>
        <ul>
          <li>1980: TBL begins work as a contract programmer at CERN and builds ENQUIRE, a hypertext system to help him keep notes</li>
          <ul>
            <li>named after a Victorian-era reference book with short entries indexed and cross-referenced</li>
          </ul>
          <li>1984: TBL returns to CERN to work on getting networked computers to coordinate with one another</li>
          <ul>
            <li>begins thinking about how to re-implement ENQUIRE so that it could be distributed across multiple computers</li>
          </ul>
          <li>1989: TBL makes his initial <a href="http://www.w3.org/History/1989/proposal.html">proposal</a> to CERN management</li>
          <ul>
            <li>A "distributed hypertext system" for managing information at CERN</li>
          </ul>
        </ul>
        <div class="credit"><em>Source:</em> Oxford Brookes University, <a href="http://www.w3c.rl.ac.uk/primers/history/origins.pdf">History of the Web</a></div>
      </slide>
      <slide>
        <title>TBL's Requirements</title>
        <ul>
          <li>Remote access</li>
          <ul><li>accessible over the network from anywhere</li></ul>
          <li>Heterogeneity</li>
          <ul><li>accessible across different kinds of computers and operating systems</li></ul>
          <li>Non-centralization</li>
          <ul><li>link together existing and new systems without central control or coordination</li></ul>
          <li>Access to existing data</li>
          <ul><li>provide access to existing databases as though they were in hypertext form</li></ul>
        </ul>
        <div class="credit"><em>Source:</em> Tim Berners-Lee, <a href="http://www.w3.org/History/1989/proposal.html">Information Management: A Proposal</a>, March 1989</div>
      </slide>
      <slide>
        <title>TBL's Requirements</title>
        <img style="float: right; margin-right: 2em;" src="http://www.w3c.rl.ac.uk/primers/history/origins_files/lmb1.gif" alt="Nicola Pellow's Line Mode Browser"/>
        <ul>
          <li>Private links</li>
          <ul><li>add one's own private links to and from public information</li></ul>
          <li>Display</li>
          <ul><li>ASCII text on a 24x80 screen sufficient, graphics optional</li></ul>
          <li>Data analysis</li>
          <ul><li>some degree of automatic analysis to see structural patterns among the linked nodes</li></ul>
          <li>Live links</li>
          <ul><li>every time a link is followed, the latest version of the information is retrieved</li></ul>
        </ul>
        <div class="credit"><em>Source:</em> Tim Berners-Lee, <a href="http://www.w3.org/History/1989/proposal.html">Information Management: A Proposal</a>, March 1989</div>
      </slide>
      <slide>
        <title>TBL's Non-requirements</title>
        <blockquote cite="">Discussions on Hypertext have sometimes tackled the problem of <strong>copyright enforcement</strong> and <strong>data security</strong>. These are of secondary importance at CERN, where <strong>information exchange is still more important than secrecy</strong>.</blockquote>
        <p class="quotenote">Tim Berners-Lee, <a href="http://www.w3.org/History/1989/proposal.html">Information Management: A Proposal</a>, March 1989</p>
        <p>A 3rd non-requirement: <strong>link integrity</strong>. Earlier hypertext systems did not allow for broken links, and thus required central coordination. TBL's system simply returned an error when a link pointed to a non-existent node.</p>
	<ul>
	<li><q>The only way in which sufficient flexibility can be incorporated is to separate the information storage software from the information display software</q></li>
	</ul>
      </slide>
      <slide>
        <title>Sidenote: The Web vs. Gopher</title>
        <ul>
          <li><a href="http://en.wikipedia.org/wiki/Gopher_(protocol)">Gopher</a> is a networked hypertext system that was developed at the University of Minnesota around the same time as the Web (1991)</li>
          <li>From 1991-1993 it was very popular at universities</li>
          <li>The open architecture of the Web made it easy to incorporate Gopher sites, but not vice-versa</li>
          <li>In 1993 U of M announced that they would begin charging licensing fees, driving many users to adopt the Web instead</li>
        </ul>
      </slide>
      <slide>
        <title>Early milestones</title>
        <ul>
          <li>November 1990: First Web server, and Web page, come online</li>
          <li>Christmas 1990: <a href="http://www.w3.org/People/Berners-Lee/FAQ.html#browser">WorldWideWeb browser</a> demonstrated  (<a href="http://www.w3.org/MarkUp/tims_editor">screenshot</a>)</li>
          <li>February 1993: First version of <a href="http://en.wikipedia.org/wiki/Mosaic_(web_browser)">NCSA Mosaic browser</a> released (<a href="http://www.computerhistory.org/timeline/images/1993_mosaic_browser_large.jpg">screenshot</a>)</li>
          <li>March 1994: Marc Andreessen and colleagues leave NCSA to form "Mosaic Communications Corp." (later <a href="http://en.wikipedia.org/wiki/Netscape">Netscape</a>)</li>
          <li>May 1994: <a href="http://www.cern.ch/WWW94/">First International WWW Conference</a> held at CERN</li>
          <li>October 1994: <a href="http://www.w3.org/">World Wide Web Consortium</a> founded; Netscape browser relased</li>
          <li>August 1995: Microsoft releases <a href="http://en.wikipedia.org/wiki/Internet_Explorer_1">Internet Explorer 1</a> (<a href="http://www.microsoft.com/library/media/1033/windows/IE/images/community/columns/old_ie.gif">screenshot</a>)</li>
          <li>July 1995: <a href="http://amazon.com">Amazon.com</a> launches (<a href="http://www.tranquileye.com/cyber/1995/amazondotcom_1995.gif">screenshot</a>)</li>
        </ul>
      </slide>
      <slide>
        <title>Conclusions</title>
        <p>Like earlier attempts at building a "global information space", the Web was designed in response to the information management needs of large-scale, institutional science. Tim Berners-Lee was able to build upon previous technologies and incorporate ideas from previous systems to meet these needs. His emphasis on decentralization, use of existing infrastructure, and decision to make WWW technology freely available enabled it to spread and grow quickly. The 1993 decision to allow commercial uses of the Internet, and suitability of Web technology for e-commerce, resulted in explosive economically-fueled growth. In the process of its remarkable growth, however, some of the properties of the early web were de-emphasized (e.g. symmetry between reading and writing).</p>
      </slide>
    </part>
  </presentation>

<!-- END 02 Web History -->



<!-- BEGIN 03 Standards and Standards Bodies -->

  <presentation id="standards">
    <title short="Standards">Standards and Standards Bodies</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading">
      <a href="http://books.google.com/books?id=IXkX8WKG24gC&amp;pg=PA1">Intro to Dynamics of Standards</a>&#160;· <a href="http://www.webstandards.org/learn/faq/">Web Standards FAQ</a>&#160;· <a href="http://wiki.whatwg.org/wiki/FAQ">WHATWG FAQ (Parts 1 &amp; 2)</a>
    </toc>
    <toc class="resources">
      <a href="http://www.nytimes.com/2009/04/07/opinion/07crocker.html">How the Internet Got Its Rules</a>&#160;·<a href="http://www.ietf.org/">IETF</a>&#160;· <a href="http://www.w3.org/">W3C</a>&#160;· <a href="http://www.whatwg.org/">WHATWG</a>
    </toc>
    <toc class="abstract">The Web is composed of standards: rules and practices to which technologies must adhere if they are to be considered part of the Web. Most of these standards are developed by <em>standards bodies</em>, organizations that publish documents defining Web technologies. But sometimes standards develop more organically, from technologies that become popular and are widely implemented without a formal process. However they arise, Web standards are critical for the existence of the Web, and they can have enormous economic and societal impact.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <part>
      <title>What are Standards?</title>
      <slide>
        <title>What is a standard?</title>
        <img style="float: right; margin-right: 1em; margin-left: 1em;" src="http://upload.wikimedia.org/wikipedia/commons/thumb/c/c1/Standard_kilogram.jpg/520px-Standard_kilogram.jpg" alt="Standard kilogram"/>
        <ul>
          <li>Originally: an object used as an example for measurement</li>
          <li>Abstractly: magnitude(s) of measurement, e.g. the metric system</li>
          <li>More generally: an example of correctness; an authoritative rule, principle, model, or <strong>way of doing something</strong></li>
        </ul>
      </slide>
      <slide>
        <title>2 kinds of standards</title>
        <ul>
          <li>Committee or <em>de jure</em> standards</li>
          <ul>
            <li>Standards "by law" or agreement</li>
          </ul>
          <li><em>De facto</em> standards</li>
          <ul>
            <li>Standards "in fact" or reality</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title><em>De jure</em> standards</title>
        <ul>
          <li>Established by consensus</li>
          <li>Approved by a recognized organization</li>
          <li>Provides rules, guidelines and characteristics</li>
          <li>Takes the form of a written document</li>
          <li>Intended for voluntary use (not a law or regulation)</li>
          <li>Goal is to minimize conflict, disorder, misunderstanding</li>
        </ul>
        <div class="credit"><em>Source:</em> Egyedi &amp; Blind, <a href="http://www.worldcat.org/oclc/181927876">The Dynamics of Standards</a>, 2-3.</div>
      </slide>
      <slide>
        <title><em>De facto</em> standards</title>
        <ul>
          <li>Widely adopted practices or products</li>
          <li>Significant market share</li>
          <li>Copied, referred to, or depended upon by many other practices or products</li>
          <li>Sometimes <em>de facto</em> standards will be turned into <em>de jure</em> standards by a standards organization</li>
        </ul>
        <div class="credit"><em>Source:</em> Egyedi &amp; Blind, <a href="http://www.worldcat.org/oclc/181927876">The Dynamics of Standards</a>, 2-3.</div>
      </slide>
      <slide>
	<title>Standards Life Cycle</title>
	<center>
	<img src="img/standards-cycle.png" alt="Standards Lifecycle"/>
	</center>
	<br>
	<div class="credit"><em>Source:</em>Tineke M. Egyedi, Knut Blind,<a href="http://books.google.com/books?id=IXkX8WKG24gC">The Dynamics of Standards, p. 5</a></div>
	</br>	
	</slide>
	    <slide>
        <title>How standards are used</title>
        <ul>
          <li>To regulate behavior, e.g. for ensuring health</li>
          <li>To ensure fairness, e.g. accessibility guidelines</li>
          <li>To aid consistency, e.g. Pantone color codes</li>
          <li>To guide communication, e.g. disease classifications</li>
          <li><strong>To enable products made by different groups to work together</strong></li>
        </ul>
      </slide>
    </part>
    <part>
      <title>Internet &amp; Web Standards</title>
      <slide>
        <title>RFCs</title>
        <ul>
          <li>1969: The hundred or so computer scientists using the Internet needed a way to organize their ideas about how it should work</li>
          <li>Stephen Crocker, a grad student at UCLA, sent (by postal mail) a <a href="http://www.ietf.org/rfc/rfc0001.txt">Request For Comments</a> out to the other research groups</li>
          <li>This became the formal process by which Internet standards were developed</li>
          <li>Anyone can write an RFC and they are freely available</li>
          <li>Today there are over 5000 RFCs standardizing everything from email to iCalendar to blog feeds</li>
          <li>Web standards build upon these RFCs</li>
        </ul>
      </slide>
      <slide>
        <title>MUST / SHOULD / MAY</title>
        <ul>
          <li>Most Web standards use the MUST / SHOULD / MAY phrasing to set out their rules</li>
          <li>MUST means following a rule is absolutely required</li>
          <li>SHOULD means following a rule is recommended</li>
          <li>MAY means following a rule is optional</li>
          <li>This phrasing is itself a standard! (<a href="http://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a>)</li>
        </ul>
      </slide>
      <slide>
        <title>The W3C</title>
        <a href="http://www.w3.org"><img style="float: right; margin-right: 2em;" src="http://www.w3.org/Icons/w3c_main" alt="World Wide Web Consortium Logo"/></a>
        <ul>
          <li>Consortium of ~350 businesses, non-profits, universities, and gov't entities</li>
          <li>$1000 (for non-profit in a poor country) to $69,000 (for large company) yearly membership fees</li>
          <li>Headed by Tim Berners-Lee</li>
          <li>Administered by 3 "host organizations" in the U.S. (MIT), Europe, and Japan</li>
        </ul>
      </slide>
      <slide>
        <title>The W3C Standards Process</title>
        <ul>
          <li>Working Draft</li>
          <ul>
            <li>An initial draft document with ideas about a new Web technology</li>
          </ul>
          <li>Candidate Recommendation</li>
          <ul>
            <li>A document that has been widely reviewed and is ready to be implemented</li>
          </ul>
          <li>Proposed Recommendation</li>
          <ul>
            <li>A document that various groups have successfully implemented and given their feedback on</li>
          </ul>
          <li>W3C Recommendation</li>
          <ul>
            <li>A document that, after extensive consensus-building, has been endorsed by the W3C Members and Director (example: <a href="http://www.w3.org/TR/html401/">HTML 4.01</a>)</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>The WHATWG</title>
        <ul>
          <li>In 2004, engineers from Apple, Mozilla, and Opera decided they were tired with the slow-moving and unwieldy W3C consensus-building process</li>
          <li>They formed the <a href="http://www.whatwg.org/">Web Hypertext Application Technology Working Group</a> (WHATWG)</li>
          <ul>
            <li>No membership fees</li>
            <li>Everything is done on an open mailing list</li>
            <li>Not a consensus-based process</li>
            <li>People send feedback until they cannot convince the editor to make any more changes</li>
            <li>An oversight committee can change the editor if he goes mad with power</li>
          </ul>
          <li>Their main focus is a new version of HTML (<a href="http://html5.org/">HTML5</a>)</li>
        </ul>
      </slide>
      <slide>
        <title>Standards are Serious Stuff</title>
        <ul>
          <li>Web standards can be messy and complex issues</li>
          <li>A lot of money and power rides on web standards</li>
          <li>Case in point: HTML5, the &lt;video&gt; tag, and <a href="http://www.youtube.com/html5">YouTube</a></li>
        </ul>
      </slide>
    </part>
    <slide>
      <title>Assignment #1: History &amp; Standards</title>
      <ul>
        <li>Assignment #1 is now available on bSpace</li>
        <li>Three questions about Web history and standards</li>
        <li>Due <strong>1 week from today</strong>: Wednesday, February 2nd, by <strong>3PM</strong></li>
        <li>Readings are Essential!</li>
      </ul>
    </slide>
    <slide>
      <title>Next week: Filesystems &amp; HTML</title>
      <p>Next week we will begin looking at Web standards in detail, starting with HTML (the HyperText Markup Language). Before that, however, we need to cover the basics of filesystems and web servers.</p>
    </slide>
  </presentation>

<!-- END 03 Standards and Standards Bodies -->



<!-- BEGIN 04 Filesystems and Web Servers -->

  <presentation id="filesystems">
    <title short="Filesystems">Filesystems and Web Servers</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading">
      <a href="http://en.wikipedia.org/wiki/Computer_file">Files</a>&#160;· <a href="http://hubpages.com/hub/understanding-your-file-system">Filesystems</a>&#160;· <a href="http://www.geo.hunter.cuny.edu/~tbw/spars/dept.faqs/file_dir_structure.htm">Directory structure</a>&#160;· <a href="http://en.wikipedia.org/wiki/Path_(computing)">Paths</a>&#160;· <a href="http://www.netstrider.com/tutorials/HTML/structure/">Website structure</a>&#160;· <a href="http://www.howstuffworks.com/web-server.htm/printable">Web servers</a>
    </toc>
    <toc class="resources">
      <a href="http://www.pathname.com/fhs/pub/fhs-2.3.html">Filesystem Hierarchy Standard</a>&#160;· <a href="http://httpd.apache.org/docs/2.2/urlmapping.html">Apache URL Mapping</a>
    </toc>
    <toc class="abstract">It can be hard to understand web technologies without a basic understanding of filesystems, directory structure, and file paths. This lecture provides an overview of these topics and shows how web servers build upon these fundamentals.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <part>
      <title>Files, Filesystems, &amp; Directory Structure</title>
      <slide>
        <title>Files</title>
        <ul>
          <li>In ordinary language "file" refers to, e.g., a Word document, an MP3, a digital photograph, etc.</li>
          <li>To a computer a file is simply an abstraction for some arbitrary chunk of information</li>
          <li>A file has (at least) a name, a size (in bytes), permissions (who can read, write, or execute it), and a type</li>
          <ul>
            <li>Most basic type distinction: <em>text</em> vs. <em>binary</em></li>
            <li>Filename suffixes (e.g. .doc, .mp3, .jpg) are only hints - changing them does not change a file's type</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Filesystems and Directory Structure</title>
        <ul>
          <li>There's an indirect relationship between files and storage media</li>
          <li>This relationship is managed by the file system</li>
          <li>The interface the filesystem presents to users is the <em>directory structure</em></li>
          <li>Directory structure is (mainly) hierarchical: directories can contain files and other directories</li>
          <li>Different ways of visualizing directory structure</li>
          <ul>
            <li>Folders in a graphical user interface</li>
            <li>Nested lists in command line interface</li>
          </ul>
          <li>Directory structure is increasingly de-emphasized in user interfaces (example: iPhone)</li>
        </ul>
      </slide>
      <slide>
        <title>Graphical View of Directory Structure</title>
	<center><img src="linux-root.png" alt="Graphical view of directory structure"/></center>
      </slide>
      <slide>
        <title>Textual View of Directory Structure</title>
	<center><img src="linux-shell.png" alt="Textual view of directory structure"/></center>
      </slide>
    </part>
    <part>
      <title>File Paths</title>
      <slide>
        <title>File Paths</title>
        <ul>
          <li>A path is a sequence of symbols for uniquely describing a file or directory's location in a directory structure</li>
          <li>A path consists of a sequence of directory names, optionally followed by a file name if the path is to a file</li>
          <li>The elements in the sequence are separated by a <em>delimiter</em> character (<strong>/</strong> on Mac and Unix, <strong>\</strong> on Windows)</li>
          <li>Example file path on Linux or Mac:
          <pre>/home/dilanm/Desktop/notes.txt</pre>
          </li>
          <li>Example file path on Windows:
          <pre>C:\Documents and Settings\Dilan Mahendran\Desktop\notes.txt</pre>
          </li>
        </ul>
      </slide>
      <slide>
        <title>Absolute vs. Relative File Paths</title>
        <ul>
          <li>File paths may be <em>absolute</em> or <em>relative</em></li>
          <li>An absolute path starts at the "root directory" and always refers to the same file or directory</li>
          <ul>
            <li>Root directory on Mac, Unix, and Linux is <strong>/</strong></li>
            <li>Root directory on Windows is (for example) <strong>C:\</strong></li>
          </ul>
          <li>A relative path is interpreted relative to some current location</li>
          <li>Relative paths may use some special characters</li>
          <ul>
            <li><strong>.</strong> refers to the current directory (the directory we're in)</li>
            <li><strong>..</strong> refers to the parent directory (the directory above the one we're in)</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Absolute vs. Relative File Paths</title>
        <ul>
          <li>Assuming we're in the directory named 'Desktop', the following paths are all equivalent:</li>
          <ul>
            <li>Absolute:<pre>/home/dilanm/Desktop/notes.txt</pre></li>
            <li>Relative:
            <pre>notes.txt</pre>
            <pre>./notes.txt</pre>
            <pre>../Desktop/notes.txt</pre></li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Why Relative Paths?</title>
        <ul>
          <li>Directory structure varies from computer to computer</li>
          <li>Absolute paths name every directory from the root</li>
          <li>An absolute path that points to a file on one computer may not point to anything on another computer</li>
          <li>A relative path usually only names directories beside or below around the current directory</li>
          <li>Using relative paths, files in or below a certain directory can refer to each other without making assumptions about the directory structure of the whole computer</li>
          <li>Thus relative paths are more <em>portable</em></li>
          <li>This is important for web sites, which are usually moved around to different computers</li>
        </ul>
      </slide>
    </part>
    <part>
      <title>Web Servers</title>
      <slide>
        <title>Web Servers</title>
        <ul>
          <li>"Web server" is used to mean two things:</li>
          <ol>
            <li>Software that receives requests from web browsers and sends back the files that compose a web page</li>
            <li>A computer running such software</li>
          </ol>
          <li>A web server is not a special kind of computer</li>
          <ul>
            <li>If you have a Mac, you have <a href="http://docs.info.apple.com/article.html?path=Mac/10.6/en/8236.html">a web server</a> (Apache)</li>
          </ul>
          <li>In particular, (computers running) web servers have file systems and directory structures just like any other computer</li>
          <li>Note that Unix is far more common among computers being used as web servers than it is among computers being used for personal computing</li>
          <ul>
            <li>So we'll always use Unix (and Mac) -style paths in this course</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>URL Paths</title>
        <ul>
          <li>A web URL has two main parts: the <em>domain</em> and the <em>path</em>
          <pre>http://[domain]/[path]</pre></li>
          <li>For example:
		  <pre>https://elearning.uh.edu/</pre></li>
          <ul>
            <li>The domain is "courses.ischool.berkeley.edu"</li>
            <li>The path is "/i153/s11/index.shtml"</li>
          </ul>
          <li>(URLs have more parts than this, as we'll learn in late February)</li>
        </ul>
      </slide>
      <slide>
        <title>URL Paths vs. File Paths</title>
        <ul>
          <li>URL paths <em>might</em> be the same as file paths, <strong>but usually they aren't</strong></li>
          <li>Web server software is responsible for translating URL paths into file paths</li>
          <li>Some URL paths are not translated into file paths at all, but are interpreted in other ways (e.g. looking up something in a database)</li>
          <li>Example of a URL path and its corresponding file path:</li>
          <ul>
            <li>URL path: <pre>/i153/s11/index.shtml</pre></li>
            <li>(Absolute) file path: <pre>/courses/i153/public_html/s11/index.shtml</pre></li>
          </ul>
          <li>Like file paths, URL paths can be absolute or relative</li>
        </ul>
      </slide>
    </part>
  </presentation>

<!-- END 04 Filesystems and Web Servers -->



<!-- BEGIN 05 HyperText Markup Language (HTML) -->

  <presentation id="html">
    <title short="HTML">HyperText Markup Language (HTML)</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://www.w3.org/MarkUp/Guide/">Getting started with HTML</a>&#160;· <a href="http://proquest.safaribooksonline.com/059610197X/1">Getting to know HTML</a></toc>
    <toc class="resources"><a href="http://www.w3schools.com/html">HTML&#160;Tutorial</a>&#160;· <a href="https://developer.mozilla.org/en/HTML/Element">HTML&#160;Reference</a>&#160;· <a href="http://validator.w3.org/">HTML&#160;Validator</a></toc>
    <toc class="abstract">The <em>Hypertext Markup Language (HTML)</em> is the most important content type on the Web. This lecture covers a basic overview of how to use HTML markup in general. In particular, we look at page titles, meta tags, inserting text and images, using lists, and creating simple tables. Attributes can be used for more layout control in the HTML tags, but most layout issues are deferred until the CSS lecture.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <slide>
      <title>Structured Documents on the Web</title>
      <ul>
        <li><em>Hypertext Markup Language (HTML)</em> is the language of the Web</li>
        <ul>
          <li><em>Hypertext</em> because the Web is a hypermedia system</li>
          <li><em>Markup</em> because documents are encoded using text</li>
          <li><em>Language</em> because HTML is used for communications</li>
        </ul>
        <li><em>Markup Languages</em> are different from most file formats</li>
        <ul>
          <li>many computer formats are binary encoded and not <q>just text</q></li>
          <li><em>markup</em> allows structured documents to be encoded <em>as just text</em></li>
        </ul>
        <li>Web data formats use markup as well as other encodings</li>
        <ul>
          <li><em>HTML</em> and <em>XML</em> are markup languages</li>
          <li><em>JavaScript</em> is also exchanged textually (but it's not markup)</li>
          <li>images and other multimedia content is encoded as binary files</li>
        </ul>
      </ul>
    </slide>
    <part id="html-validation">
      <title>HTML Validation</title>
      <slide>
        <title>Checking for Correctness</title>
        <ul>
          <li>HTML's structure is defined by a <em>Document Type Definition (DTD)</em></li>
          <ul>
            <li>formally speaking, a DTD defines the grammar of the HTML language</li>
            <li>(and if you really want to know, <em>SGML</em> defines the syntax)</li>
            <li>colloquially speaking, a DTD defines how to combine elements and attributes</li>
          </ul>
        </ul>
        <listing src="html4-strict.dtd" line="513-517" title="Syntax for Unordered Lists (UL)"/>
        <listing src="html4-strict.dtd" line="521-524" title="Syntax for List Items (LI)"/>
        <listing src="html4-strict.dtd" line="258" title="Definition of %flow;"/>
        <listing src="html4-strict.dtd" line="254-256" title="Definition of %block;"/>
      </slide>
      <slide id="tool-validation">
        <title>Tool-Based Validation</title>
        <ul>
          <li>Testing HTML makes sure that it is well-defined</li>
          <ul>
            <li>any errors have to be corrected by the browser</li>
            <li>the results of browser-side corrections are hard to predict</li>
          </ul>
          <li>HTML editors allow validation within the tool</li>
          <ul>
            <li>in theory, using the <a href="http://www.w3.org/TR/html4/loose.dtd">public DTD</a>, in practice, using a <a href="src/html4-loose.dtd">local copy</a></li>
          </ul>
          <li>In theory, HTML editors should always produce valid HTML</li>
          <ul>
            <li>things today are not as bad as they used to be</li>
            <li>creating valid HTML can be a challenge for complex Web pages</li>
          </ul>
        </ul>
      </slide>
      <slide id="web-validation">
        <title>Web-Based Validation</title>
        <ul>
          <li><link href="tool-validation"/> requires locally installed tools</li>
          <ul>
            <li>maybe hard to install and hard to maintain across computers</li>
            <li>for power users, locally installed tools are hard to beat</li>
          </ul>
          <li><em>Web-based tools</em> allow validation from anywhere</li>
          <li><a href="http://www.w3.org">W3C</a>'s <a href="http://validator.w3.org/">markup validation service</a> supports three modes:</li>
          <ol>
            <li>validation by URI (pointing at a random Web page)</li>
            <li>validation by file upload (allows validation of non-Web files)</li>
            <li>validation by copy/paste (lightweight mode for small experiments)</li>
          </ol>
          <li>Markup validation is only one facet of checking Web content</li>
          <ul>
            <li><a href="http://jigsaw.w3.org/css-validator/">checking CSS code for validity</a></li>
            <li><a href="http://validator.w3.org/mobile/">checking Web pages for mobile content (i.e., simpler HTML)</a></li>
            <li><a href="http://validator.w3.org/checklink">checking Web pages for broken links</a></li>
          </ul>
        </ul>
      </slide>
      <slide id="firebug">
        <title>Firebug &amp; Web Inspector</title>
        <img src="firebug-logo.png" style="float : right ; margin : 0 1em 2em 2em ; " href="http://getfirebug.com/" title="Firebug"/>
        <ul>
          <li>Browser-based inspection (much better than <q>view source</q>)</li>
          <li>Learning Web design by looking at Web design</li>
          <ul>
            <li>Firefox's <em>View → Page Source</em> provides access to a page's source</li>
            <li>Firefox's <em>Tools → Page Info</em> provides access to all ancillary files</li>
          </ul>
          <li>Understanding how complex HTML works is hard</li>
          <ul>
            <li>looking at the source requires <q>brain-based rendering</q></li>
            <li>looking at a rendered document makes it hard to see the source</li>
            <li>Firebug provides a convenient inspection feature for Web pages</li>
          </ul>
          <li>Inspection allows both directions of understanding HTML</li>
          <ul>
            <li>inspecting the rendered page and looking at the source part</li>
            <li>inspecting the source and seeing how it is being rendered</li>
          </ul>
          <li>Firebug also displays the associated <link href="css">CSS</link> code</li>
          <li>Safari and Chrome offer a similar tool called <a href="http://trac.webkit.org/wiki/WebInspector">Web Inspector</a></li>
        </ul>
      </slide>
    </part>
    <part>
      <title>HTML and Structure</title>
      <slide>
        <title>Text</title>
        <ul>
          <li><htmel>h1</htmel>-<htmel>h6</htmel> are different levels of <a href="http://www.w3.org/TR/REC-html40/struct/global.html#h-7.5.5">headings</a></li>
          <li><htmel>p</htmel> contains <a href="http://www.w3.org/TR/REC-html40/struct/text.html#h-9.3.1">paragraph text</a></li>
          <ul>
            <li>whitespace and line wrapping are ignored</li>
            <li>paragraphs are set as boxes containing a number of lines</li>
          </ul>
          <li>Text inside paragraphs can use additional markup (<q href="http://www.w3.org/TR/REC-html40/struct/text.html#h-9.2.1">phrase markup</q>)</li>
          <ul>
            <li><htmel>em</htmel> for <em>emphasized text</em></li>
            <li><htmel>strong</htmel> for text with a <strong>strong emphasis</strong></li>
            <li><htmel>sub</htmel> for <sub>subscript text</sub></li>
            <li><htmel>sup</htmel> for <sup>superscript text</sup></li>
            <li><htmel>q</htmel> for <q>quoted text</q> (<q>try <q>nesting</q> quotes</q>)</li>
            <li><htmel>code</htmel> for <code>code examples</code></li>
          </ul>
          <li>rendering of all these elements is built into the browser</li>
          <ul>
            <li>more sophisticated issues probably <a href="http://dret.typepad.com/dretblog/2008/04/internationaliz.html">are more browser-dependent</a></li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>More Advanced Text</title>
        <ul>
          <li>Quotations can be explicitly marked up as such</li>
          <ul>
            <li><htmel>blockquote</htmel> for block-level quotations</li>
            <li><htmel>q</htmel> for inline quotations (part of a block)</li>
            <li><htmla>cite</htmla> provides support for <q cite="http://www.w3.org/TR/REC-html40/struct/text.html#edef-CITE">pointing to the source</q></li>
          </ul>
          <li>Preformatted text allows text formatting in the HTML source</li>
          <ul>
            <li><htmel>pre</htmel> leaves whitespace intact and usually uses monospaced fonts</li>
            <li>word wrapping may be turned off by default</li>
          </ul>
          <listing src="pre.html" line="11-17" title="Preformatted text"/>
        </ul>
      </slide>
      <slide>
        <title>Lists</title>
        <ul>
          <li>HTML supports three kinds of lists</li>
          <ul>
            <li><htmel>ul</htmel> for <em href="http://www.w3.org/TR/REC-html40/struct/lists.html#h-10.2">unordered lists</em> containing <htmel title="list item">li</htmel></li>
            <li><htmel>ol</htmel> for <em href="http://www.w3.org/TR/REC-html40/struct/lists.html#h-10.2">ordered lists</em> containing <htmel title="list item">li</htmel></li>
            <li><htmel>dl</htmel> for <em href="http://www.w3.org/TR/REC-html40/struct/lists.html#h-10.3">definition lists</em> containing <htmel title="definition term">dt</htmel>/<htmel title="definition description">dd</htmel></li>
          </ul>
        </ul>
        <listing src="lists.html" line="7-26" title="HTML List Types"/>
      </slide>
      <slide>
        <title>Tables</title>
        <ul>
          <li>Tables are the most complex visual structure in HTML</li>
          <ul>
            <li><htmel href="http://www.w3.org/TR/REC-html40/struct/tables.html#h-11.2.1">table</htmel> represents a table as a sequence of rows</li>
            <li><htmel href="http://www.w3.org/TR/REC-html40/struct/tables.html#h-11.2.5">tr</htmel> represents a <em>table row</em> as a sequence of cells</li>
            <li><htmel href="http://www.w3.org/TR/REC-html40/struct/tables.html#h-11.2.6">td</htmel> represents a table cell containing <em>table data</em></li>
            <li><htmel href="http://www.w3.org/TR/REC-html40/struct/tables.html#h-11.2.6">th</htmel> is a special cell containing <em>header data</em></li>
          </ul>
        </ul>
        <listing src="tables.html" line="10-23" title="HTML Table with Rows, Cells, and Header Cells"/>
      </slide>
      <slide>
        <title>Merging Table Cells</title>
        <img src="mergedcells.gif" style="width : 90% ; margin : 2em ; " href="http://www.w3.org/TR/REC-html40/struct/tables.html#h-11.1" title="HTML Table with Merged Cells"/>
      </slide>
      <slide>
        <title>Merging Rows</title>
        <ul>
          <li>Table cells can span more than table row</li>
          <ul>
            <li><htmla>rowspan</htmla> specifies how many rows a cell is spanning</li>
            <li>subsequent table rows must leave that space <q>empty</q></li>
          </ul>
        </ul>
        <listing src="tables.html" line="25-37" title="Merging HTML Table Rows"/>
      </slide>
      <slide>
        <title>Merging Columns</title>
        <ul>
          <li>Table cells can span more than table column</li>
          <ul>
            <li><htmla>colspan</htmla> specifies how many columns a cell is spanning</li>
            <li>following cells in the same row must be left <q>empty</q></li>
          </ul>
        </ul>
        <listing src="tables.html" line="39-53" title="Merging HTML Table Columns"/>
      </slide>
      <slide id="image">
        <title>Images</title>
        <ul>
          <li>The Web is an open hypermedia system</li>
          <ul>
            <li><em>hyper</em> refers to the term <q>hypertext</q> for linked content</li>
            <li><em>media</em> refers to the fact that multiple media types are supported</li>
          </ul>
          <li>For a long time, the Web only supported text and images</li>
          <ul>
            <li>images can be used in a variety of formats (GIF, JPEG, PNG)</li>
            <li>audio and video are possible today, but not <q>part of the Web</q></li>
          </ul>
          <li>Images are not part of a Web page, they are included by markup</li>
          <ul>
            <li><htmel href="http://www.w3.org/TR/REC-html40/struct/objects.html#h-13.2">img</htmel> is an empty element for including images</li>
            <li><htmla>src</htmla> is a URI pointing to the image (often a relative URI)</li>
          </ul>
        </ul>
        <pre>&lt;img src="../img/portrait.png" alt="Portrait"></pre>
      </slide>
      <slide>
        <title>Image Details</title>
        <ul>
          <li>Images must use a format supported by the browser</li>
          <ul>
            <li>GIF, JPEG, and PNG are pretty safe choices</li>
            <li>HTTP allows the browser to understand the image format</li>
            <li>limited browsers might have size/complexity restrictions</li>
          </ul>
          <li>Image information increases accessibility of a page</li>
          <ul>
            <li><htmla>alt</htmla> contains a short description of the image</li>
            <li>for icons it is essential to provide this information</li>
          </ul>
          <li>Image dimensions and image rendering</li>
          <ul>
            <li><htmla>width</htmla>/<htmla>height</htmla> specify the dimensions of the image</li>
            <li>allows the browser to start rendering the page before the images are received</li>
            <li>will be used to resize the image if the real image size is different</li>
            <li>browser-based scaling of images <a href="http://offog.org/articles/image-scaling/">often is not a good idea</a></li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Links</title>
        <ul>
          <li>Links are the most important feature of the Web</li>
          <ul>
            <li>conceptually, the Web is one large hypermedia document</li>
            <li>links are based on Web identifiers, the <em>Uniform Resource Identifier (URI)</em></li>
          </ul>
          <li><htmel>a</htmel> is a link <em>anchor</em> and links to a URI (the <em>link target</em>)</li>
          <pre>&lt;a href="http://www.berkeley.edu" title="UC Berkeley">UCB&lt;/a></pre>
          <li>URIs can have various forms</li>
          <ul>
            <li><code>http:</code> points to resources available on Web servers</li>
            <li><code>https:</code> is the same but uses encrypted connections</li>
            <li>URIs can use a variety of other <link href="uri-schemes"/></li>
            <li>URIs can be relative (in the same was as file names)</li>
            <li>relative URIs are evaluated relative to the URI of their occurrence</li>
            <li>relative URIs can use path segments such as <q><code>/</code></q> and <q><code>..</code></q></li>
          </ul>
        </ul>
      </slide>
    </part>
    <part>
      <title>Conclusions</title>
      <slide>
        <title>HTML Matters</title>
        <ul>
          <li>HTML is not just getting text displayed</li>
          <li>Good HTML allows better browsing</li>
          <li>First represent as much as possible in HTML</li>
          <li>Then add what is missing as <link href="css">CSS</link> and/or microformats</li>
          <li>Graceful degradation is important</li>
        </ul>
      </slide>
    </part>
  </presentation>

<!-- END 05 HyperText Markup Language (HTML) -->



<!-- BEGIN 06 Cascading Style Sheets (CSS) -->

  <presentation id="css">
    <title short="CSS">Cascading Style Sheets (CSS)</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://www.w3.org/MarkUp/Guide/Style">Adding a Touch of Style</a>&#160;· <a href="http://proquest.safaribooksonline.com/059610197X/285">Getting started with CSS</a></toc>
    <toc class="resources"><a href="http://www.w3.org/TR/CSS21/" title="W3C CSS 2.1 Specification">CSS Spec</a>&#160;· <a href="http://www.w3.org/TR/CSS21/propidx.html" title="W3C CSS 2.1: Property Index">Properties</a>&#160;· <a href="http://www.w3schools.com/css">CSS&#160;Tutorial</a>&#160;· <a href="http://jigsaw.w3.org/css-validator/">CSS&#160;Validator</a></toc>
    <toc class="abstract"><em>Cascading Stylesheets (CSS)</em> have been designed as a language for better separating presentation-specific issues from the structuring of documents as provided by HTML. CSS uses a simple model of <em>selectors</em> and <em>declarations</em>. Selectors specify to which elements of a document a set of declarations (each being a value assigned to a property) apply; in addition there is a model of how property values are inherited and cascaded. The biggest limitation of CSS is that it cannot change the structure of the displayed document.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <part>
      <title>Why CSS?</title>
      <slide>
        <title>Structure vs. Layout</title>
        <ul>
          <li>HTML started as very simple layout-oriented structures</li>
          <ul>
            <li>more layout control was introduced as attributes (<xml>align</xml>, <xml>color</xml>)</li>
            <li>HTML became increasingly <q>polluted</q> by layout information</li>
          </ul>
          <li>CSS was introduced as a format for layout information</li>
          <ul>
            <li>the HTML can be kept simple, containing only the structures</li>
            <li>layout information can be reused by using separate CSS files</li>
          </ul>
          <li>CSS has been designed for HTML</li>
          <ul>
            <li>it has been generalized to also cover XML</li>
            <li>the HTML heritage is still very visible in CSS</li>
          </ul>
        </ul>
      </slide>
    </part>
    <part>
      <title>How CSS Works</title>
      <slide>
        <title>CSS in Action</title>
        <listing src="zengarden.html" line="17-30" href="http://www.csszengarden.com/"/>
      </slide>
      <slide>
        <title>HTML and CSS</title>
        <ul>
          <li>CSS specifies how HTML elements are formatted</li>
          <ol>
            <li>formatting can be attached to every element (redundant inside document)</li>
            <li>formatting can be included in document (redundant across documents)</li>
            <li>separate CSS files describe the formatting (best reuse)</li>
          </ol>
          <li>Any combination of these methods is possible</li>
        </ul>
        <listing src="css-usage.html" line="3-13"/>
      </slide>
      <slide>
        <title>Formatting Model</title>
        <ul>
          <li><link href="css-properties"/> are central to the CSS formatting model</li>
          <ol>
            <li>create a document tree</li>
            <li>identify the media type (e.g., <css>screen</css> or <css>print</css>)</li>
            <li>retrieve all stylesheets required for the media type</li>
            <li>assign values to all properties in the document tree</li>
            <li>generate a <em>formatting structure</em> (a different tree)</li>
            <li>render the formatting structure on the target medium</li>
          </ol>
          <li>Properties control the rendering of elements</li>
          <li>Styling in CSS means assigning values to properties</li>
        </ul>
      </slide>
    </part>
    <part id="css-strategies">
      <title>CSS Strategies</title>
      <slide id="css-classes">
        <title>Use Classes &amp; Containers</title>
        <ul>
          <li>CSS code should never show up in your HTML</li>
          <li>Classes should reflect content or formatting</li>
          <li>Containers (elements) can restrict styles to a context</li>
          <li>Context can be nested</li>
          <ul>
            <li>orthogonal concepts should be represented as nested classes</li>
            <li>for example, pages for <q>staff</q> and <q>faculty</q> and <q>current</q> and <q>past</q> as classification</li>
            <li>different levels of formatting sophistication can be implemented with CSS only</li>
          </ul>
          <li>Avoid redundant CSS code</li>
          <ul>
            <li>Whenever appropriate, <css>inherit</css> properties</li>
            <li>for invisible links use <css>a { color : inherit ; }</css></li>
          </ul>
        </ul>
      </slide>
    </part>
    <part id="css-properties">
      <title>Properties</title>
      <slide>
        <title>Formatting Instructions</title>
        <ul>
          <li>Properties define how elements are formatted</li>
          <ul>
            <li>they define a specific facet of formatting</li>
            <li>they may have interdependencies with other properties</li>
            <li>they can be assigned explicitly</li>
            <li>they may be defined through <link href="css-cascading"/> or <link href="css-inheritance"/></li>
          </ul>
          <li>A property has a name and is used in a name/value-pair</li>
          <ul>
            <li>the name identifies the property that is being set</li>
            <li>the value space depends on the property</li>
            <li>some properties accept complex values</li>
            <li>sets of values: <css>p { font : bold italic large Palatino }</css></li>
            <li>sequences of values: <css>p { font-family : "Segoe UI", verdana, helvetica, arial, sans-serif }</css></li>
          </ul>
          <li>Property specifications can be grouped</li>
          <ul>
            <li><css>.thinboxed { border-width : 1px ; padding : 10px ; margin : 5px }</css></li>
          </ul>
        </ul>
      </slide>
      <part>
        <title>CSS1 Properties</title>
        <slide>
          <title>Factoring out HTML</title>
          <ul>
            <li>CSS1 was published in <a href="http://www.w3.org/TR/REC-CSS1-961217">1996</a> and revised in <a href="http://www.w3.org/TR/1999/REC-CSS1-19990111">1999</a></li>
            <li>HTML suffered from too many attributes</li>
            <ul>
              <li>layout information was specified as CSS</li>
              <li>style attributes in HTML were marked as <q>deprecated</q></li>
            </ul>
            <li>A small set of formatting features as CSS properties</li>
            <ul>
              <li><a href="http://www.w3.org/TR/REC-CSS1/#font-properties">font</a>: <css>p { font : 80% sans-serif }</css></li>
              <li><a href="http://www.w3.org/TR/REC-CSS1/#color-and-background-properties">color and background</a>: <css>body { background : url(logo.jpeg) right top }</css></li>
              <li><a href="http://www.w3.org/TR/REC-CSS1/#text-properties">text</a>: <css>h1 { text-transform : uppercase }</css></li>
              <li><a href="http://www.w3.org/TR/REC-CSS1/#box-properties">box</a>: <css>p.quote { border-style : solid dotted }</css></li>
              <li><a href="http://www.w3.org/TR/REC-CSS1/#classification-properties">classification</a>: <css>img { display : none }</css></li>
            </ul>
          </ul>
        </slide>
      </part>
      <part>
        <title>CSS2 Properties</title>
        <slide>
          <title>CSS2</title>
          <ul>
            <li>CSS2 was published in <a href="http://www.w3.org/TR/1998/REC-CSS2-19980512/">1998</a> and is <a href="http://www.w3.org/TR/CSS21/">still being  revised (CSS2<sup>1</sup>)</a></li>
            <li>CSS2<sup>1</sup> is what you can expect from modern browsers</li>
            <ul>
              <li>with IE (even IE7) being the exception</li>
            </ul>
            <li>CSS2 is a single and coherent specification</li>
            <ul>
              <li><a href="http://www.w3.org/TR/css3-roadmap/">CSS3</a> is a jungle of concurrent module development</li>
              <li>CSS3 will never be finished (some modules will, though)</li>
            </ul>
          </ul>
        </slide>
        <slide id="generated-content">
          <title>Generated Content</title>
          <ul>
            <li>CSS1 had no way of adding information to the document</li>
            <ul>
              <li>by using <css>display</css>, parts of the document could be ignored</li>
            </ul>
            <li><em href="http://www.w3.org/TR/CSS21/generate.html">Generated content</em> allows content to come from the CSS</li>
            <ul>
              <li>only possible with <css>:before</css> and <css>:after</css> <em>pseudo-elements</em></li>
              <li>static strings: <css>p.abstract:before { content : "Abstract: " }</css></li>
              <li>special effects like <q>quotes</q>: <css>q:before { content : open-quote } </css></li>
              <li>counters: <css>h1:before { content: "Chapter " counter(chapter) ". " ; counter-increment : chapter }</css></li>
            </ul>
            <li>Quotes can be defined as being language dependent</li>
            <ul>
              <li><css>q:lang(en) { quotes : '"' '"' "'" "'" }</css></li>
              <li><css>q:lang(no) { quotes : "«" "»" '"' '"' }</css></li>
            </ul>
          </ul>
        </slide>
        <slide>
          <title>Tables</title>
          <ul>
            <li>CSS1 does not address table formatting</li>
            <ul>
              <li>table layout still had to be done using HTML attributes</li>
              <li>a lot of redundant code specifying cell alignment and borders</li>
            </ul>
            <li>CSS2 introduces tables on the CSS level</li>
          </ul>
          <pre>table    { display: table }
          tr       { display: table-row }
          thead    { display: table-header-group }
          tbody    { display: table-row-group }
          tfoot    { display: table-footer-group }
          col      { display: table-column }
          colgroup { display: table-column-group }
          td, th   { display: table-cell }
          caption  { display: table-caption }</pre>
        </slide>
        <slide>
          <title>Fixed vs. Automatic Table Layout</title>
          <ul>
            <li>HTML defines a complex table rendering algorithm</li>
            <ul>
              <li>tables are rendered incrementally</li>
              <li>table layout is determined by looking at the complete table</li>
            </ul>
          </ul>
          <table width="90%" cellspacing="10%">
            <thead>
              <tr>
                <th>Automatic</th>
                <th>Fixed</th>
              </tr>
            </thead>
            <tr>
              <td width="45%">
                <table border="1">
                  <tr>
                    <td>col 1 row 1</td>
                    <td>col 2 row 1 col 2 row 1</td>
                    <td>col 3 row 1 col 3 row 1 col 3 row 1</td>
                  </tr>
                  <tr>
                    <td>col 1 row 2</td>
                    <td>col 2 row 2 col 2 row 2</td>
                    <td>col 3 row 2 col 3 row 2 col 3 row 2</td>
                  </tr>
                </table>
              </td>
              <td width="45%">
                <table border="1" style="table-layout : fixed ; ">
                  <tr>
                    <td width="33%">col 1 row 1</td>
                    <td width="33%">col 2 row 1 col 2 row 1</td>
                    <td width="33%">col 3 row 1 col 3 row 1 col 3 row 1</td>
                  </tr>
                  <tr>
                    <td>col 1 row 2</td>
                    <td>col 2 row 2 col 2 row 2</td>
                    <td>col 3 row 2 col 3 row 2 col 3 row 2</td>
                  </tr>
                </table>
              </td>
            </tr>
          </table>
        </slide>
      </part>
    </part>
    <part id="css-selectors">
      <title>Selectors</title>
      <slide>
        <title>Select and Style</title>
        <ul>
          <li><link href="css-properties"/> are applied to elements</li>
          <ul>
            <li>properties can be directly applied in an element's <htmla>style</htmla> attribute</li>
            <li>in all other cases, <em>selectors</em> are used to select the styled elements</li>
          </ul>
          <li>Selectors are good for reusable CSS code</li>
          <ul>
            <li>identifying the most appropriate formatting classes is not easy</li>
            <li>planning for CSS for a larger site is a difficult task</li>
          </ul>
          <li>CSS project management should separate selectors and properties</li>
          <ol>
            <li>selectors are about which things should be identified and styled</li>
            <li>properties are about how this styling is implemented</li>
          </ol>
        </ul>
      </slide>
      <part id="css1-selectors">
        <title>CSS1 Selectors</title>
        <slide>
          <title>CSS for Dummies</title>
          <ul>
            <li>Very small set of selectors</li>
            <ul>
              <li>selecting elements by name: <css>h1 { font-size : large }</css></li>
              <li>selecting elements by their <xml>id</xml>: <css>#author { font-weight : bold }</css></li>
              <li>selecting elements by their <xml>class</xml>: <css>.abstract { font-size : small }</css></li>
              <li>combining these mechanisms: <css>p.warning { color : red } </css></li>
            </ul>
            <li>Pseudo-classes and -elements allow interesting effects</li>
            <ul>
              <li><htmel>a</htmel> links have state: <css>a:visited</css> and <css>a:active</css></li>
              <li>selection without markup: <css>p:first-letter</css> and <css>p:first-line</css></li>
            </ul>
          </ul>
        </slide>
      </part>
      <part>
        <title>CSS2 Selectors</title>
        <slide>
          <title>More Selectors</title>
          <ul>
            <li><link href="css1-selectors"/> are available</li>
            <ul>
              <li>element name, <htmla>id</htmla>, <htmla>class</htmla>, and combinations of these</li>
            </ul>
            <li>CSS2 introduced many new selectors</li>
            <ul>
              <li>descendants: <css>ul li { font : italic }</css></li>
              <li>children: <css>ul > li { font : italic }</css></li>
              <li>adjacent siblings: <css>h1 + h2 { margin-top : 0.5em }</css></li>
              <li>attribute matching: <css>h1[lang=nl] { color : orange }</css></li>
            </ul>
            <li>CSS2 selectors are sufficient for most tasks</li>
            <li>Setting <htmla>class</htmla> attributes is very important</li>
          </ul>
        </slide>
        <slide>
          <title>CSS2 Pseudo Classes</title>
          <ul>
            <li><link href="css1-selectors">CSS1's pseudo-elements</link> are available</li>
            <ul>
              <li>link states and first letter and line of content</li>
            </ul>
            <li>CSS2 adds more qualifications for elements</li>
            <ul>
              <li>first child: <css>p:first-child { text-indent : 0 }</css></li>
              <li>dynamic behavior: <css>a:hover { … } a:active { … } a:focus { … }</css></li>
              <li>language: <css>:lang(de) { quotes: '»' '«' '‹' '›' }</css></li>
              <li><link href="generated-content"/>: <css>q:before { content : open-quote } q:after { content : close-quote }</css></li>
            </ul>
          </ul>
        </slide>
      </part>
    </part>
    <part>
      <title>CSS Mechanics</title>
      <slide id="css-cascading">
        <title>Cascading</title>
        <ul>
          <li>Stylesheets may have three different origins</li>
          <ol>
            <li><em>page authors</em> associate CSS with their pages</li>
            <li><em>users</em> configure their browser to use some CSS</li>
            <li><em>user agents (browsers)</em> have built-in CSS how to style content</li>
          </ol>
          <li>Conflicts must be resolved using the following algorithm</li>
          <ol>
            <li>find all matching declarations (matching media type and selector)</li>
            <li>sort according to importance (browser &lt; user &lt; author)</li>
            <li>same importance must be sorted by specificity (more specific selectors)</li>
            <li>finally, sort by order in which they were specified</li>
          </ol>
          <li><css>!important</css> rules can influence the algorithm</li>
          <ul>
            <li>they are interpreted in step 2 (sorting by importance)</li>
            <li>browser &lt; user &lt; author &lt; author(important) &lt; user(important)</li>
          </ul>
        </ul>
      </slide>
      <slide id="css-inheritance">
        <title>Inheritance</title>
        <ul>
          <li>Properties often are inherited by children</li>
          <ul>
            <li>setting a table's <css>color</css> sets the <css>color</css> for all contents</li>
            <li>without inheritance, CSS stylesheets would have to be very large</li>
          </ul>
          <li>Inheritance is mostly intuitive</li>
          <ul>
            <li>in reality, it is a bit more complicated</li>
          </ul>
          <ol>
            <li><em>specified value:</em> what the property specified (<link href="css-cascading"/>, inheritance, or initial)</li>
            <li><em>computed value:</em> computed based on the environment (e.g., <css>ex</css> → <css>px</css>)</li>
            <li><em>used value:</em> converted to an absolute value (e.g., percentage widths)</li>
            <li><em>actual value:</em> specific for the environment (e.g., borders with pixel fractions)</li>
          </ol>
        </ul>
      </slide>
      <slide id="css-import">
        <title>Structuring Stylesheets</title>
        <ul>
          <li>Stylesheets may need to be structured</li>
          <ul>
            <li>importing CSS code is supported: <css>@import "/dretnet.css" ;</css></li>
            <li>modules of CSS code can be reused in different contexts</li>
          </ul>
          <li>Stylesheets may be specific for a media type</li>
          <ul>
            <li><em>braille, embossed, handheld, print, projection, screen, speech, tty, tv</em></li>
            <li>specified in HTML: <htmel>link rel="stylesheet" type="text/css" media="print" href="/print.css"</htmel></li>
            <li>specified in CSS: <css>@media print { … }</css></li>
            <li>media-dependent import: <css>@import "/print.css" print ;</css></li>
          </ul>
        </ul>
      </slide>
    </part>
    <slide>
      <title>CSS Conclusions</title>
      <ul>
        <li>Appropriate for HTML</li>
        <ul>
          <li>Flexible selection of elements using <link href="css-selectors"/></li>
          <li>Powerful formatting of elements using <link href="css-properties"/></li>
          <li>Interesting interface design with <em>pseudo-classes</em> and <em>-elements</em></li>
        </ul>
        <li>Inappropriate for general publishing</li>
        <ul>
          <li>documents often need to be restructured</li>
          <li>XML → HTML+CSS is a popular Web publishing setup</li>
        </ul>
      </ul>
    </slide>
  </presentation>

<!-- END 06 Cascading Style Sheets (CSS) -->



<!-- BEGIN 07 Web Browsers -->

  <presentation id="browsers">
    <title short="Browsers">Web Browsers</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://en.wikipedia.org/wiki/Web_Browser" title="Wikipedia: Web Browser">Wikipedia</a>&#160;· <a href="http://en.wikipedia.org/wiki/History_of_the_web_browser" title="Wikipedia: History of the Web Browser">History</a></toc>
    <toc class="resources"><a href="http://www.mozilla.com/firefox/">Firefox</a>&#160;· <a href="http://www.apple.com/safari/">Safari</a>&#160;· <a href="http://www.microsoft.com/windows/products/winfamily/ie/default.mspx">IE</a>&#160;· <a href="http://www.google.com/chrome">Chrome</a>&#160;· <a href="http://www.opera.com/">Opera</a></toc>
    <toc class="abstract">This lecture looks at <em>Web browsers</em> and how they work. It introduces the basic functionalities of a browser; retrieval and rendering of Web pages. Any modern browser needs to support more than just HTTP and HTML; it must support CSS for stylesheets, JavaScript for scripted Web pages, various image formats, and popular applications such as Flash. In addition, browsers can support additional functionality such as off-line operation, or in general more application-oriented features such as <em>AIR</em> or <em>Silverlight</em>.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <part>
      <title>Browser Basics</title>
      <slide>
        <title>What is a Web Browser?</title>
        <ul>
          <li>Network access (HTTP, HTTPS, FTP, file system, …)</li>
          <li>Rendering HTML layout (a subset of CSS layout)</li>
          <ul>
            <li>CSS specifies many more features</li>
          </ul>
          <li>Handling special HTML in the required way</li>
          <ul>
            <li>images (in various formats) must be downloaded and embedded</li>
            <li>forms must be rendered and form data must be submitted</li>
          </ul>
          <li>Running scripts and providing them access to the page</li>
          <ul>
            <li>re-rendering when scripts change the page (DHTML)</li>
            <li>providing scripts with network access (Ajax)</li>
          </ul>
          <li>Utility functions to make the browser more usable</li>
          <ul>
            <li>tabs and bookmarks for more organized browsing</li>
            <li>security policies for safer browsing</li>
            <li>additional content types may be supported (by external software)</li>
            <li>the browser may be extended (add-ons)</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>One Minute in the Life of a Browser</title>
        <ol>
          <li>Analyze URI and connect to server to retrieve resource</li>
          <ul>
            <li>recursively repeat until all required resources are retrieved</li>
          </ul>
          <li>Analyze HTML, correct errors, and compute a <em>DOM tree</em></li>
          <ul>
            <li>DOM is a memory representation of the HTML markup</li>
          </ul>
          <li>Apply CSS and compute the layout of the styled DOM tree</li>
          <ul>
            <li>compute CSS decorated DOM and apply formatting algorithm to it</li>
          </ul>
          <li>Start executing <link href="scripting"/> code and change the DOM as required</li>
          <ul>
            <li>scripting may have initial phase and user interaction phase</li>
          </ul>
          <li>Continue executing scripting code in response to user interactions</li>
          <ul>
            <li>for many dynamic Web pages, this is a continuous activity</li>
          </ul>
          <li>If the user clicks on a link, start all over again</li>
        </ol>
      </slide>
      <slide>
        <title>Browser Usage</title>
        <img src="browser-usage-2011.png" style="float : right ; width : 40% ; margin : 0 1em 2em 2em ; " href="http://en.wikipedia.org/wiki/Usage_share_of_web_browsers" title="Browser Usage"/>
        <p><span style="border:none;background-color:#0000ff;color:#0000ff;" class="aide" title="#0000ff">██</span>&#160;Internet Explorer (46.0%)</p>
	<p><span style="border:none;background-color:#ffff00;color:#ffff00;" class="aide" title="#ffff00">██</span>&#160;Mozilla Firefox (30.7%)</p>
        <p><span style="border:none;background-color:#cccccc;color:#cccccc;" class="aide" title="#cccccc">██</span>&#160;Safari (5.9%)</p>
	<p><span style="border:none;background-color:#00ff00ff;color:#00ff00ff;" class="aide" title="#00ff00ff">██</span>&#160;Chrome (14.2%)</p>
        <p><span style="border:none;background-color:#ff0000;color:#ff0000;" class="aide" title="#ff0000">██</span>&#160;Opera (2.0%)</p> 
        <p><span style="border:none;background-color:#00ffff;color:#00ffff;" class="aide" title="#00ffff">██</span>&#160;Mobile (4.0%)</p>
      </slide>
      <slide>
        <title>Browsers and CSS</title>
        <ul>
          <li>Browsers have their own <em>built-in CSS code</em></li>
          <ul>
            <li>HTML pages with no CSS are still formatted in some way</li>
            <li>HTML pages can provide their own CSS to change defaults</li>
            <li>users can change the browser's default to their own preferences</li>
          </ul>
          <li>CSS has a <a href="http://www.w3.org/TR/CSS21/cascade.html#cascading-order">well-defined way of how stylesheets are combined</a></li>
          <ol>
            <li>browser defaults</li>
            <li>user declarations</li>
            <li>page declarations</li>
            <li>page <css href="http://www.w3.org/TR/CSS21/cascade.html#important-rules">important</css> declarations</li>
            <li>user <css href="http://www.w3.org/TR/CSS21/cascade.html#important-rules">important</css> declarations</li>
          </ol>
          <li>Rendering of HTML/CSS depend on a variety of factors</li>
          <ul>
            <li>default settings of the browser</li>
            <li>preferences set by the user</li>
            <li>CSS code provided by the page author</li>
            <li>HTML/CSS capabilities of the browser</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Browsers and the Internet</title>
        <p>Before retrieving the Web page <uri href="http://www.berkeley.edu/">http://www.berkeley.edu/</uri>, the browser first has to find out the <link href="ip">IP </link>address of the <code>www.berkeley.edu</code> server. Using this address, it can then open an <link href="http">HTTP</link> connection. The lookup service used by the browser is the <link href="dns"/>.</p>
        <img style="width : 90% ; margin : 2% ; " src="browser-dns-http.png"/>
      </slide>
      <slide>
        <title>Supported URI Schemes</title>
        <ul>
          <li>Most Web pages are available over <link href="http">HTTP</link></li>
          <ul>
            <li>one popular exception are pages available over HTTPS</li>
          </ul>
          <li>Most browsers support more than just the HTTP and HTTP <link href="uri-schemes"/></li>
          <ul>
            <li><uri>http:</uri> and <uri>https:</uri> are necessary (these are the Web protocols)</li>
            <li><uri href="http://en.wikipedia.org/wiki/File_URI_scheme">file:</uri> allows the browser to load local files</li>
            <li><uri>ftp:</uri> is useful because many documents are available on FTP servers</li>
            <li><uri>mailto:</uri> usually is not built into the browser (the mail tool is started)</li>
            <li><uri>tel:</uri> is a useful scheme for devices with telephone functionality</li>
          </ul>
          <li>Firefox 3 allows to <a href="https://developer.mozilla.org/en/Web-based_protocol_handlers">register protocol handlers</a></li>
        </ul>
      </slide>
      <slide>
        <title>Caching</title>
        <ul>
          <li>Browsers retrieve resources for rendering Web pages</li>
          <li>In a typical user session, many resources are used repeatedly</li>
          <ul>
            <li>using the browser's <q>back</q> button</li>
            <li>accessing pages reusing the same CSS or images</li>
          </ul>
          <li><em>Caching</em> is a frequently used optimization in computer systems</li>
          <ol>
            <li>store retrieved data locally</li>
            <li>reuse that data when it is used again instead of fetching it again</li>
            <li>the hard (and important) part is <em>cache invalidation</em></li>
          </ol>
          <li><em href="http://en.wikipedia.org/wiki/Link_prefetching">Prefetching</em> allows browsers to load pages in advance</li>
          <ul>
            <li>predicting user behavior usually is hard or impossible</li>
            <li>unnecessary prefetching generates unnecessary load on servers and the network</li>
            <li>faster networks make load delays less painful</li>
            <pre>&lt;link rel="prefetch" href="http://www.example.com/"></pre>
          </ul>
          <li><a href="http://en.wikipedia.org/wiki/Google_Web_Accelerator">Google Web Accelerator</a> was a Google-specific approach</li>
          <ul>
            <li>using prefetching and compression (connecting to a Google cache)</li>
            <li>serious privacy implications (<em>all</em> traffic is routed through Google)</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Security and Privacy</title>
        <ul>
          <li>Browsers store a lot of security-sensitive data</li>
          <ul>
            <li>data entered in forms is stored for future visits</li>
            <li>authentication credentials (<link href="cookies">cookies</link>) are stored on behalf of servers</li>
            <li>the browsing history of visited pages is stored</li>
          </ul>
          <li>Connecting to HTTPS Web sites requires a certificate validity check</li>
          <ul>
            <li>browsers come with a large set of pre-installed <em>certification authorities</em></li>
            <li>users implicitly trust this list of pre-installed authorities</li>
          </ul>
          <li>Browsers provide control over these features in complicated settings</li>
          <li>Browsers start providing more user-friendly <q>private modes</q></li>
          <ul>
            <li>Safari calls the feature <em>private browsing</em></li>
            <li>IE8 has an <a href="http://www.microsoft.com/windows/internet-explorer/beta/features/browse-privately.aspx">InPrivate</a> mode</li>
            <li>Firefox 3.1 includes such a feature as <em>Private Browsing</em></li>
          </ul>
          <li>Security/Privacy (as always) is a trade-off with convenience</li>
        </ul>
      </slide>
      <slide>
        <title>Browsers and Scripting</title>
        <ul>
          <li><link href="scripting"/> is essential for most modern Web pages</li>
          <ul>
            <li>well-designed Web pages also work when scripting is turned off</li>
            <li>many Web pages are not designed all that well</li>
            <li>when scripting is turned on, behavior should be predictable and consistent</li>
          </ul>
          <li>Scripting problems plagued Web developers for a long time</li>
          <ul>
            <li>major parts of Web development go into ensuring compatibility</li>
            <li>ill-behaving browsers (such as IE) make it impossible to develop simple code</li>
            <li><link href="js-frameworks"/> provide <q>compatibility layers</q> on top of browsers</li>
          </ul>
          <li>Browsers can morph into <q>runtime environments</q></li>
          <ul>
            <li>using <a href="http://docs.google.com/">Google Docs</a> has little to do with Web browsing</li>
            <li>some essential features are missing (offline capabilities, local storage)</li>
            <li><link href="chrome"/> is Google's attempt to morph the Web into an application platform</li>
          </ul>
        </ul>
      </slide>
    </part>
    <part>
      <title>Content Type Handling</title>
      <slide>
        <title>Content Types</title>
        <ul>
          <li>Browsers retrieve resources and render them</li>
          <ol>
            <li>URI identifies a resource to be retrieved</li>
            <li>HTTP request is sent to the server requesting the resource</li>
            <li>HTTP response is received containing and describing the resource</li>
            <li>the <link href="media-types">media type</link> determines how the browser handles the resource</li>
          </ol>
          <li>Browsers can handle resource in four different ways</li>
          <ol>
            <li><link href="built-in"/> allows the browser to handle the resource by itself</li>
            <li><link href="add-on"/> extend the browser with additional capabilities</li>
            <li><link href="plug-in"/> are platform-specific extensions</li>
            <li><link href="external-viewer"/> are programs to which the browser passes the resource</li>
            <li>for unknown media types most browsers prompt users to save them locally</li>
          </ol>
        </ul>
      </slide>
      <part id="built-in">
        <title>Built-In Support</title>
        <slide>
          <title>Built into the Browser</title>
          <ul>
            <li>The Web is built on few universal media types</li>
            <li>Variety on the Web is achieved through two major factors:</li>
            <ol>
              <li>the established media types are not application-specific</li>
              <li>advanced content can be based on <em>browser-based runtime environments</em></li>
            </ol>
            <li>Examples of built-in media types:</li>
            <ul>
              <li>HTML+CSS for rendering formatted Web pages</li>
              <li>popular <link href="web-images"/> (GIF, JPEG, PNG, ICO)</li>
            </ul>
          </ul>
        </slide>
        <slide>
          <title>Advantages/Disadvantages</title>
          <ul>
            <li>Advantages of built-in media types:</li>
            <ul>
              <li>fast and seamless rendering</li>
              <li>should be supported by any browser (safe choice for developers)</li>
            </ul>
            <li>Disadvantages of built-in media types:</li>
            <ul>
              <li>cannot be added by users (not extensible)</li>
              <li>browser must be upgraded to add new types</li>
            </ul>
          </ul>
        </slide>
      </part>
      <part id="add-on">
        <title>Add-Ons</title>
        <slide>
          <title>Browser-Specific Additions</title>
          <ul>
            <li>Supported by the browser itself (built into the browser framework)</li>
            <li>Usually support <em>additional functionality</em> and not new media types</li>
            <li>Add-ons are productivity enhancements for users</li>
            <li>Examples of add-ons:</li>
            <ul>
              <li><a href="https://addons.mozilla.org/en-US/firefox/addon/5203">Minimap Sidebar</a> for better support for geolocation data</li>
              <li><a href="https://addons.mozilla.org/en-US/firefox/addon/4106">Operator</a> for visualizing a Web page's metadata</li>
            </ul>
          </ul>
        </slide>
        <slide>
          <title>Advantages/Disadvantages</title>
          <ul>
            <li>Advantages of add-ons:</li>
            <ul>
              <li>only browser-dependent (i.e., not OS dependent)</li>
              <li>can be installed individually and specific for users</li>
              <li>allow browser specific behavior (e.g., <link href="firebug"/> for Firefox debugging)</li>
            </ul>
            <li>Disadvantages of add-ons:</li>
            <ul>
              <li>cannot be used across browsers</li>
              <li>conflicts between add-ons can lead to instabilities</li>
              <li>Web applications cannot count on them being available (e.g., <a href="http://gears.google.com/">Google Gears</a> and <link href="chrome"/>)</li>
            </ul>
          </ul>
        </slide>
      </part>
      <part id="plug-in">
        <title>Plug-Ins</title>
        <slide>
          <title>Platform Code in the Browser</title>
          <ul>
            <li>Platform-specific code running inside the browser</li>
            <ul>
              <li>window created by an <htmel>object</htmel> with given window dimensions</li>
              <li>the window displays whatever the plug-in code generates as display</li>
            </ul>
            <li>Examples of plug-ins:</li>
            <ul>
              <li><a href="http://get.adobe.com/reader/">Adobe Reader</a> for rendering PDF documents</li>
              <li><a href="http://get.adobe.com/flashplayer/">Adobe Flash Player</a> for running Flash applications</li>
              <li><a href="http://java.com/en/download/help/5000011200.xml">Java Runtime Environment (JRE)</a> for executing Java Applets</li>
            </ul>
          </ul>
        </slide>
        <slide>
          <title>Advantages/Disadvantages</title>
          <ul>
            <li>Advantages of plug-ins:</li>
            <ul>
              <li>high performance (OS-specific code)</li>
              <li>reasonably easy to implement if OS specific code already exists</li>
            </ul>
            <li>Disadvantages of plug-ins:</li>
            <ul>
              <li>hard to implement for a new OS (needs OS-specific code)</li>
              <li>no easy fallback if not supported by a browser</li>
              <li>plug-in internals are <q>invisible</q> to the browser</li>
            </ul>
          </ul>
        </slide>
      </part>
      <part id="external-viewer">
        <title>External Viewers</title>
        <slide>
          <title>Browser and Applications</title>
          <ul>
            <li>Applications often are not integrated with a browser</li>
            <ul>
              <li>designed as standalone applications</li>
              <li>capable of handling certain media types</li>
              <li>registered with the OS and/or with a browser</li>
            </ul>
            <li>External applications can do anything they like with a resource</li>
            <ul>
              <li>the browser downloads the resource to a temporary file</li>
              <li>the external viewer is started and handed the file's location</li>
            </ul>
            <li>Examples of external viewers:</li>
            <ul>
              <li><a href="http://en.wikipedia.org/wiki/Office_suite">Office Suites</a> for handling documents, spreadsheets, and presentations</li>
              <li><a href="http://get.adobe.com/reader/">Adobe Reader</a> for rendering PDF documents</li>
              <li><a href="http://earth.google.com/">Google Earth</a> for handling <em>KML</em> files</li>
            </ul>
          </ul>
        </slide>
        <slide>
          <title>Advantages/Disadvantages</title>
          <ul>
            <li>Advantages of external viewers:</li>
            <ul>
              <li>almost no integration effort with a browser (just registering)</li>
              <li>sophisticated and highly optimized applications</li>
              <li>can be taken offline and used for non-Web activities</li>
            </ul>
            <li>Disadvantages of external viewers:</li>
            <ul>
              <li>high dependency on platform and configuration of a user's browser</li>
              <li>completely breaks the workflow of working with a browser</li>
            </ul>
          </ul>
        </slide>
      </part>
      <part>
        <title>Others</title>
        <slide id="greasemonkey">
          <title>Greasemonkey</title>
          <ul>
            <li>Greasemonkey is an <q><link href="add-on">add-on</link> for add-ons</q></li>
            <li>Runtime environment for <em href="http://userscripts.org/">user scripts</em></li>
            <ul>
              <li>specifically addressing a Web page or a Web site</li>
              <li>locally changing the Web page (in the browser)</li>
              <li>support for changing a Web site's display according to my user needs</li>
            </ul>
            <li>User scripts analyze/extract/update a Web page</li>
            <ul>
              <li>when Web pages are redesigned, user scripts often break</li>
              <li>a fragile way of repurposing the information from a Web site</li>
            </ul>
          </ul>
        </slide>
      </part>
    </part>
    <part>
      <title>Extended Browsers</title>
      <slide id="chrome">
        <title>Chrome</title>
        <img src="chrome-logo.png" style="float : right ; margin : 0 1em 2em 2em ; width : 20% ; " href="http://www.google.com/chrome/" title="Google Chrome"/>
        <ul>
          <li>Google's goal is to move more information online</li>
          <li>Today's browsers lack good offline support</li>
          <ul>
            <li><a href="http://gears.google.com/">Google Gears</a> <link href="add-on">add-on</link> adds offline capabilities for Firefox</li>
          </ul>
          <li><a href="http://www.google.com/chrome/">Chrome</a> is built around Google's strategic goals</li>
          <ul>
            <li>robust and high quality rendering based on <a href="http://webkit.org/">WebKit</a></li>
            <li>efficient and fast execution of scripting code with <a href="http://code.google.com/p/v8/">V8</a></li>
            <li>includes Google Gears for offline mode</li>
            <li>minimal user interface to look more like an application</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Accessibility Browsers</title>
        <ul>
          <li>Browsers for blind users depend on well-designed Web pages</li>
          <ul>
            <li>some browsers read aloud the textual information on a page</li>
            <li>Braille readers are an alternative to read-aloud browsers</li>
          </ul>
          <li>Only well-designed Web content is accessible to these browsers</li>
          <ul>
            <li>HTML and CSS content can be analyzed in the browser</li>
            <li><link href="plug-in"/> content (such as Flash) cannot be handled at all</li>
            <li><link href="external-viewer"/> may have their own accessibility features</li>
          </ul>
          <li>Usability should play an important role in Web design</li>
          <ul>
            <li><a href="http://www.section508.gov/">Section 508</a> requires public information to be made accessible</li>
          </ul>
        </ul>
      </slide>
    </part>
    <slide>
      <title>Conclusions</title>
      <ul>
        <li>Browsers are more than just <q>HTML viewers</q></li>
        <li>Users can customize their browsing experience</li>
        <li>Information providers should be aware of browser issues</li>
      </ul>
    </slide>
  </presentation>

<!-- END 07 Web Browsers -->



<!-- BEGIN 08 Internet Architecture -->

  <presentation id="internet">
    <title short="Internet">Internet Architecture</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://xrds.acm.org/article.cfm?aid=197182" title="ACM Crossroads: An Overview of the TCP/IP Protocol Suite">TCP/IP</a></toc>
    <toc class="resources"><a href="http://en.wikipedia.org/wiki/Category:Internet_architecture" title="Wikipedia: Internet Architecture">Internet Architecture</a>&#160;· <a href="http://www.garykessler.net/library/tcpip.html" title="An Overview of TCP/IP Protocols and the Internet">TCP/IP Overview</a>&#160;· <a href="http://www.zakon.org/robert/internet/timeline/" title="Hobbes' Internet Timeline">Timeline</a></toc>
    <toc class="abstract">The Internet is the technical infrastructure on top of which the Web is built. Some of the services provided by the Internet are essential for the Web, most importantly the naming service and the data transfer service. The <em>Domain Name System (DNS)</em> provides the human-readable names for computers, which can then be used in the addresses of Web servers and ultimately Web pages. The <em>Transmission Control Protocol (TCP)</em> provides the reliable data transfer service between Web Servers and Web Browsers, building on the very robust <em>Internet Protocol (IP)</em>.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <part id="networks">
      <title>Computer Networks</title>
      <slide>
        <title>Network History</title>
        <ul>
          <li>First regarded as a convenient workaround for floppy disks</li>
          <ul>
            <li><q>real computer scientists write compilers</q></li>
            <li>the value of computer networks depends on their size</li>
          </ul>
          <li>Early networking solutions were vendor-specific islands</li>
          <ul>
            <li>DECnet for <em>Digital Equipment Corporation (DEC)</em> customers</li>
            <li>XNS for <em>Xerox</em> customers</li>
            <li>SNA for <em>IBM</em> customers</li>
            <li>transmitting data between these networks was very cumbersome</li>
          </ul>
          <li>Bridging networks transparently became increasingly important</li>
          <ul>
            <li>more computers and networks increase the benefit of interconnections</li>
            <li>layering being used for internetworks, not only for networks</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Networks vs. Internetworks</title>
        <ul>
          <li>Specific networks use specific abstractions</li>
          <ul>
            <li>how to address nodes (computers, phones, PDAs, RFID tags)</li>
            <li>how to address applications on these nodes</li>
            <li>how to transmit data to these applications</li>
          </ul>
          <li>Internetworks provide a network-independent abstraction</li>
          <ul>
            <li>nodes are addressed uniformly (IP addresses)</li>
            <li>applications are identified uniformly (ports)</li>
            <li>data transmission uses one set of protocols (TCP/UDP)</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Internet</title>
        <ul>
          <li>Very early start and a lot of experience</li>
          <ul>
            <li>pragmatic and evolutionary approach</li>
            <li><q>if it's not broken, don't fix it</q></li>
          </ul>
          <li>Standardization by independent technical experts</li>
          <ul>
            <li>avoids the <q>designed by committee</q> effect of consortiums</li>
            <li>conservative and concentrating on stability</li>
            <li>implementations are required to prove technical feasibility</li>
            <li>simplicity whenever possible</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Internet Principles</title>
        <blockquote>Be liberal in what you accept, and conservative in what you send.</blockquote>
        <p class="quotenote"><a href="http://www.postel.org/postel.html">Jon Postel</a>, <a href="http://tools.ietf.org/html/rfc1122">RFC 1122</a></p>
        <blockquote>Whenever possible, communications protocol operations should be defined to occur at the end-points of a communications system, or as close as possible to the resource being controlled.</blockquote>
        <p class="quotenote"><a href="http://dret.net/biblio/reference/sal84">J. Saltzer, D. Reed, D. Clark, <q>End-to-end Arguments in System Design</q></a></p>
      </slide>
      <slide>
        <title>Internet Protocols</title>
        <img style="width : 90% ; margin : 2% ; " src="internet-protocols.png" title="Internet Protocol Layers"/>
      </slide>
      <slide>
        <title>Network Convergence</title>
        <img style="width : 90% ; margin : 2% ; " src="network-convergence.png" title="Convergence in the Protocol Stack"/>
      </slide>
    </part>
    <part id="ip">
      <title short="IP">Internet Protocol (IP)</title>
      <slide>
        <title>IP Features</title>
        <ul>
          <li>End-to-end data transfer (IP addresses)</li>
          <li>Connection-less, No handshake between hosts, relies on TCP etc..</li>
	  <li>No error detection</li>
	  <li>Delivery not guaranteed</li>
          <li>Unreliable (packets may be lost or duplicated)</li>
	  <li>Data structures are packets or datagrams</li>
	  <li>Datagram/packet are routed independently from one another</li>
	  <p>Try TRACEROUTE to see how may routers to a host</p>
        </ul>
      </slide>
      <slide id="ip-address">
        <title>IP Address</title>
        <ul>
          <li>IP identifies nodes by an IP address</li>
          <li>IP addresses are globally unique (<a href="http://api.hostip.info/get_html.php?position=true">and can be geocoded</a>)</li>
          <li>IP uses 4 bytes for addresses (e.g., <code>128.32.226.29</code>)</li>
          <ul>
            <li>maximum number of addresses: 2<sup>32</sup> = 4.3 billion</li>
            <li>IPv6	extends the address format to 16 bytes (2<sup>128</sup> addresses)</li>
	    <li>IPv6 dot decimal notation: 128.91.45.157.220.40.0.0.0.0.252.87.212.200.31.255</li>
	    <li>IPv6 = 340,282,366,920,938,463,463,374,607,431,768,211,456 or 340 undecillion addresses</li>
          </ul>
          <li>IP address shortage led to the some trickery using IP addresses</li>
          <ul>
            <li><em href="http://en.wikipedia.org/wiki/Dhcp">Dynamic Host Configuration Protocol (DHCP)</em> is used to assign addresses on-demand</li>
            <li><em href="http://en.wikipedia.org/wiki/Network_address_translation">Network Address Translation (NAT)</em> uses one IP address for more than one device</li>
          </ul>
          <li>IP addresses are well-organized</li>
          <ul>
            <li>important for routing (i.e., sending packets to the target host)</li>
            <li>not ideally suited for mobile or ad-hoc networks</li>
          </ul>
        </ul>
      </slide>
      <slide>
	      <title>IP Packet Header</title>
	      <center><img style="height : 55% ; margin : 2% ; " src="ip-header.png"/></center>
      </slide>
    </part>
    <part id="tcp">
      <title short="TCP">Transmission Control Protocol (TCP)</title>
      <slide>
        <title>TCP Features</title>
        <ul>
	  <li>Connection-oriented, data structure is stream unlike IP = packet/datagram</li> 
	  <li>Three Way Handshake </li>
          <li>End to end error detection, PAR positive ack w/ retransmission</li>
          <li>Reliable (no data lost or duplicated)</li>
          <li>Application addressing</li>
        </ul>
      </slide>
      <slide>
        <title>Reliable Connections</title>
        <ul>
          <li>IP may drop or duplicate packets</li>
          <ul>
            <li>TCP adds serial numbers in data packets</li>
            <li>if problems are detected, TCP recovers automatically</li>
          </ul>
          <li>TCP avoids network congestion and system overload</li>
          <ul>
            <li><em>slow start</em> avoid flooding receivers with data they cannot process</li>
            <li><em>fast retransmit</em> for avoiding timeouts when losing data</li>
            <li>a <em>sliding window</em> for controlling the amount of outstanding packets</li>
          </ul>
        </ul>
      </slide>
      <slide><title>TCP Header</title>
	      <img style="height : 90% ; margin : 2% ; " src="tcp_header.png"/>
      </slide>
      <slide>
        <title>TCP Window</title>
        <img style="height : 70% ; margin : 2% ; " src="tcp-window.png"/>
      </slide>
    </part>
    <part id="dns">
      <title short="DNS">Domain Name System (DNS)</title>
      <slide>
        <title>Naming vs. Addressing</title>
        <ul>
          <li>IP addresses depend on network topology and organization</li>
          <ul>
            <li>reorganizing a network may change all IP addresses</li>
            <li>identifying important hosts should not be address-based</li>
          </ul>
          <li>Names are supposed to be more stable than addresses</li>
          <ul>
            <li>a name is an abstract identification of something</li>
            <li>names can be used to obtain more information</li>
          </ul>
          <li>Network services should use names instead of addresses</li>
          <ul>
            <li>before using the service, a mapping has to be performed</li>
            <li>the <em>Domain Name System (DNS)</em> is providing this service</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>DNS Properties</title>
        <ul>
          <li>DNS has a bootstrap problem</li>
          <ul>
            <li>DNS provides a service and should thus be identified by a name</li>
            <li>for resolving names into addresses, the DNS service is required</li>
          </ul>
          <li>DNS configuration is part of basic Internet configuration</li>
          <ul>
            <li><em>Dynamic Host Configuration Protocol (DHCP)</em> provides <link href="ip-address"/>, netmask, gateway, and DNS server address</li>
          </ul>
          <li>DNS names are hierarchically structured</li>
          <ul>
            <li><code>ischool.berkeley.edu</code>, <code>edu</code> is the <em>Top-Level Domain (TLD)</em></li>
            <li>TLDs are either <em>generic (gTLD)</em> or <em>country code (ccTLD)</em></li>
            <li>subdomains are federated (e.g., <code>edu</code>, <code>us</code>, <code>uk</code>, <code>tv</code>)</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Names Matter</title>
        <ul>
          <li>Names are not unique and namespaces are finite</li>
          <ul>
            <li>name disputes arise which were irrelevant before the Web</li>
            <li><q>cybersquatting</q> as a popular way to make money</li>
          </ul>
          <li>Names can be worth a lot of money</li>
          <ul>
            <li><code>business.com</code> was sold for $7.5 million</li>
          </ul>
          <li>Name inflation can be used to generate money</li>
          <ul>
            <li><code>aero</code>, <code>biz</code>, <code>coop</code>, <code>info</code>, <code>jobs</code>, <code>mobi</code>, <code>museum</code>, <code>name</code>, <code>pro</code>, <code>travel</code></li>
            <li>starting 2009, <a href="http://dret.typepad.com/dretblog/2008/06/dret.html">user-defined top-level domains will go on sale</a></li>
          </ul>
          <li>Names can have political significance</li>
          <ul>
            <li>ccTLDs are assigned based on the UNO's idea of what a country is</li>
          </ul>
          <li>Names can have symbolic significance</li>
          <ul>
            <li>Catalonia managed to get a domain of its own (<code>cat</code>)</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Domain Name Space</title>
        <img style="height : 70% ; margin : 2% ; " src="dns-namespace.png"/>
      </slide>
      <slide>
        <title>DNS Namespace Organization</title>
        <ul>
          <li>Domain owners can organize the assignment of subdomains</li>
          <ul>
            <li><code href="http://www.berkeley.edu/">berkeley.edu</code> is an U.S. educational institution</li>
            <li><code href="http://www.ethz.ch/">ethz.ch</code> is a Swiss university</li>
            <li><code href="http://www.imperial.ac.uk/">imperial.ac.uk</code> is a British university</li>
            <li><code href="http://www.uts.edu.au/">uts.edu.au</code> is an Australian university</li>
          </ul>
          <li>Special rules may apply (Germany does not assign car license plate names)</li>
          <li>Organizations may be countries or companies</li>
          <ul>
            <li>countries have national organizations for assigning names</li>
            <li>companies may create an internal multi-level namespace (<code href="http://www.ischool.berkeley.edu/">www.ischool.berkeley.edu</code>)</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Using DNS</title>
        <ul>
          <li>DNS is used by virtually all Internet applications</li>
          <ul>
            <li>names are more stable than addresses</li>
          </ul>
          <li>E-mail has some dedicated features built into DNS</li>
          <ul>
            <li>special entries (<code>MX</code> records) identify the e-mail server for a domain</li>
            <li>fallback entries help dealing with failing e-mail servers</li>
          </ul>
          <li>most URIs are based on DNS names</li>
          <ul>
            <li><code>http://ischool.berkeley.edu/</code> identifies the access protocol and the host</li>
            <li>the browser first performs a DNS lookup</li>
            <li>a TCP connection is then established to the address returned by the DNS</li>
          </ul>
        </ul>
      </slide>
    </part>
    <slide>
      <title>Conclusions</title>
      <ul>
        <li>The Internet is a network of networks</li>
        <ul>
          <li><a href="http://en.wikipedia.org/wiki/Ted_Stevens">Ted Stevens</a>: <q><a href="http://www.youtube.com/watch?v=f99PcP0aFNE" title="Ted Stevens on the Internet">It's not a big truck, it's a series of tubes!</a></q></li>
        </ul>
        <li>The Internet provides basic data transfer services</li>
        <li>IP is used to send <em>datagrams</em> between end-points</li>
        <li>TCP is used for reliable communications (building on IP)</li>
        <li>DNS provides human-readable names for Internet hosts</li>
      </ul>
    </slide>
  </presentation>

<!-- END 08 Internet Architecture -->



<!-- BEGIN 09 Web Foundations (URIs &amp; HTTP) -->

  <presentation id="uri-http">
    <title short="URIs &amp; HTTP">Web Foundations (URIs &amp; HTTP)</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://en.wikipedia.org/wiki/Http" title="Wikipedia: HTTP">HTTP</a>&#160;· <a href="http://www.w3.org/Provider/Style/URI" title="Cool URIs don't change">Cool URIs</a></toc>
    <toc class="resources"><a href="https://addons.mozilla.org/en-US/firefox/addon/3829" title="Firefox Add-on: Live HTTP Headers">Live HTTP Headers</a>&#160;· <a href="http://www.garshol.priv.no/download/text/http-tut.html" title="How the Web works: HTTP and CGI explained">HTTP and CGI</a>&#160;· <a href="http://tools.ietf.org/html/rfc3986" title="IETF RFC 3986: Uniform Resource Identifier (URI)">URI Spec</a>&#160;· <a href="http://tools.ietf.org/html/rfc2616" title="IETF RFC 2616: Hypertext Transfer Protocol (HTTP)">HTTP Spec</a></toc>
    <toc class="abstract">The Web's architecture has very simple principles revolving around the ideas of placing a heavy emphasis on a consistent and global identification mechanism for resources, a standardized way of how resource representations can be retrieved, and a standardized way of how resource representations should be usable by using standardized media types. Based on the Internet, the Web's transport protocol transmits representations of resources identified by a <em>Uniform Resource Identifier (URI)</em> between Web servers and clients. The most important protocols for data transfer on the Web is the <em>Hypertext Transfer Protocol (HTTP)</em>.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <slide>
      <title>Web Server Service</title>
      <ul>
        <li>Web servers do more than just <q>deliver files</q></li>
        <li>They receive a request for acting on a resource</li>
        <ul>
          <li>this may be a simple file retrieval</li>
          <li>additional information is available from the request's <link href="http-headers">header fields</link></li>
          <li>the request URI may contain additional <em>query information</em></li>
          <li>the request may transmit complex data (such as a form submission)</li>
        </ul>
        <li>Processing can mean anything, it is transparent for the client</li>
        <ul>
          <li>the result of processing yields a <em>resource representation</em></li>
          <li>in many cases, a Web server is just part of an application</li>
          <li>the <em>application server</em> is the application-specific logic</li>
        </ul>
      </ul>
    </slide>
    <part id="uri">
      <title short="URI">Uniform Resource Identifier (URI)</title>
      <slide>
        <title>Resource Identification</title>
        <ul>
          <li>Early hypertext systems usually only identified documents within the scope of a single system (e.g. HyperCard)</li>
          <li>The web uses URIs (Uniform Resource Identifers) as global identifiers</li>
          <ul>
            <li>http://bcnm.berkeley.edu/</li>
            <li>mailto:joehall@ischool.berkeley.edu</li>
            <li>tel:+1-510-684-2179</li>
            <li>urn:isbn:0451450523</li>
          </ul>
        </ul>
        <blockquote cite="http://www.w3.org/TR/2004/REC-webarch-20041215/#identification">Global naming leads to global network effects … the value of an identifier increases the more it is used consistently</blockquote>
        <p class="quotenote"><a href="http://www.w3.org/TR/webarch/">Architecture of the World Wide Web, Volume One</a></p> 
      </slide>
      <slide>
        <title>URIs &amp; Resources</title>
        <ul>
          <li>A URI identifies a "resource."</li>
          <li>But what is a resource?</li>
          <li>A resource is anything identified by a URI.</li>
          <li>Resources are a way of conceptually dividing up some information space</li>
        </ul>
      </slide>
      <slide>
        <title>URIs &amp; Resources</title>
        <ul>
          <li>URIs do not merely identify; they can be used to access or interact with a resource</li>
          <li>The details of how to do this are determined by the URI’s scheme, e.g. the "http" part of http://bcnm.berkeley.edu/</li>
          <li>The usual method of interacting with a resource is by <em>dereferencing</em> the URI</li>
        </ul>
      </slide>
      <slide id="uri-schemes">
        <title>URI Schemes</title>
        <pre>URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]</pre>
        <pre>http://dret.net/lectures/web-spring09/foundations#uri-schemes</pre>
        <ul>
          <li>URIs in their general case are very simple</li>
          <ul>
            <li>the scheme identifies how resources are identified</li>
            <li>the identification may be hierarchical or non-hierarchical</li>
          </ul>
          <li>Many URI schemes are hierarchical</li>
          <ul>
            <li>it is then possible to use relative URIs such as in <htmel>a href="../"</htmel></li>
            <li>the slash character is not just a character, in URIs it has semantics</li>
          </ul>
          <li>Query components specify additional information</li>
          <ul>
            <li>it is non-hierarchical information further identifying the resource</li>
            <li>in most cases, it can be regarded as <q>input</q> to the resource</li>
          </ul>
        </ul>
      </slide>
      <slide id="representation-resource">
        <title>Resources &amp; Representations</title>
        <ul>
          <li>When a URI is dereferenced by a web browser, it receives some data</li>
          <li>That data is called a <em>representation</em> of the resource identified by the URI</li>
          <li>Resources are abstract, representations are concrete</li>
          <li>Resources may have various representations, and they may vary with time</li>
        </ul>
      </slide>
      <slide>
        <title>1 Resource, 2 Representations</title>
        <center>
          <img src="img/google-representations-1.png"/>
        </center>
      </slide>
      <slide>
        <title>2 Resources, 1 Representation</title>
        <center>
          <img src="img/google-representations-2.png"/>
        </center>
      </slide>
    </part>
    <part id="http">
      <title short="HTTP">Hypertext Transfer Protocol (HTTP)</title>
      <slide>
        <title>DNS &amp; HTTP</title>
        <p>The two basic protocols which every Web browser must implement are <link href="dns">DNS</link> access and <link href="http">HTTP</link>. However, most operating systems provide an API for DNS access, so the browser can use this service locally and only has to implement HTTP. <link href="tcp">TCP</link> (which is required as the foundation for HTTP) is usually provided by the operating system.</p>
        <img style="width : 90% ; margin : 2% ; " src="browser-dns-http.png"/>
      </slide>
      <slide>
        <title>The Web's Protocol</title>
        <img style="height : 60% ; margin : 4% ; float : left ; " src="internet-traffic-trends.png"/>
        <p class="quotenote">provided by <a href="http://www.cachelogic.com/">CacheLogic Inc.</a></p>
      </slide>
      <part>
        <title>HTTP Basics</title>
        <slide>
          <title>HTTP Messages</title>
          <ul>
            <li>HTTP needs a reliable connection</li>
            <ul>
              <li>the foundation for HTTP is the <link href="tcp"/></li>
              <li>DNS resolution yields an IP address</li>
              <li>open TCP connection to port 80 or port specified in URI (<code>http://rosetta.sims.berkeley.edu:8085/</code>)</li>
            </ul>
            <li>HTTP is a <em>text-based</em> protocol</li>
            <ul>
              <li>the connection is used to transmit <em>text messages</em></li>
              <li>all HTTP messages are human-readable (not all <em>entities</em>, though)</li>
              <li>basic HTTP operations can be carried out by hand</li>
            </ul>
          </ul>
          <pre>start-line
          message-header *

          message-body ?</pre>
        </slide>
        <slide id="http-headers">
          <title>HTTP Header Fields</title>
          <ul>
            <li>Header fields contain information about the message</li>
            <ul>
              <li><em>general header:</em> <code>Date</code> as the message origination date</li>
              <li><em>request header:</em> <code>Accept-Language</code> indicates language preferences</li>
              <li><em>response header:</em> <code>Server</code> contains system information</li>
              <li><em>entity header:</em> <code>Content-Type</code> specifies the media type of the entity</li>
            </ul>
            <li>HTTP defines <a href="http://www.cs.tut.fi/~jkorpela/http.html">a number of header fields</a></li>
            <ul>
              <li>unknown fields must be ignored (extensibility)</li>
              <li>unstandardized fields should use a <q><code>X-</code></q> prefix</li>
            </ul>
            <li>HTTP is about acting on these fields</li>
            <ul>
              <li>HTTP defines what HTTP implementations must or should do</li>
            </ul>
          </ul>
        </slide>
        <slide id="http-request">
          <title>HTTP Requests</title>
          <ul>
            <li>After opening a connection, the client sends a request</li>
            <ul>
              <li>the method indicates the action to be performed on the resource</li>
              <li>HTTP's most interesting methods are: <code>GET</code>, <code>HEAD</code>, <code>POST</code></li>
              <li>other interesting methods are: <code>PUT</code>, <code>DELETE</code></li>
            </ul>
            <li>The URI identifies the resource to which the request should be applied</li>
            <ul>
              <li>absolute URIs are required when contacting <em>proxies</em></li>
              <li>absolute paths are required when contacting a server directly</li>
              <li>the URI may contain <em>query information</em></li>
            </ul>
            <li>The <code>Host</code> header field must be included in every request</li>
          </ul>
          <pre>Method Request-URI HTTP/Major.Minor
          [Header]*

          [Entity]?</pre>
        </slide>
        <slide id="http-get">
          <title>HTTP GET</title>
          <ul>
            <li>Retrieval action based on the URI</li>
            <ul>
              <li>maybe implemented by reading a file</li>
              <li>maybe implemented by processing a file (PHP)</li>
              <li>maybe implemented by invoking a process</li>
            </ul>
            <li>Semantics may change based on header fields</li>
            <ul>
              <li><code>If-*:</code> only reply with the entity if necessary</li>
              <li><code>Range:</code> only reply with the requested part of the entity</li>
            </ul>
            <li>Cacheability depends on header fields of the response</li>
          </ul>
          <pre>GET / HTTP/1.1
          Host: ischool.berkeley.edu</pre>
        </slide>
        <slide id="http-response">
          <title>HTTP Responses</title>
          <ul>
            <li>The server's response to interpreting a request</li>
            <ul>
              <li>the status code is given numerically and as text</li>
              <li><code>2**</code> for variations of <q>ok</q></li>
              <li><code>3**</code> for redirections</li>
              <li><code>4**</code> are different client side problems (<code>404</code>: not found)</li>
              <li><code>5**</code> are different server side problems</li>
            </ul>
            <li>Header fields specify additional information</li>
            <ul>
              <li>information about the server</li>
              <li>information about the entity (media type, encoding, language)</li>
            </ul>
          </ul>
          <pre>HTTP/Major.Minor Status-Code Text
          [Header]*

          [Entity]?</pre>
        </slide>
        <slide id="http-performance">
          <title>HTTP Performance</title>
          <ul>
            <li>HTTP/1.0 allowed one transaction per connection</li>
            <ul>
              <li>TCP connection setup and teardown are expensive</li>
              <li>TCP's <em>slow start</em> slows down the initial phase of data transfer</li>
              <li>typical Web pages use between 10-20 resources (HTML + images + CSS + scripts)</li>
              <li>typically, these resources are stored on the same server</li>
            </ul>
            <li>HTTP/1.1 introduces <em>persistent connections</em></li>
            <ul>
              <li>the TCP connection stays open for some time (10 sec is a popular choice)</li>
              <li>additional requests to the same server use the same TCP connection</li>
            </ul>
            <li>HTTP/1.1 introduces <em>pipelined connections</em></li>
            <ul>
              <li>instead of waiting for a response, requests can be queued</li>
              <li>the server responds as fast as possible</li>
              <li>the order may not be changed (there is no sequence number)</li>
            </ul>
          </ul>
        </slide>
        <slide>
          <title>HTTP Connection Handling</title>
          <img style="width : 90% ; margin : 2% ; " src="http-phttp-pipelining.png"/>
        </slide>
      </part>
      <part id="http-authentication">
        <title>HTTP Authentication</title>
        <slide>
          <title>HTTP Access Control</title>
          <ul>
            <li>HTTP servers can <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error">deny access</a> because of access control</li>
            <ul>
              <li><code>401 Unauthorized</code> means the resource is access controlled</li>
              <li><code>403 Forbidden</code> means the resource is inaccessible</li>
              <li><code>405 Method Not Allowed</code> signals a request using the wrong <link href="http-request">request method</link></li>
            </ul>
            <li>Two different approaches to unauthorized access are possible</li>
            <ul>
              <li>repeat the HTTP request with the proper authentication credentials</li>
              <li>redirect to a <link href="login-page"/> and establish an authenticated <link href="session"/></li>
            </ul>
          </ul>
        </slide>
        <slide>
          <title>HTTP Authentication</title>
          <img style="width : 90% ; margin : 2% ; " src="authentication-http.gif" title="HTTP Authentication" href="http://java.sun.com/j2ee/1.4/docs/tutorial/doc/Security5.html"/>
        </slide>
        <slide id="http-basic">
          <title>Basic HTTP Authentication</title>
          <ul>
            <li>Authentication is based on <em>authentication realms</em></li>
            <ul>
              <li>a set of resources for which the authentication is required</li>
              <li>an opaque name which is used to signal which login is required</li>
              <li>username/password often is specific for a given realm</li>
            </ul>
            <li>Users supply username and password through the client</li>
            <ul>
              <li>sent as <a href="http://en.wikipedia.org/wiki/Base64">Base64</a> encoded <q><code>username:password</code></q> string</li>
              <li>username and password are <a href="http://www.google.com/search?hl=en&amp;q=base64+decoder"><em>not</em> transmitted securely</a></li>
              <li>basic authentication should <em>always</em> use HTTPS</li>
            </ul>
            <li>Authorization is handled on the server side</li>
            <pre href="http://en.wikipedia.org/wiki/Basic_access_authentication">HTTP/1.0 401 Unauthorized
            WWW-Authenticate: Basic realm="SokEvo"</pre>
            <pre href="http://en.wikipedia.org/wiki/Basic_access_authentication">GET /private/index.html HTTP/1.0
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</pre>
          </ul>
        </slide>
        <slide>
          <title>Repeated Access</title>
          <ul>
            <li>Clients typically access more than one protected resource</li>
            <ul>
              <li>a perfectly stateless client would always request authentication from the user</li>
              <li>using the <em>realm</em> clients can identify repeated accesses</li>
            </ul>
            <li>Web interactions by default are perfectly stateless</li>
            <ul>
              <li>each request is completely independent from other requests</li>
              <li>stateless interactions make the Web loosely coupled and scalable</li>
              <li>concepts like the <em>realm</em> or <link href="cookies"/> introduce <q>state</q></li>
            </ul>
            <li>Clients remember the authentication and replay it automatically</li>
            <ul>
              <li>browsers provide little control over this feature</li>
              <li><q>logging out</q> of HTTP authenticated sessions is hard</li>
            </ul>
          </ul>
        </slide>
        <slide id="login-page">
          <title>Login Page</title>
          <ul>
            <li><link href="http-basic"/> works with browser controls (including the window)</li>
            <ul>
              <li>no possibility to <q>log out</q> without using browser-specific controls</li>
              <li>client side security depends on browser security measures</li>
            </ul>
            <li>Using forms gives more freedom in session management</li>
            <ul>
              <li>authentication and authorization are completely application-based</li>
              <li>if there were <q>secure personal browsers</q> this would not work very well</li>
            </ul>
          </ul>
        </slide>
      </part>
    </part>
    <slide>
      <title>Conclusions</title>
      <ul>
        <li>HTTP is much more than file transfer</li>
        <ul>
          <li>it is a protocol for the concept of <em>resource manipulation</em></li>
          <li>it is a distinct step away from the <em>API approach</em> to building distributed systems</li>
        </ul>
        <li>HTTP servers can be configured to deliver good or bad service</li>
        <ul>
          <li>this is a question of how well they are configured on the HTTP level</li>
          <li>it is also a question of how good the Web design is</li>
          <li>both issues together are required to set up a good Web server</li>
        </ul>
      </ul>
    </slide>
  </presentation>

<!-- END 09 Web Foundations (URIs &amp; HTTP) -->



<!-- BEGIN 10 Anatomy of a Basic Web Application -->

  <presentation id="webapps-basic">
    <title short="Basic Web Apps">Anatomy of a Basic Web Application</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://www.killersites.com/articles/articles_databaseDrivenSites.htm">Database-Driven Website</a>&#160;· <a href="http://en.wikipedia.org/wiki/Form_(web)">Forms</a>&#160;· <a href="http://proquest.safaribooksonline.com/9780596157739/1">It's Alive!</a>&#160;· <a href="http://docforge.com/wiki/Web_application_framework">Web Application Frameworks</a></toc>
    <toc class="resources"><a href="http://htmlhelp.com/faq/html/forms.html">HTML Forms FAQ</a>&#160;· <a href="http://www.w3.org/TR/html401/interact/forms.html">HTML Forms Spec</a></toc>
    <toc class="abstract">The vast majority of web sites today are no longer static HTML pages but <em>database-driven web applications</em>. Today we'll look at a simple database-driven web application in detail, to see how its various components--HTML forms, application server, and database--work together.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <part id="forms">
      <title>Forms Basics</title>
      <slide>
        <title>HTTP Web Services</title>
        <ul>
          <li>Services can be provided through URI/HTTP</li>
          <ul>
            <li>URI-based services need input from the user</li>
            <li>the question is how the user gets information to the server</li>
          </ul>
          <li>HTML forms provide an interface for assembling this information</li>
          <ul>
            <li>users fill out a form providing several fields</li>
            <li>the browser submits the entered information by HTTP to a URI</li>
            <li>the result of the request is displayed to the user</li>
          </ul>
          <li>HTTP has two different methods for submitting data</li>
          <ul>
            <li><code><link href="form-get">GET</link></code> encodes the data as a URI query string</li>
            <li><code><link href="form-post">POST</link></code> encodes the data as HTTP request entity</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Forms Mechanics</title>
        <ul>
          <li>HTML forms are normal Web pages (using form elements)</li>
          <li>The process receiving the form data produces a result page</li>
        </ul>
        <img style="width : 90% ; margin : 2% ; " src="img/form-mechanics.png"/>
      </slide>
      <slide>
        <title>Forms Markup</title>
        <ul>
          <li>All form elements must be inside a <htmel>form</htmel> element</li>
          <ul>
            <li>specifies the URI for submitting the form values (<xml>action="URI"</xml>)</li>
            <li>specifies the method for submitting the form values (<xml>method="<link href="form-get">GET</link>|<link href="form-post">POST</link>"</xml>)</li>
          </ul>
          <li><htmel>form</htmel> contains regular HTML markup and form elements</li>
          <ul>
            <li>the regular HTML markup creates the form's layout (table, list, texts)</li>
            <li>the form elements create the controls for acquiring input data</li>
          </ul>
          <li>Each <htmel>form</htmel> should have a <em>submit button</em></li>
          <ul>
            <li>when pressing this button, the form values are sent to the <xml>action</xml> URI</li>
            <li>without such a button, the form values cannot be submitted</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Forms Elements (User View)</title>
        <ul>
          <li>HTML provides a small set of form controls</li>
          <li>Sufficient for many applications</li>
        </ul>
        <hr/>
        <form action="http://stevex.net/dump.php" method="POST" enctype="multipart/form-data">
          <table>
            <tr><td valign="top" align="right">Text:</td><td><input type="text" name="text" value="text input"/></td></tr>
            <tr><td valign="top" align="right">Password:</td><td><input type="password" name="password" value="hidden text"/></td></tr>
            <tr><td valign="top" align="right">Checkbox:</td><td><input type="checkbox" name="check" value="1"/> <input type="checkbox" name="check" value="2"/> <input type="checkbox" name="check" value="3"/></td></tr>
            <tr><td valign="top" align="right">Radio Button:</td><td><input type="radio" name="radio" value="1"/> <input type="radio" name="radio" value="2"/> <input type="radio" name="radio" value="3"/></td></tr>
            <tr><td valign="top" align="right">Text Areas:</td><td><textarea name="textarea" rows="2" cols="20"/></td></tr>
            <tr><td valign="top" align="right">Selection:</td><td><select name="select"><option selected="selected">XML</option><option>SGML</option></select></td></tr>
            <tr><td valign="top" align="right">Multiple Selection:</td><td><select name="mselect" multiple="multiple"><option>242</option><option>290-3</option><option>290-13</option></select></td></tr>
            <tr><td valign="top" align="right">File Upload:</td><td><input name="file" type="file"/></td></tr>
            <tr><td valign="top" align="right">Hidden:</td><td><input type="hidden" name="hidden" value="hidden input"/></td></tr>
            <tr><td valign="top" align="right">Submit:</td><td><input name="submit" type="submit"/></td></tr>
          </table>
        </form>
      </slide>
      <slide>
        <title>Forms Elements (Source View)</title>
	<pre><![CDATA[<form action="http://stevex.net/dump.php" method="POST" enctype="multipart/form-data"><table>
	<tr><td>Text:</td><td><input type="text" name="text" value="text input"/></td></tr>
	<tr><td>Password:</td><td><input type="password" name="password" value="hidden text"/></td></tr>
	<tr><td>Checkbox:</td><td><input type="checkbox" name="check" value="1"/> <input type="checkbox" name="check" value="2"/> <input type="checkbox" name="check" value="3"/></td></tr>
	<tr><td>Radio Button:</td><td><input type="radio" name="radio" value="1"/> <input type="radio" name="radio" value="2"/> <input type="radio" name="radio" value="3"/></td></tr>
	<tr><td>Text Areas:</td><td><textarea name="textarea" rows="2" cols="20"/></td></tr>
	<tr><td>Selection:</td><td><select name="select"><option selected="selected">XML</option><option>SGML</option></select></td></tr>
	<tr><td>Multiple Selection:</td><td><select name="mselect" multiple="multiple"><option>242</option><option>290-3</option><option>290-13</option></select>
	<tr><td>File Upload:</td><td><input name="file" type="file"/></td></tr>
	<tr><td valign="top" align="right">Hidden:</td><td><input type="hidden" name="hidden" value="hidden input"/></td></tr>
	<tr><td>Submit:</td><td><input name="submit" type="submit"/></td></tr>
        </table></form>]]></pre>
      </slide>
      <slide id="calendar">
        <title>Date Entry</title>
        <listing src="date-picker.html"/>
      </slide>
      <slide id="form-get">
        <title>Forms and GET</title>
        <ul>
          <li>Limited to string-oriented form values</li>
          <ul>
            <li>but HTML forms also allow file upload (this requires <code>POST</code>)</li>
          </ul>
          <li>All values of all form input fields are collected</li>
          <ul>
            <li>for text and selection fields, this is one input field</li>
            <li>for checkboxes and radio buttons, this collects the selected fields</li>
          </ul>
          <li>The browser composes a URI query string</li>
          <ul>
            <li>the form submission is a set of name/value pairs (names may appear more than once!)</li>
            <li>using URI query string notation, it is appended to the URI of the form's <xml>action</xml></li>
          </ul>
          <li><code>GET</code> is good!</li>
          <ul>
            <li>URI-encoded queries can be bookmarked and otherwise reused (e.g., cached)</li>
            <li>use <code>GET</code> when implementing a form that isn't changing data</li>
          </ul>
        </ul>
      </slide>
      <slide id="form-post">
        <title>Forms and POST</title>
        <ul>
          <li><code>GET</code> encodes the values in the URI</li>
          <ul>
            <li>for file uploads, this is not possible</li>
            <li>HTTP's <code>POST</code> request method can upload data</li>
          </ul>
          <li><code>POST</code> sends a request containing an entity</li>
          <ul>
            <li>the HTTP request then looks similar to a response (header fields and entity)</li>
            <li>the receiving process (the Web server) accepts the POST body</li>
          </ul>
          <li>Entities can use any format (it is specified in a header field)</li>
          <ul>
            <li>just like e-mails, entities can have multiple parts</li>
            <li>the parts are separated using the standard MIME mechanism</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>POST Form Processing</title>
        <ul>
          <li><code>POST</code> is used if the <htmel>form</htmel> specifies it</li>
          <ul>
            <li>it should be used for changing (inserting or updating) data</li>
            <li>it should be used for file upload forms (otherwise, only the name is uploaded)</li>
          </ul>
          <li>File upload forms must specify the appropriate encoding</li>
          <ul>
            <li><q><code>application/x-www-form-urlencoded</code></q> is the default (values in the entity)</li>
            <li><q><code>multipart/form-data</code></q> is required for file upload (multipart form data)</li>
          </ul>
          <li>The server side must be prepared to receive <code>POST</code> requests</li>
          <ul>
            <li>it must parse the entity rather than the URI's query string</li>
            <li>form values can then be extracted from the entity</li>
            <li>some environments (e.g., PHP) allow to handle <code>GET</code>/<code>POST</code> transparently</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Processing of Form Data</title>
        <ul>
          <li>Form data is always encoded</li>
          <ul>
            <li>as a query string when using <code>GET</code></li>
            <li>in an encoded entity when using <code>POST</code></li>
            <li>in a multipart entity when using <code>POST</code> with <code>multipart/form-data</code></li>
          </ul>
          <li>Parsing the form data should be done by existing software</li>
          <ul>
            <li>most Web-aware programming environments provide this functionality</li>
            <li>PHP allows access through different mechanisms</li>
          </ul>
        </ul>
        <listing src="form-variables.php" line="8-11"/>
      </slide>
    </part>
    <part>
      <title>Structuring Forms</title>
      <slide>
        <title>Form Usability</title>
        <ul>
          <li>HTML forms are very loosely structured</li>
          <ul>
            <li><htmel>form</htmel> somewhere representing the container</li>
            <li>inside the <htmel>form</htmel> a random collection of HTML and form inputs</li>
          </ul>
          <li>Visually, the structure often is (and should be) easy to see</li>
          <ul>
            <li>for non-visual access, more structure must be provided</li>
            <li>accessibility has become a major issue on the Web</li>
          </ul>
          <li>Accessibility has many different facets</li>
          <ul>
            <li>voice browsers must be able to read aloud Web forms</li>
            <li>gateways should be able to intelligently re-structure Web forms</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Labels</title>
        <ul>
          <li>Label and form control are not connected by HTML</li>
        </ul>
	<pre><![CDATA[<tr><td>Text:</td><td><input type="text" name="text"/></td></tr>
        <tr><td>Password:</td><td><input type="password" name="password"/></td></tr>]]></pre>
        <ul>
          <li>The <htmel>label</htmel> element allows to make this connection</li>
          <ul>
            <li>it connects a form control with the describing label</li>
            <li>this association is now accessible to clients for processing</li>
          </ul>
        </ul>
	<pre><![CDATA[<tr>
        <td><label for="textctrl">Text:</label></td>
        <td><input type="text" name="text" id="textctrl"/></td>
        </tr>
        <tr>
        <td><label for="pwdctrl">Password:</label></td>
        <td><input type="password" name="password" id="pwdctrl"/></td>
        </tr>]]></pre>
      </slide>
      <slide>
        <title>Tabbing in Forms</title>
        <ul>
          <li>Tabbing is a very convenient way of navigating a form</li>
          <ul>
            <li>after completing one field, users should be taken to the next</li>
            <li>the order should be defined by the form creator, not by accident</li>
          </ul>
          <li>the <html>tabindex</html> attribute defines the tabbing order</li>
          <ul>
            <li>it contains a number which is interpreted relative to other numbers</li>
            <li>all form controls may carry a <html>tabindex</html> attribute</li>
          </ul>
          <li><html>tabindex</html> 1-9:
          <select tabindex="1"><option>1</option></select>
          <select tabindex="7"><option>7</option></select>
          <select tabindex="3"><option>3</option></select>
          <select tabindex="6"><option>6</option></select>
          <select tabindex="8"><option>8</option></select>
          <select tabindex="2"><option>2</option></select>
          <select tabindex="4"><option>4</option></select>
          <select tabindex="5"><option>5</option></select>
          <select tabindex="9"><option>9</option></select>
          </li>
        </ul>
      </slide>
    </part>
    <slide>
      <title>Conclusions</title>
      <ul>
        <li>We now expect to interact with web sites, not just read them</li>
        <li>Web forms provide the basic tools to allow users to create data</li>
        <li>Databases are used to store and query for data</li>
        <li>Application servers mediate the interaction between users and the database</li>
        <li>These three technologies constitute the <em>database-driven web application</em></li>
      </ul>
    </slide>
  </presentation>

<!-- END 10 Anatomy of a Basic Web Application -->



<!-- BEGIN 11 Media Types (MIME) -->

  <presentation id="media-types">
    <title short="Media Types">Media Types (MIME)</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="https://developer.mozilla.org/En/How_Mozilla_determines_MIME_Types" title="Firefox Media Type Handling">Firefox Handling</a></toc>
    <toc class="resources"><a href="http://www.iana.org/assignments/media-types/" title="IANA Media Type Registry">Registry</a>&#160;· <a href="http://en.wikipedia.org/wiki/MIME_type" title="Wikipedia: Internet Media Type">Wikipedia</a></toc>
    <toc class="abstract">One of the most important aspect of computer-based communications is the concept of <em>media types</em>, the question what type of information some digital artifact represents, and how it is encoded. The most common standard for this information is the scheme introduced by <em>Multipurpose Internet Mail Extensions (MIME)</em>. Media types can be negotiated by peers communicating through HTTP. Some media types allow fragment identifiers, which allow references to a resource to identify a fragment of the complete resource.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <slide id="mime">
      <title>Multipurpose Internet Mail Extensions (MIME)</title>
      <ul>
        <li>Basic e-mail only supports ASCII text messages</li>
        <li>MIME was introduced in 1993 to standardize a more powerful message format</li>
        <ul>
          <li>multiple objects in a single message</li>
          <li>text having unlimited line length or overall length</li>
          <li>character sets other than ASCII, allowing non-English language messages</li>
          <li>binary or application specific files</li>
          <li>images, audio, video and multi-media messages</li>
        </ul>
        <li>Resource types are necessary for every automated action with resources</li>
        <ul>
          <li>Unix started with <code>/etc/mime.types</code>, a list of mappings between extensions and media types</li>
          <li>the Unix <code>file</code> command uses simple fingerprints (specified in <code>/etc/magic</code>)</li>
          <li>double-clicking in GUIs needs a file association (based on the file's type) to work</li>
        </ul>
      </ul>
    </slide>
    <slide>
      <title>Windows File Type Handling</title>
      <img style="width : 90% ; margin : 2% ; " src="windows-file-types.png" title="Windows File Type Handling"/>
    </slide>
    <part>
      <title>Media Types and the Web</title>
      <slide>
        <title>Browsers and Resources</title>
        <ul>
          <li>Web browsers retrieve resources and render them</li>
          <ul>
            <li>HTTP can transfer any kind of resource (binary resources must be transfer encoded)</li>
            <li>resource types cannot (and should not) be inferred from the URI</li>
          </ul>
          <li>HTTP combines data transfer, transfer management, and metadata</li>
          <ul>
            <li>basic information about a resource (modification date)</li>
            <li>information describing the resource's type (media type) and content (language)</li>
          </ul>
          <li>The resource type received may or may not be supported by the browser</li>
          <ul>
            <li><em>built-in support</em> is provided for the core Web resource types (HTML, GIF, JPEG)</li>
            <li><em>plug-in</em> support is an add-on to the browser for popular types (PDF, Flash)</li>
            <li><em>external applications</em> are standalone applications invoked by the browser</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Firefox Media Type Handling</title>
        <img style="width : 90% ; margin : 2% ; " src="firefox-media-types.png" title="Controlling Media Type Handling in Firefox"/>
      </slide>
      <slide>
        <title>Media Type Misconfiguration</title>
        <ul>
          <li>Problems accessing web content are often the results of media type misconfigurations</li>
          <li>Example:</li>
          <ul>
            <li><a href="http://courses.ischool.berkeley.edu/i190-waim/s10/media/correct/unpossible">Correctly configured MP3 (MIME type <code>audio/mpeg</code>)</a></li>
            <li><a href="http://courses.ischool.berkeley.edu/i190-waim/s10/media/incorrect/unpossible">Inorrectly configured MP3 (MIME type <code>text/plain</code>)</a></li>
          </ul>
          <li>Browsers try to work around the most common errors</li>
          <ul>
            <li>if I had left the <code>.mp3</code> suffix on the files in the examples above, they would have been treated as MP3s regardless of the MIME type</li>
          </ul>
        </ul>
      </slide>
    </part>
    <part>
      <title>Media Types</title>
      <slide id="mime-content-types">
        <title>Content Types</title>
        <ul>
          <li>MIME splits the word of resource types into <em>Content Types</em> and <em>Subtypes</em></li>
          <ul>
            <li><em>Content types</em> are the main classification of a resource type</li>
            <li><link href="mime-subtypes"/> qualify the format and encoding used for the content</li>
          </ul>
          <li>Content types classify the world of resource type into 8 areas</li>
          <ul>
            <li><mime>audio</mime> for media types representing exclusively audio signals</li>
            <li><mime>image</mime> for any media type representing two-dimensional images</li>
            <li><mime>message</mime> for resources representing e-mail messages</li>
            <li><mime>model</mime> for complex representations of physical objects (very unpopular)</li>
            <li><mime>multipart</mime> for MIME entities containing multiple individual MIME-tagged resources</li>
            <li><mime>text</mime> for mainly textual material (e.g., HTML is considered to be text)</li>
            <li><mime>video</mime> for media types combining moving pictures with audio</li>
            <li><mime>application</mime> for any resource which cannot by classified anywhere else</li>
            <li>(<mime>example</mime> is only used for media type examples, not for real-world resources)</li>
          </ul>
        </ul>
      </slide>
      <slide id="mime-subtypes">
        <title>Subtypes</title>
        <ul>
          <li>Within each content type, many different data formats are in use</li>
          <ul>
            <li>content types only allow a broad classification</li>
            <li>subtypes allow the identification of a specific data format of a resource</li>
          </ul>
          <li>Subtypes are expected to be <link href="mime-registration">registered</link> with the <a href="http://www.iana.org/" title="Internet Assigned Names Authority">IANA</a></li>
          <ul>
            <li>unregistered subtypes can be used but must have a <mime>x-</mime> prefix</li>
          </ul>
          <li>Additional qualifiers can be used to be more specific</li>
          <ul>
            <li><mime>text/plain</mime> is the media type for plain text files</li>
            <li>plain text files have additional properties such as character encoding and language</li>
            <li><mime>text/plain</mime> can be further qualified to <mime>text/plain; charset=iso-8859-1</mime></li>
          </ul>
        </ul>
      </slide>
      <slide id="mime-registration">
        <title>Media Type Registration</title>
        <ul>
          <li>Media types need to be registered together with a documentation</li>
          <ul>
            <li>this makes sense if it is assumed that registered types should be openly accessible</li>
            <li>this becomes complicated if the types are proprietary and not publicly documented</li>
          </ul>
          <li>It makes sense to register types even if they are not publicly documented</li>
          <ul>
            <li>if a Word document is sent by e-mail it should be opened by the Word application</li>
            <li>IANA registers <q><mime>vnd.</mime></q> prefixed subtypes with less requirements than <q>regular</q> types</li>
            <li>vendor specific types are often undocumented and may change significantly over time</li>
          </ul>
          <li>Using well-defined types makes handling resources more stable</li>
          <ul>
            <li>the IANA registry contains hundreds of types (most of them <mime>application</mime> types)</li>
            <li>when designing applications dealing with various content types, use media types as the foundation</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title><mime>application/msword</mime> Media Type</title>
        <listing src="msword.txt" line="43-63" title="application/msword Media Type Registration" href="http://www.iana.org/assignments/media-types/application/msword"/>
      </slide>
      <part>
        <title>Text Content Types</title>
        <slide id="mime-plaintext">
          <title>Plain Text</title>
          <ul>
            <li><a href="http://tools.ietf.org/html/rfc2046">RFC 2046</a> defines plain text files as a basic media type</li>
            <ul>
              <li>any text file that does not contains structures which are intended for machine-based processing</li>
              <li>even <link href="mime-csv"/> does not count as plain text</li>
            </ul>
            <li>Guessing of character encoding is hard and unreliable and should be avoided</li>
            <ul>
              <li>the character encoding can be specified with an additional parameter: <mime>text/plain; charset=iso-8859-1</mime></li>
              <li>if no such parameter is present, ASCII should be assumed as the character encoding</li>
            </ul>
            <li>For more specific text subtypes, <a href="http://www.iana.org/assignments/media-types/text/">various other subtypes exist</a></li>
            <ul>
              <li><mime>calendar</mime> for information about calendar entries</li>
              <li><mime>javascript</mime> for JavaScript code (should now be marked as <mime>application/javascript</mime>)</li>
              <li><mime>sgml</mime> and <mime>xml</mime> for text with additional markup</li>
            </ul>
          </ul>
        </slide>
        <slide id="mime-html">
          <title>HTML</title>
          <ul>
            <li><a href="http://tools.ietf.org/html/rfc2854">RFC 2854</a> registers <mime>text/html</mime> for HTML documents</li>
            <ul>
              <li>like <link href="mime-plaintext"/> the character encoding can also be specified as a parameter</li>
              <li>it is not specific for some version of HTML (version information can be found in the HTML document)</li>
            </ul>
            <li><link href="html-frag-id"/> are also defined by the media type registration</li>
            <li>HTML in many cases needs additional resources to be <q>self-contained</q></li>
            <ul>
              <li>images which are references by <elem>img</elem> elements (maybe external image maps)</li>
              <li>other media referenced by <elem>object</elem> or <elem>applet</elem> (or the deprecated <elem>embed</elem>)</li>
              <li>stylesheets or scripts which are referenced in the document head (they may reference other files …)</li>
            </ul>
          </ul>
        </slide>
        <slide id="mime-csv">
          <title short="CSV">Comma-Separated Values (CSV)</title>
          <ul>
            <li><a href="http://tools.ietf.org/html/rfc4180">RFC 4180</a> defines a textual format for <q>spreadsheet data</q></li>
            <li>CSV has been used for a long time, but some of the details were solved differently</li>
            <li>Defining a media type makes it easier for implementations to know what to expect</li>
            <ul>
              <li>the registration not only registers the type, but also defines it</li>
            </ul>
            <li>CSV is not overly complex, but some issues have to be solved</li>
            <ul>
              <li>how to separate lines (CRLF)</li>
              <li>how to end the file (CRLF is allowed but optional)</li>
              <li>are there headers allowed (yes, but they are not marked as such)</li>
              <li>may different lines use different numbers of fields (no)</li>
              <li>are spaces significant (yes)</li>
              <li>are quotes significant (no, they are delimiters, so quotes as values must be escaped)</li>
              <li>how to treat fields with CRLF, commas, or quotes (enclose the value in quotes)</li>
            </ul>
          </ul>
        </slide>
      </part>
      <part id="image-types">
        <title>Image Content Types</title>
        <slide id="mime-gif">
          <title short="GIF">Graphic Interchange Format (GIF)</title>
          <ul>
            <li><a href="http://tools.ietf.org/html/rfc2046">RFC 2046</a> registers the oldest graphics format on the Web</li>
            <li>GIF was subject of a long patent debate</li>
            <ul>
              <li>the compression technique of GIF (<a href="http://en.wikipedia.org/wiki/Lzw" title="Lempel-Ziv-Welch">LZW</a>) had been patented by Unisys (1983)</li>
              <li>Unisys wanted to get licensing fees from all commercial online uses of GIF</li>
              <li><link href="mime-png"/> was developed as an effort to develop a copyright-free format</li>
              <li>in 1999, Unisys changed its tactics and wanted to collect one-time fees ($5000-$7500) from all users</li>
              <li>all GIF-related LZW expired in 2003/2004, so GIF is freely available now</li>
            </ul>
            <li>GIF's poor features make PNG the better choice anyway</li>
            <ul>
              <li>8 bit color (requires dithering for photographs), binary transparency</li>
              <li>GIF's animation feature is the only thing that is not available in PNG (yet)<img src="running-wolf.gif" style="height : 0.8em"/></li>
              <ul>
                <li>there is <a href="http://mozillalabs.com/blog/2007/08/better-animations-in-firefox-3/">animated PNG support</a> in recent versions of Firefox</li>
              </ul>
            </ul>
          </ul>
        </slide>
        <slide id="mime-jpeg">
          <title short="JPEG">Joint Photographic Experts Group (JPEG)</title>
          <ul>
            <li><a href="http://tools.ietf.org/html/rfc2046">RFC 2046</a> standardizes the second popular image format for the Web</li>
            <li>JPEG has been specifically designed for photographs</li>
            <ul>
              <li>it always is lossy (it cannot preserve the complete information from a random bitmap)</li>
              <li>it uses perception-based compression (for example, color precision is sacrificed for brightness)</li>
            </ul>
          </ul>
          <table style="width : 90% ; margin : 4% ;  font-size : smaller ; ">
            <tr>
              <td align="center">
                <img src="jpeg-average-quality.jpg" title="Average Quality JPEG" href="http://en.wikipedia.org/wiki/JPEG#Photographs"/>
              </td>
              <td align="center">
                <img src="jpeg-low-quality.jpg" title="Low Quality JPEG" href="http://en.wikipedia.org/wiki/JPEG#Photographs"/>
              </td>
              <td align="center">
                <img src="jpeg-lowest-quality.jpg" title="Lowest Quality JPEG" href="http://en.wikipedia.org/wiki/JPEG#Photographs"/>
              </td>
            </tr>
            <tr>
              <th>Q = 50, filesize 15,138 bytes</th>
              <th>Q = 10, filesize 4,787 bytes</th>
              <th>Q = 1, filesize 1,523 bytes</th>
            </tr>
          </table>
        </slide>
        <slide id="mime-png">
          <img src="png-transparency.png" style="float : right ; "/>
          <title short="PNG">Portable Network Graphics (PNG)</title>
          <ul>
            <li>PNG is registered as <mime>image/png</mime> and is the third major image format</li>
            <ul>
              <li>PNG was intended to be a royalty- and copyright-free replacement of <link href="mime-gif">GIF</link></li>
              <li>image formats need to supported by browsers and thus take a long time until they are established</li>
              <li>IE6 implements PNG in a very rudimentary form, IE7 handles PNG correctly</li>
            </ul>
            <li>PNG has some advantages over GIF and JPEG</li>
            <ul>
              <li>lossless, compressed palette, grayscale, or true color images</li>
              <li>8 bit alpha channel for gradual opacity (blending into the background)</li>
            </ul>
            <li>JPEG still is the preferred format for photographic pictures</li>
            <li>GIF still is the preferred format for animated images</li>
          </ul>
        </slide>
        <slide id="png-alpha">
          <title>PNG Alpha Channel Effects</title>
          <table width="90%">
            <tr>
              <tr>
                <td style="background : #000000"><img src="png-transparency.png"/></td>
                <td style="background : #404040"><img src="png-transparency.png"/></td>
                <td style="background : #606060"><img src="png-transparency.png"/></td>
              </tr>
              <tr>
                <td style="background : #808080"><img src="png-transparency.png"/></td>
                <td style="background : #A0A0A0"><img src="png-transparency.png"/></td>
                <td style="background : #C0C0C0"><img src="png-transparency.png"/></td>
              </tr>
            </tr>
          </table>
        </slide>
      </part>
    </part>
    <part id="frag-id">
      <title>Fragment Identifiers</title>
      <slide>
        <title>Identification of Resource Fragments</title>
        <ul>
          <li>URIs identify a resource (based on a scheme and a scheme-specific part)</li>
          <ul>
            <li>URIs do not necessarily identify a specific representation of a resource</li>
            <li>any representation-specific operation needs to look at the resource type</li>
          </ul>
          <li>Fragment identifiers can be used to identify a part of a resource</li>
          <ul>
            <li><code href="media-types#frag-id">http://courses.ischool.berkeley.edu/i190-waim/s10/media-types<span style="color : red">#frag-id</span></code></li>
            <li>fragments are a <em>client side</em> concept (the HTTP GET requests the complete resource)</li>
            <li>if the client supports fragment handling, the identifier is interpreted</li>
          </ul>
        </ul>
      </slide>
      <slide id="html-frag-id">
        <title>HTML Fragment Identifiers</title>
        <ul>
          <li>HTML allows to address named/identified elements in the HTML document</li>
          <ul>
            <li>the first HTML versions required named <code>&lt;a name="html-frag-id">incoming anchors&lt;/a></code></li>
            <li>newer HTML versions allow <code href="media-types#html-frag-id">&lt;div id="html-frag-id">every element to have an id&lt;/div></code></li>
            <li>browsers support both ways, but the <xml>id</xml> variant should be preferred</li>
          </ul>
          <li>Only named/identified fragments can be identified</li>
          <ul>
            <li>99.99% of all page authors do not routinely add identifications</li>
            <li>tools may be smarter and take over that task (e.g., <em>Movable Type</em> identifies all relevant elements)</li>
            <li>for most pages on the Web this means users cannot link to most elements in them</li>
          </ul>
          <li>Keeping fragment identifiers stable should be a goal of Web authors</li>
          <ul>
            <li>identify the key fragments (and maybe provide a better UI than <q>view source</q>)</li>
            <li>never change identifiers once they have been assigned</li>
          </ul>
        </ul>
      </slide>
      <slide id="media-fragments">
        <title>Media Fragments</title>
        <ul>
          <li>There are a number of non-standard approaches to define fragments for media types other than HTML</li>
          <ul>
            <li><a href="http://kb2.adobe.com/cps/317/317300.html">link to a specific page of a PDF</a> by appending <code>#page</code> (only works with a PDF browser plugin):<br/>
            <code href="http://cue.berkeley.edu/ecm.pdf#page=16">http://cue.berkeley.edu/ecm.pdf<span style="color : red">#page=16</span></code></li>
            <li><a href="http://www.wikihow.com/Link-to-a-Certain-Time-in-a-YouTube-Video">link to a specific time in a YouTube video</a> by appending <code>#t</code>:<br/>
            <code href="http://www.youtube.com/watch?v=8HE9OQ4FnkQ#t=59s">http://www.youtube.com/watch?v=8HE9OQ4FnkQ<span style="color : red">#t=59s</span></code></li>
          </ul>
          <li>There is <a href="http://www.w3.org/TR/media-frags/">ongoing work</a> to standardize linking to multimedia documents (e.g. audio and video)</li>
          <ul>
            <li><a href="http://annodex.net/~silvia/itext/mediafrag.html">demo</a> of linking to points in an HTML5 video (Firefox 3.6 only)</li>
            <li>standard support for linking to parts of media opens many <a href="http://www.w3.org/TR/media-frags-reqs/">possibilities</a>, including simple <a href="http://media.sffs.org/remix/RemixerHome.php">web-based remixing</a></li>
          </ul>
        </ul>
      </slide>
    </part>
    <slide>
      <title>Conclusions</title>
      <ul>
        <li>Handling Web resources and technologies requires a common vocabulary</li>
        <li>Media types are a useful vocabulary for identifying resource types</li>
        <li>Fragment identifiers add some complexity, in particular for resource variants</li>
      </ul>
    </slide>
  </presentation>

<!-- END 11 Media Types (MIME) -->



<!-- BEGIN 12 Multimedia -->

  <presentation id="multimedia">
    <title short="Multimedia">Multimedia</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://www.webstyleguide.com/wsg3/11-graphics/" title="Web Style Guide: Graphics">Style Guide</a>&#160;· <a href="http://www.youtube.com/watch?v=siOHh0uzcuY#t=6m06s">Graphics in HTML5</a>&#160;· <a href="http://www.youtube.com/watch?v=siOHh0uzcuY#t=20m53s">Video in HTML5</a></toc>
    <toc class="resources"><a href="http://en.wikipedia.org/wiki/Graphics_file_format" title="Wikipedia: Graphics File Formats">Graphics File Formats</a>&#160;· <a href="http://www.w3schools.com/svg/svg_intro.asp">Intro to SVG</a>&#160;· <a href="https://developer.mozilla.org/En/Using_audio_and_video_in_Firefox">Audio and Video in Firefox</a></toc>
    <toc class="abstract">Multimedia is a broad term for pictures, audio and video. Pictures include both images and graphics. Until HTML5, images were the only multimedia content on the Web widely supported by standardized formats. With the arrival of HTML5, audio and video are now supported directly by Web browsers, and there is wider support for graphics as well.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <slide id="picture-formats">
      <title>Images vs. Graphics</title>
      <img src="http://upload.wikimedia.org/wikipedia/en/a/aa/VectorBitmapExample.svg" style="float : right ; margin : 0 1em 2em 2em ; width: 375px;" title="Vector vs. Bitmap"/>
      <ul>
        <li>Pictures can be encoded in a <a href="http://en.wikipedia.org/wiki/Comparison_of_graphics_file_formats">wide variety of ways</a></li>
        <li><em>Images</em> are bitmaps of pixels</li>
        <ul>
          <li>it takes <em>scanning/rendering</em> to produce images</li>
          <li>images have a certain native <em>resolution</em></li>
          <li><em>scanning</em> is done by a scanner, a fax, or a camera's <a href="http://en.wikipedia.org/wiki/Charge-coupled_device">CCD</a></li>
        </ul>
        <li><em>Vector Graphics</em> are composed out of graphic primitives</li>
        <ul>
          <li>graphics can be searchable, stylable, and scalable</li>
          <li>the format can have different capabilities (2D vs. 3D)</li>
        </ul>
        <li>Graphics preserve model-level information</li>
        <ul>
          <li>this only makes sense if there <em>is</em> a model</li>
          <li>rendering and styling can be an expensive process (e.g., video games)</li>
          <li>images can be a snapshot of some specific <q>view</q> of graphics</li>
        </ul>
      </ul>
    </slide>
    <part id="web-images">
      <title>Images on the Web</title>
      <slide>
        <title>JPEG, GIF and PNG</title>
        <ul>
          <li>To <link href="image-types">recap</link>:</li>
          <li>JPEG is the format of choice for photographic images</li>
          <li>GIF was the original format of choice for drawn images such as logos or diagrams</li>
          <li>PNG is the new format of choice, though there are still more GIF images on the Web</li>
          <ul>
            <li>PNG supports <a href="http://www-archive.mozilla.org/start/1.0/demos/eagle-sun.html">alpha transparency</a></li>
            <li>GIF supports <a href="http://people.ischool.berkeley.edu/~ryanshaw/gucci/">animation</a>, which accounts for its enduring popularity</li>
            <li>recent versions of Firefox have support for animated PNGs, which are <a href="http://animatedpng.com/index.php/samples/samples-by-codadude/">superior</a></li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>JPEG 2000</title>
        <ul>
          <li>There are no new Web image formats on the forseeable horizon</li>
          <li>One contender was the next generation of JPEG: <a href="http://en.wikipedia.org/wiki/JPEG_2000">JPEG 2000</a></li>
          <li>JPEG 2000 allows for <em>progressive transmission</em></li>
          <ul>
            <li>when viewing very high-resolution images, more detail can be downloaded and added to the image as the user zooms in</li>
            <li>something similar is offered by Microsoft's (proprietary) <a href="http://www.seadragon.com/showcase/chris-jordan/#skull-with-cigarette">Seadragon</a> technology</li>
          </ul>
          <li>But support for JPEG 2000 on the Web seems to have stalled</li>
        </ul>
      </slide>
    </part>
    <part id="web-graphics">
      <title>Graphics on the Web</title>
      <slide id="svg">
        <title>Scalable Vector Graphics (SVG)</title>
        <img src="http://upload.wikimedia.org/wikipedia/commons/6/6e/Rgb-raster-image.png" title="Raster image" style="float: right; margin: 25px"/>
        <ul>
          <li>JPEG, GIF and PNG are <a href="http://en.wikipedia.org/wiki/Raster_graphics">raster</a> formats</li>
          <ul><li>they represent pictures using a grid of pixels</li></ul>
	  <li>SVG is a <a href="http://en.wikipedia.org/wiki/File:Bitmap_VS_SVG.svg">vector</a> format</li>
          <ul>
            <li>it represents pictures as combinations of lines and shapes</li>
            <li>the lines and shapes are defined using XML</li>
            <li>cannot be used for photographic images</li>
          </ul>
          <li>SVG has been a W3C recommendation since 2003 but only recently started getting widespread browser support</li>
        </ul>
      </slide>
      <slide>
        <title>SVG Demos</title>
        <ul>
          <li><a href="http://svg-edit.googlecode.com/svn/branches/2.4/editor/svg-editor.html">Web-based SVG editor</a></li>
          <li><a href="http://www.w3.org/1999/09/SVG-access/tiger.png">PNG tiger</a> vs. <a href="http://codinginparadise.org/projects/svgweb/samples/demo.html?name=tiger&amp;svg.render.forceflash=false">SVG tiger</a></li>
          <li><a href="http://vis.uell.net/gsvg/poppyr.html">Population graphs</a></li>
          <li><a href="http://vis.uell.net/gsvg/electionAtlasGermany.html">Voting maps</a></li>
          <li><a href="http://svg-wow.org/audio/animated-lyrics.svg">Animated lyrics</a> (Safari &amp; Chrome only)</li>
          <li><a href="http://svg-wow.org/photoAlbum/light-table.svg">Light table</a></li>
          <li><a href="http://people.mozilla.com/~prouget/demos/svg/foreignobject.svg">Embedded browser</a> (Firefox only)</li>
        </ul>
      </slide>
      <slide id="canvas">
        <title>Canvas</title>
        <ul>
          <li>Canvas not a format, it is a new HTML element</li>
          <li>It creates an area in an HTML page which can be drawn on using Javascript commands</li>
          <li>Demos:</li>
          <ul>
            <li><a href="http://htmlfive.appspot.com/static/draw.html">Drawing pad</a></li>
            <li><a href="http://htmlfive.appspot.com/static/gifter.html">First-person gifter</a></li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>SVG vs. Canvas</title>
        <ul>
          <li>SVG and Canvas are complementary technologies</li>
          <li>SVG:</li>
          <ul>
            <li>import and export from tools like <a href="http://inkscape.org/">Inkscape</a> and <a href="http://www.adobe.com/products/illustrator/">Illustrator</a></li>
            <li>easier to create interfaces that can be interacted with via the mouse (such as charts and graphs)</li>
            <li>basic animation is easy, advanced animation is hard</li>
          </ul>
          <li>Canvas</li>
          <ul>
            <li>can do sophisticated animation (such as video games)</li>
            <li>no mouse interaction, just keyboard</li>
          </ul>
          <li>It often makes sense to combine the two</li>
          <ul><li><a href="http://www.mozilla.com/en-US/firefox/stats/">Firefox stats</a></li></ul>
        </ul>
      </slide>
    </part>
    <part id="web-video+audio">
      <title>Video and Audio on the Web</title>
      <slide>
        <title>Codecs and Containers</title>
        <ul>
          <li>A <strong>codec</strong> is an algorithm used to compress a digital audio or video signal</li>
          <li>A <strong>container format</strong> is a particular file format used to deliver compressed audio or video</li>
          <ul>
            <li>An audio container usually just contains one compressed audio track, plus metadata</li>
            <li>A video container may contain multiple video and audio tracks, captions or subtitles, plus metadata</li>
          </ul>
          <li>Note that we do not make a distinction between codec and container for <link href="web-images">digital images</link></li>
          <ul>
            <li>for example a PNG file can only hold PNG-compressed image data</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Codecs and Containers</title>
        <center>
          <img src="http://www.w3.org/2008/01/video-container.png"/>
        </center>
      </slide>
      <slide id="streaming">
        <title>Download vs. Streaming</title>
        <ul>
          <li>Web resources usually are downloaded</li>
          <ul>
            <li>browsers may choose to implement incremental rendering (e.g., HTML or images)</li>
            <li>the resource is completely downloaded and stored</li>
          </ul>
          <li><em href="http://en.wikipedia.org/wiki/Streaming_media">Streaming</em> means that there is no complete download</li>
          <ul>
            <li>TV and phone calls are classical examples of streaming</li>
            <li>some data sources cannot be downloaded (e.g., a live web cam)</li>
          </ul>
          <li>Streaming often is also used because of security issues</li>
          <ul>
            <li>downloads make it easy to get content and redistribute it</li>
            <li>streaming makes redistribution much harder (content must be <a href="http://en.wikipedia.org/wiki/Destreaming">destreamed</a>)</li>
            <li>the data formats for streaming are often undisclosed</li>
          </ul>
        </ul>
      </slide>
      <slide id="audio">
        <title>Audio on the Web</title>
        <ul>
          <li>Internet radios such as <a href="http://www.pandora.com/">Pandora</a> often use Flash</li>
          <ul>
            <li>they are standalone applications running in a browser</li>
            <li>content is often delivered via HTTP to circumvent firewalls</li>
          </ul>
          <li>Audio formats exist in many different variations</li>
          <ul>
            <li><em href="http://en.wikipedia.org/wiki/MP3">MPEG1 Layer 3 (MP3)</em> was the first widely supported audio format</li>
            <li>audio streaming formats often use much less bandwidth</li>
          </ul>
        </ul>
      </slide>
      <slide id="video">
        <title>Video on the Web</title>
        <ul>
          <li>Unlike audio, where MP3 quickly became standard, video codecs and containers proliferated without a clear standard</li>
          <li>Until a few years ago (2005-2006) it was still common for sites to offer video in multiple formats, or to exclude certain operating systems</li>
          <li>In 2002, Macromedia added video support to Flash</li>
          <ul>
            <li>The widespread availability of the Flash plugin (99% of browsers) made it a good choice for distributing video on the Web</li>
            <li>In 2005, the phenomenal success of YouTube made Flash video the de facto standard</li> 
          </ul>
        </ul>
      </slide>
      <slide id="html5-av">
        <title>Audio &amp; Video in HTML5</title>
        <ul>
          <li>HTML5 added <htmel>audio</htmel> and <htmel>video</htmel> elements</li>
          <li>Browsers that support these (Firefox, Safari, Chrome, Opera) can play video and audio without Flash</li>
          <li>The browser must also support the <em>container</em> and <em>codec</em> used</li>
          <ul>
            <li>Firefox only supports the free <a href="http://en.wikipedia.org/wiki/Ogg">Ogg</a> container and its free codecs</li>
            <li>Safari only supports what can be played through Quicktime (i.e. not Ogg)</li>
            <li>HTML5 authors can specify multiple source files for an audio or video element to handle this situation</li>
          </ul>
          <li>Now there is finally a credible alternative to Flash for audio and video on the Web</li>
        </ul>
      </slide>
      <slide>
        <title>HTML5 Video Demos</title>
        <ul>
          <li><a href="http://htmlfive.appspot.com/static/video.html">Basic video playback</a></li>
          <li>Filtering, clipping and transforming video with CSS and SVG</li>
          <ul>
            <li><a href="http://people.mozilla.com/~prouget/demos/mashup/video.xhtml">demo 1</a></li>
            <li><a href="http://people.mozilla.com/~prouget/demos/round/index.xhtml">demo 2</a></li>
          </ul>
          <li><a href="http://people.mozilla.com/~prouget/demos/DynamicContentInjection/play.xhtml">Injecting content into video</a></li>
        </ul>
      </slide>
    </part>
    <slide>
      <title>Conclusions</title>
      <ul>
        <li>Image formats serve different purposes on the Web</li>
        <ul>
          <li>PNG for graphics and JPEG for photographic images</li>
          <li>GIF should be avoided (still required for animated images)</li>
        </ul>
        <li>Until recently, audio and video had to be handled via a plugin (usually Flash)</li>
        <li>With HTML5, there is finally native support for audio and video in the Web</li>
      </ul>
    </slide>
  </presentation>

<!-- END 12 Multimedia -->



<!-- BEGIN 13 State Management (Cookies) -->

  <presentation id="cookies">
    <title short="Cookies">State Management (Cookies)</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://computer.howstuffworks.com/cookie.htm/printable" title="How Stuff Works: Cookies">HowStuffWorks</a>&#160;· <a href="http://www.youtube.com/watch?v=siOHh0uzcuY#t=33m10s">Databases in HTML5</a></toc>
    <toc class="resources"><a href="http://tools.ietf.org/html/rfc2965" title="IETF RFC 2965: HTTP State Management Mechanism">Cookie Spec</a>&#160;· <a href="http://en.wikipedia.org/wiki/HTTP_cookie" title="Wikipedia: HTTP Cookie">Wikipedia</a>&#160;· <a href="http://www.httpviewer.net/" title="Interactive HTTP Viewer Tool">HTTP Viewer</a>&#160;· <a href="http://dev.w3.org/html5/webstorage/">HTML5 Web Storage</a></toc>
    <toc class="abstract">HTTP is a stateless protocol, where each request/response interaction is a separate interaction and there is no protocol support for longer sessions (such as a user logging in and working on a Web site as an identified user). State management refers to mechanisms which provide support for this kind of scenario, the most popular choice for state management are <em>cookies</em>. Another possibility is URI-based state management. The newest option for storing state is HTML5 Web Storage. This lecture is also a glimpse into the world of <em>Representational State Transfer (REST)</em>, the Web's fundamental model of handling interaction with resources.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <part id="session">
      <title>Session</title>
      <slide>
        <title>HTTP and Sessions</title>
        <ul>
          <li>A <em>session</em> is an ongoing exchange of information, where later parts of the exchange depend on earlier parts</li>
          <ul>
            <li>for example: buying an airline ticket from a travel web site</li>
          </ul>
          <li>The current status of a session is referred to as its <em>state</em></li>
          <ul>
            <li>for example: user has selected a specific flight for the outgoing leg of a round-trip flight, but has not yet selected a flight for the return leg</li>
          </ul>
          <li>HTTP has no session concept</li>
          <ul>
            <li>interactions are HTTP individual request/response pairs and not "site visits"</li>
            <li><link href="http-performance">HTTP/1.1</link> does not change this, it is only a performance optimization</li>
            <li>servers can not reliably identify users interacting with a Web site</li>
          </ul>
          <li>Sessions have to be handled at the level of Web applications built on top of HTTP</li>
        </ul>
      </slide>
      <slide>
        <title>Keeping Track of Session State</title>
        <ul>
          <li>Information about the current state of a session has to be stored someplace</li>
          <li>With <strong>server-side sessions</strong>, the state is stored by the web server</li>
          <ul>
            <li>OK when there is just one web server, but most large web sites have many servers</li>
            <li>either these servers have to share all the same state information, or a user has to keep connecting to the same server throughout the session</li>
            <li>both of these are problematic</li>
          </ul>
          <li>With <strong>client-side sessions</strong>, the state is stored by the client (web browser)</li>
          <ul>
            <li>the browser has all relevant information about a session</li>
            <li>when the server restarts, no information will be lost</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Keeping Track of Session State</title>
        <ul>
          <li>Three basic approaches are possible</li>
          <ol>
            <li>sending back and forth state as part of every request and response</li>
            <li>store state in the server and refer to it from the client</li>
            <li>treat state as a resource: store state at a URI and use the URI to refer to that state</li>
          </ol>
        </ul>
      </slide>
      <slide>
        <title>State in HTML or HTTP</title>
        <img style="width : 90% ; margin : 2% ; " src="web-app-client-state.png" title="State in HTML or HTTP"/>
      </slide>
      <slide>
        <title>State in the Server Application</title>
        <img style="width : 90% ; margin : 2% ; " src="web-app-server-state.png" title="State in the Server Application"/>
      </slide>
      <slide>
        <title>State as a Resource</title>
        <img style="width : 90% ; margin : 2% ; " src="web-app-resource-state.png" title="State as a Resource"/>
      </slide>
      <slide>
        <title>Stateless Shopping</title>
        <ul>
          <li>Typical <q>session scenarios</q> can be <a href="http://www.peej.co.uk/articles/no-sessions.html">mapped to resources</a></li>
          <ul>
            <li>Client: Show me your products</li>
            <li>Server: Here's a list of all the products</li>
            <li>Client: I'd like to buy 1 of http://ex.org/product/X, I am "John"/"Password"</li>
            <li>Server: I've added 1 of http://ex.org/product/X to http://ex.org/users/john/basket</li>
            <li>Client: I'd like to buy 1 of http://ex.org/product/Y, I am "John"/"Password"</li>
            <li>Server: I've added 1 of http://ex.org/product/Y to http://ex.org/users/john/basket</li>
            <li>Client: I don't want http://ex.org/product/X, remove it, I am "John"/"Password"</li>
            <li>Server: I've removed http://ex.org/product/X to http://ex.org/users/john/basket</li>
            <li>Client: Okay I'm done, username/password is "John"/"Password"</li>
            <li>Server: Here is the total cost of the items in http://ex.org/users/john/basket</li>
          </ul>
          <li>This is more than just renaming <q>session</q> to <q>resource</q></li>
          <ul>
            <li>all relevant data is stored persistently on the server</li>
            <li>the shopping cart's URI can be used by other services for working with its contents</li>
            <li>instead of <em>hiding the cart in the session</em>, it is <em>exposed as a resource</em></li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Reusing Resources</title>
        <img style="width : 90% ; margin : 2% ; " src="web-app-reusing-resource.png" title="Reusing Resources"/>
      </slide>
    </part>
    <part id="cookie">
      <title>Cookie</title>
      <slide>
        <title>Tracking Sessions with Cookies</title>
        <ul>
          <li>Invented as a way to compensate for HTTP's lack of state</li>
          <ul>
            <li>session state is sent to the browser as a small file called a <em>cookie</em></li>
            <li>the browser sends the cookie back to the server with each request</li>
          </ul>
          <li>Cookies do not contain code that is executed</li>
          <ul>
            <li>some data that represents session state (by value or by reference)</li>
            <li>this data is stored by the browser and returned to the server</li>
            <li>the browser is not supposed to interpret the data in any way</li>
          </ul>
          <li>Any server to which a browser makes a request can send back a cookie with the response</li>
        </ul>
      </slide>
      <slide>
        <title>Cookies for State Management</title>
        <img style="width : 90% ; margin : 2% ; " src="web-app-cookie-state.png" title="Cookies for State Management"/>
      </slide>
      <part>
        <title>Third-Party Cookie</title>
        <slide>
          <title>Advertising &amp; Privacy</title>
          <ul>
            <li>Big ad servers are digital hubs in the commercial Web</li>
            <ul>
              <li>consumers switch content providers but get the same ad provider</li>
              <li>tracking consumers <em>across</em> content providers is very valuable</li>
            </ul>
            <li>Cookies set by ad providers are sent very frequently</li>
            <ul>
              <li>each site that uses the ad provider triggers the cookies to be sent</li>
              <li>detailed profiling can be employed for creating consumer profiles</li>
            </ul>
            <li>Content and ad providers can cooperate for better profiling</li>
            <ul>
              <li>consumers log in to content providers are reliably identified</li>
              <li>their personal profile can be matched with the ad provider's profile</li>
              <li>ad provider consolidation makes this scenario realistic</li>
            </ul>
          </ul>
        </slide>
        <slide>
          <title>Browsers Assemble Web Pages</title>
          <p>Typical Web resources (HTML pages) are assembled from a number of resources retrieved by HTTP. Any resource not originating on the server that is hosting the HTML page is considered a <q>third-party resource</q>. If the HTTP response for such a resource contains a cookie, it is a <q>third-party cookie</q>.</p>
          <img style="width : 90% ; margin : 2% ; " src="third-party-cookie.png" title="Third Party Cookie"/>
        </slide>
        <slide>
          <title>Disabling Third-Party Cookies</title>
          <center>
            <img src="img/disabling-third-party-cookies-safari.png"/>
            <img src="img/disabling-third-party-cookies-firefox.png"/>
          </center>
        </slide>
      </part>
    </part>
    <part>
      <title>Tracking Sessions in Query Strings</title>
      <slide>
        <title>Cookie Support</title>
        <ul>
          <li>Authentication can be tracked with <link href="http-authentication"/></li>
          <ul>
            <li>this is possible because authentication is built into HTTP</li>
          </ul>
          <li>Other session concepts are not supported by HTTP</li>
          <ul>
            <li>cookies have become the generic solution for all session tracking</li>
          </ul>
          <li>Cookies are increasingly limited by browsers</li>
          <ul>
            <li>cookies have gained some notoriety as privacy invaders</li>
            <li>browsers have more restrictive default settings</li>
            <li>an increasing number of users restricts cookie support</li>
          </ul>
          <li>Session-oriented Web sites often depend on cookies</li>
        </ul>
      </slide>
      <slide id="uri-rewriting">
        <title>URI Rewriting</title>
        <ul>
          <li><link href="cookie"/>s are a piece of information stored on the client</li>
          <ul>
            <li>they are sent by the server as a result of a request</li>
            <li>they are returned by the browser in a response to the same site</li>
          </ul>
          <li>The same information can also be encoded in the URI</li>
          <ul>
            <li>normally a response contains a cookie and an HTML page</li>
            <li>the same effect is achieved when all links include the <q>cookie value</q></li>
            <li>this method often results in very long URIs</li>
          </ul>
          <li>Some Web application frameworks switch automatically</li>
          <ul>
            <li>J2EE checks for cookie support and switches to URI rewriting if required</li>
          </ul>
          <li>Problems with bookmarks and caches</li>
        </ul>
      </slide>
      <slide>
        <title>Hidden Form Fields</title>
        <ul>
          <li><link href="cookie"/>s transmit session information via HTTP</li>
          <li><link href="uri-rewriting"/> encodes session information in URIs</li>
          <li><link href="forms"/> are a way to send data to a server</li>
          <ul>
            <li>in most cases this is data that is entered by the user</li>
          </ul>
          <li>Hidden form fields can be used to send data that is part of the HTML</li>
          <ul>
            <li>hidden form fields are never displayed to the user</li>
            <li>their predefined values are sent as part of the form submission</li>
          </ul>
          <li>Hidden form fields are essentially the same as <link href="uri-rewriting"/></li>
          <ul>
            <li>they can only be used if the interaction is based on forms</li>
            <li>they also require the Web page to be dynamically generated for each request</li>
            <li>the values end up as URI query string or request entity</li>
          </ul>
        </ul>
      </slide>
    </part>
    <part>
      <title>HTML5 Web Storage</title>
      <slide> 
        <title>Problems with Cookies</title>
        <ul>
          <li>Multiple browser windows</li>
          <ul>
            <li>Suppose I am buying two different plane tickets from the same site, with two different browser windows open</li>
            <li>Both windows send back the same cookies</li>
            <li>No way for the site to distinguish two different sessions</li>
          </ul>
          <li>Large amounts of "state" data</li>
          <ul>
            <li>Examples: offline access to web-based email or web-based documents (e.g. Gmail or Google Docs)</li>
            <li>A "session" may stretch over many days and multiple windows</li>
            <li>Too much data to send back and forth with every request and response</li>
          </ul>
        </ul>
      </slide>
      <slide id="web-storage">
        <title>HTML5 Web Storage</title>
        <ul>
          <li>Intended to address these problems with cookies</li>
          <li>Client data is <a href="http://html5demos.com/storage">stored</a> in a database in the web browser</li>
          <li>Two kinds of storage</li>
          <ul>
            <li><em>session storage</em> is meant to address the multiple-window problem</li>
            <li><em>local storage</em> is meant to address the offline data problem</li>
          </ul>
        </ul>
      </slide>
    </part>
    <slide>
      <title>Conclusions</title>
      <ul>
        <li>Sessions should only be used for application state</li>
        <li>Cookies are the best way to track sessions</li>
        <li>Alternative methods are URI rewriting and hidden form fields</li>
      </ul>
    </slide>
  </presentation>

<!-- END 13 State Management (Cookies) -->



<!-- BEGIN 14 Client-side Scripting -->

  <presentation id="scripting">
    <title short="Scripting">Client-side Scripting</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://proquest.safaribooksonline.com/9780596527747/chapter_1_the_interactive_web">The Interactive Web</a></toc>
    <toc class="resources"><a href="http://domscripting.com/book/sample/" title='Sample Chapter from "DOM Scripting": Best Practices'>Best Practices</a>&#160;· <a href="http://www.webteacher.com/javascript/" title="JavaScript Tutorial">Tutorial</a>&#160;· <a href="http://en.wikipedia.org/wiki/Dynamic_HTML" title="Wikipedia: Dynamic HTML (DHTML)">Wikipedia</a></toc>
    <toc class="abstract">Scripting is used on the majority of today's modern Web sites. Scripting can be used to improve the usability and accessibility of a Web site (for example for <em>validating form data on the client side</em>), it can vastly improve the user experience with new interface design (the <em>smooth scrolling of Google Maps</em> vs. older <q>click to scroll</q> map services), or it can be used to implement behavior that would be impossible without scripting (for example the <em>online applications of Google Docs</em>). This introductory lecture looks into scripting fundamentals such as JavaScript itself, the <em>Document Object Model (DOM)</em> for accessing the browser window's content, and <code>XMLHttpRequest</code> for script-server communications.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <slide>
      <title>Scripting on the Web</title>
      <ul>
        <li>Web pages were static HTML</li>
        <ul>
          <li><link href="forms"/> were the only interactive part of Web pages</li>
          <li>interaction was only possible by clicking links and visiting new pages</li>
          <li>CSS introduced limited dynamic behavior (such as <code>mouseOver</code> events)</li>
        </ul>
        <li>Netscape invented the <link href="dom"/> and <em>LiveScript</em></li>
        <ul>
          <li><a href="http://en.wikipedia.org/wiki/Java_(programming_language)">Java</a> was new and hip, so the language was renamed to <link href="javascript"/></li>
          <li>pages with scripting (a.k.a. <em>Dynamic HTML</em> or <em>DHTML</em>) allowed richer user interfaces</li>
          <li>other browsers invented their own <q>versions</q> of DOM/JavaScript</li>
        </ul>
        <li>Scripting was and is often used to implement <q>missing functionality</q></li>
        <ul>
          <li>good scripting supports graceful degradation (leaving the page functional)</li>
          <li>bad scripting compromises accessibility when the scripting code does not work</li>
        </ul>
        <li>Any non-trivial scripting has to deal with browser differences</li>
        <ul>
          <li><link href="js-frameworks"/> help by providing a foundation to build on</li>
        </ul>
      </ul>
    </slide>
    <slide id="dhtml">
      <title>Basic Scripting (DHTML)</title>
      <listing src="nicetitle.html" title="Improving the mouseOvers for HTML title attributes (HTML)"/>
    </slide>
    <slide>
      <title>Basic Scripting (JavaScript)</title>
      <listing src="nicetitle.js" line="18-32" title="Improving the mouseOvers for HTML title attributes (JavaScript)"/>
      <listing src="nicetitle.js" line="78-84" title="Improving the mouseOvers for HTML title attributes (JavaScript)"/>
    </slide>
    <slide>
      <title>Basic Scripting (CSS)</title>
      <listing src="nicetitle.css" title="Improving the mouseOvers for HTML title attributes (CSS)"/>
    </slide>
    <part id="javascript">
      <title>JavaScript</title>
      <slide>
        <title>Browsers are Platforms</title>
        <ul>
          <li><em>Runtime environments</em> are critical for running applications</li>
          <ul>
            <li>popular computer environments are Windows, MacOS, Linux, and Java</li>
            <li>popular mobile environments are iPhone, Android, Blackberry, S60, and JavaME/JavaFX</li>
            <li>popular Web-based environments are JavaScript, Flash, and Java applets</li>
            <li>popular Web-oriented environments are Silverlight and AIR</li>
          </ul>
          <li>JavaScript is a scripting language supported by most browsers</li>
          <ul>
            <li>access to the current document's <link href="dom">DOM</link> is the most important part of DHTML</li>
            <li>JavaScript has code, functions, and interacts with the user through the browser</li>
          </ul>
        </ul>
        <pre>&lt;p>It is &lt;script type="text/javascript">
        var currentTime = new Date() ;
        document.write(currentTime.getHours() + ":" + currentTime.getMinutes()) ;
        &lt;/script> hours&lt;/p>
        </pre>
        <pre>&lt;p>It is <script type="text/javascript">
        var currentTime = new Date() ;
        document.write(currentTime.getHours() + ":" + currentTime.getMinutes()) ;
        </script> hours&lt;/p>
        </pre>
      </slide>
      <slide>
        <title>Compiled vs. Interpreted Languages</title>
        <ul>
          <li>Programming languages can be <em>compiled</em> or <em>interpreted</em></li>
          <li><em>Compilers</em> can do more than just translate</li>
          <ul>
            <li>compiled languages are translated before they can be executed</li>
            <li>check the code for errors that can be determined statically</li>
            <li>augment the code for performance or analysis purposes</li>
          </ul>
          <li><em>Interpreters</em> provide a less heavyweight environment</li>
          <ul>
            <li>interpreted languages can be executed directly</li>
            <li>any change in the code can be tested immediately</li>
            <li>less tightly coupled software bundles than compiled packages</li>
          </ul>
          <li><em>Scripting</em> has become much more popular in the past years</li>
          <ul>
            <li>server-side languages such as PHP, Ruby/Rails, and Python</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>JavaScript and Browsers</title>
        <ul>
          <li>Scripting used to be <q>too slow for serious applications</q></li>
          <ul>
            <li>processors have become much faster</li>
            <li>language interpreters have become much smarter</li>
          </ul>
          <li>Implementations now deliver high-performance scripting</li>
          <ul>
            <li>Safari uses <a href="http://trac.webkit.org/wiki/SquirrelFish">the SquirrelFish JavaScript engine</a></li>
            <li>Chrome uses <a href="http://code.google.com/p/v8/">the V8 JavaScript engine</a></li>
          </ul>
          <li>Modern implementations allow sophisticated applications</li>
          <ul>
            <li><a href="http://docs.google.com/">Google Docs</a> is a set of browser-based <q>desktop applications</q></li>
            <li><a href="http://ejohn.org/blog/processingjs/">Processing.js</a> is a JavaScript version of a popular visualization environment</li>
          </ul>
        </ul>
      </slide>
    </part>
    <part id="dom">
      <title short="DOM">Document Object Model (DOM)</title>
      <slide>
        <title>From HTML to DOM</title>
        <ul>
          <li><link href="html">HTML</link> is a representation for hypermedia documents</li>
          <ul>
            <li>a representation is required to store and transmit the document</li>
            <li>HTML uses markup for representing the document structure</li>
          </ul>
          <li>Browsers must render HTML documents (i.e., apply CSS and execute JavaScript)</li>
          <ol>
            <li><http>GET</http> HTML from server and receive as <mime>text/html</mime> document</li>
            <li>parse document and deal with any errors by <q>fixing them</q></li>
            <li>interpret document as if it had been error-free</li>
            <li><http>GET</http> all additional resources (CSS, images, JavaScript, …)</li>
            <li>build internal model (DOM) based on error-free interpretation</li>
            <li>apply CSS rules to determine styling of document (e.g., margins and font sizes)</li>
            <li>render into visual structure</li>
            <li>start executing JavaScript code</li>
            <li>listen for events (keyboard, mouse, timer) and execute code</li>
            <li>discard everything and start over when user navigates to a different page</li>
          </ol>
        </ul>
      </slide>
      <slide>
        <title>Browser Handling of HTML</title>
        <img style="width : 90% ; margin : 2% ; " src="html-parser.png" title="Browser Handling of HTML"/>
      </slide>
      <slide>
        <title>Elements, Objects, and Boxes</title>
        <table width="95%">
          <tr>
            <td><img style="width : 90% ; margin : 2% ; " src="list-boxes.png" title="Boxes for List Items" href="http://www.w3.org/TR/CSS21/box.html#mpb-examples"/></td>
            <td><img style="width : 90% ; margin : 2% ; " src="list-boxes-spacing.png" title="Spacing around Boxes for List Items" href="http://www.w3.org/TR/CSS21/box.html#mpb-examples"/></td>
          </tr>
        </table>
      </slide>
      <slide>
        <title>Document</title>
        <ul>
          <li>The document (HTML) is the <em>interface language for Web applications</em></li>
          <li>Most programming environments have visual interface models</li>
          <ul>
            <li>almost everything has moved to <em>window-oriented interfaces</em></li>
            <li>Windows, MacOS, and Linux provide similar visual metaphors</li>
          </ul>
          <li>Web applications must use HTML as their model for the interface</li>
          <ul>
            <li><link href="forms"/> are a simple way to build an interface</li>
            <li>forms can be extended with client-side helpers (validation, repeating entries)</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Object</title>
        <ul>
          <li>Documents are static, programming is dynamic</li>
          <ul>
            <li>documents and code must be connected</li>
            <li><em>objects</em> are a common abstraction in programming languages</li>
          </ul>
          <li>Objects usually have a <em>type</em> and <em>methods</em></li>
          <ul>
            <li><em>types</em> for HTML-based objects are based on HTML's elements</li>
            <li><em>methods</em> define the allowed to interact with objects</li>
            <li>interactions can be read-only or they can change the document structure</li>
          </ul>
        </ul>
        <listing src="nicetitle.js" line="22-32" title="Improving the mouseovers for HTML title attributes (JavaScript)"/>
      </slide>
      <slide> 
	      <title>DOM - Document Object Model</title>
	      <center>
		      <img src="img/htmltree.gif"/>
             </center>
	     <br>
	     <ul> 
		<li><a href="http://www.w3.org/TR/CSS21/conform.html#img-doctree"> Document tree</a> </li>
		<li><a href ="http://www.w3.org/TR/CSS21/images/longdesc/doctree-desc.html">Nodes</a></li>
		<li><a href ="http://www.quirksmode.org/dom/intro.html">Node Tutorial</a>
	     </li>
	     </ul>
     </br>
      </slide>
      <slide>
        <title>Model</title>
        <ul>
          <li>Models are idealized/abstract representations of something</li>
          <li>Models allow to share that idealized/abstract view</li>
          <li>DOM introduced a <em>common way of how browsers deal with HTML</em></li>
          <ul>
            <li>without a DOM, there can be no interoperable scripting</li>
          </ul>
          <li>Abstractions are also limitations</li>
          <ul>
            <li>some vendors introduced/supported <q>extensions</q> to the basic DOM model</li>
            <li>any code based on these extensions is not interoperable</li>
          </ul>
          <li>DOM is under constant revision</li>
          <ul>
            <li>DOM0 was invented by Netscape (backing the LiveScript/JavaScript)</li>
            <li>DOM1 was the first DOM version produced by the W3C</li>
            <li>DOM2 is the currently available stable version of DOM</li>
            <li>DOM3 is highly modularized and still under development</li>
          </ul>
        </ul>
      </slide>
    </part>
    <part id="ajax-basis">
	    <slide> <title>AJAX</title>
		    <ul>
		    <li>Asynchronous: GET and POST requests can be completed in the background</li>
		    <li>JavaScript: ECMA script is used to access the DOM</li>
		    <li>XML is the recommended document language implementation, no longer the case (JSON, HTML)</li>
		    </ul>
	    </slide>
      <title>Ajax Basics</title>
      <slide>
        <title>Ajax = DHTML + HTTP</title>
        <ul>
          <li><link href="dhtml"/> uses JavaScript <q>locally</q></li>
          <ul>
            <li>the scripting code reacts to user events and accesses the DOM structure</li>
            <li>changes are either hardcoded or derived from user events</li>
          </ul>
          <li>Ajax adds an <link href="http-request">HTTP request</link> method to JavaScript</li>
          <ul>
            <li>scripting code can now request additional data from an HTTP server</li>
            <li>changes can thus be made based on any data received from the server</li>
          </ul>
          <li>Ajax dramatically reduces the number of page reloads</li>
          <ul>
            <li>any change of the page can be done without a complete reload</li>
            <li>based on user interactions, parts of the page can be reloaded</li>
          </ul>
          <li>Ajax has the same interoperability problems as DHTML</li>
        </ul>
      </slide>
      <slide>
        <title>Ajax and DHTML</title>
        <img style="width : 90% ; margin : 2% ; " src="ajax.png" title="Comparison of Ajax and DHTML"/>				
      </slide>
    </part>
    <part id="js-frameworks">
      <title>JavaScript Frameworks</title>
      <slide>
        <title>Abstraction and Reality</title>
        <ul>
          <li>Browsers are not entirely standards-compliant</li>
          <ul>
            <li><a href="http://www.acidtests.org/">Acid Tests</a> are a way how to test browser compliance</li>
            <li>compliance depends on what you test for (versions of the standards)</li>
          </ul>
          <li>Running <a href="http://acid3.acidtests.org/">Acid3</a> for current browsers is disappointing</li>
          <ul>
            <li>Chrome and Safari are equal (because they both use <a href="http://webkit.org/">WebKit</a></li>
            <li>Firefox and Opera are not that bad (but not perfect)</li>
            <li>IE8 is a disaster</li>
          </ul>
          <li>In some cases, implementations have to make guesses</li>
          <ul>
            <li>complex combinations of HTML, CSS, and JavaScript interactions</li>
          </ul>
          <li>JavaScript frameworks have two major functions</li>
          <ol>
            <li>hiding the fact that browsers need a lot of special case handling</li>
            <li>providing support for common Web design patterns</li>
          </ol>
        </ul>
      </slide>
      <slide>
        <title>Web Design Patterns</title>
        <ul>
          <li>Many Web pages use similar ideas/visualizations</li>
          <li>Factoring them into <em>design patterns</em> enables tool support</li>
          <li>Providing access to a tree-structured set of resources</li>
          <ul>
            <li><a href="http://developer.yahoo.com/yui/examples/treeview/folder_style.html">folder views</a> are a common design pattern</li>
          </ul>
          <li>Displaying image captions based on mouse events</li>
          <ul>
            <li><a href="http://masterfidgeter.com/projects/captify/">dynamic image captions</a> help merging images and their captions</li>
          </ul>
          <li>Tabs are well-known from desktop applications and popular in Web design</li>
          <ul>
            <li><a href="http://extjs.com/deploy/dev/examples/tabs/tabs.html">Ajax Tabs</a> can even load content dynamically</li>
          </ul>
          <li>Image-heavy Web sites might need image viewing support</li>
          <ul>
            <li><a href="http://demos.dojotoolkit.org/demos/cropper/">image zooming</a> can make it more convenient to zoom into images</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Popular Frameworks</title>
        <ul>
          <li>Different needs produce different frameworks</li>
          <ul>
            <li><a href="http://www.dojotoolkit.org/">Dojo</a></li>
            <li><a href="http://extjs.com/">Ext JS</a></li>
            <li><a href="http://jquery.com/">jQuery</a></li>
            <li><a href="http://developer.yahoo.com/yui/">Yahoo! Interface Library</a></li>
          </ul>
          <li>There is no such thing as the <q>best JavaScript framework</q></li>
          <ul>
            <li>for any given project, decide on the support you need</li>
            <li>evaluate frameworks for the support they provide</li>
            <li>evaluate for <em>functional requirements</em> (<q>is there a collapse/expand folder view?</q>)</li>
            <li>evaluate for <em>non-functional requirements</em> (<q>is the framework openly licensed</q>)</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Important Framework Questions</title>
        <ul>
          <li>How big is it?</li>
          <li>How is it licensed?</li>
          <li>How is it maintained?</li>
          <li>How well does it support graceful degradation?</li>
          <li>How well does it mix with other JavaScript code?</li>
          <li>For professional Web development, don't overuse effects</li>
        </ul>
      </slide>
    </part>
    <slide>
      <title>Conclusions</title>
      <ul>
        <li>Scripting has become as essential part of Web-based applications</li>
        <li>DHTML is local scripting, Ajax is scripting + server access</li>
        <li>Deciding between client-side and server-side is hard</li>
        <li>JavaScript frameworks help developing script-based applications</li>
        <li>Graceful degradation becomes more important on the mobile Web</li>
      </ul>
    </slide>
  </presentation>

<!-- END 14 Client-side Scripting -->



<!-- BEGIN 15 Anatomy of an Advanced Web Application -->

  <presentation id="webapps-advanced">
    <title short="Advanced Web Apps">Anatomy of an Advanced Web Application</title>
    <date>[INSERT DATE HERE]</date>
     <toc class="reading"> <a href="http://www.adaptivepath.com/ideas/e000385"> AJAX </a>&#160;· <a href="http://code.google.com/edu/ajax/tutorials/ajax-tutorial.html">AJAX Tutorial </a>&#160;· <a href="http://en.wikipedia.org/wiki/XMLHttpRequest"> XMLHttpRequest </a>&#160;· <a href="http://en.wikipedia.org/wiki/JQuery">jQuery</a> </toc>
    <toc class="resources"><a href="http://en.wikipedia.org/wiki/JSON">JSON</a>&#160;· <a href="http://en.wikipedia.org/wiki/Web_service">Web service</a></toc>
    <toc class="abstract">The widespread adoption of client-side scripting and AJAX techniques has resulted in web applications becoming easier use but harder to understand. No longer is it the case that HTML is used simply to present a document to be read. Now HTML, Javascript and CSS are used together to build dynamic applications that run in the browser. These applications often depend on APIs, resources intended for use by programs rather than people.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <part>
      <title>Getting Advanced</title>
      <slide>
        <title>AJAX Flow Diagram</title>
        <center>
          <img src="img/ajax-diagram.png"/>
        </center>
        <pre>Courtesy of http://loadstorm.com/2009/load-testing-ajax-loadstorm</pre>
      </slide>
      <slide>
        <title>AJAX Auto Complete with JQuery(JavaScript)/PHP/Mysql</title>
        <ul>
        <li>JQuery (JS library) connects to php script through form input string</li>
        <li>PHP (serverside) connects to database </li>
        <li>Mysql(serverside) process data request and returns values from db</li>
        <pre>Demo <a href="https://elearning.uh.edu/ajax/index.htm"> auto-complete </a> on Fedora Core 14 (Laughlin) running Apache 2, PHP 5.3.6, Mysql 5</pre>
        <li>AJAX <a href="https://elearning.uh.edu/ajax/index.htm"> Countries </a> auto complete (Courtesy of <a href="http://www.nodstrum.com/2007/09/19/autocompleter/"> Nodstrum </a>) </li>
        </ul>
      </slide>
      <slide id="api">
        <title>Web Service APIs</title>
        <ul>
          <li>These two resources compose a very simple <a href="http://en.wikipedia.org/wiki/Application_programming_interface">Application Programming Interface</a></li>
          <li>An API is an interface intended for use by programs rather than people</li>
          <ul>
            <li>people use UIs (User Interfaces)</li>
          </ul>
          <li>There are <a href="http://www.programmableweb.com/apis/directory">thousands</a> of Web APIs</li>
          <li><a href="http://en.wikipedia.org/wiki/Mashup_(web_application_hybrid)">Mashups</a> combine data from multiple APIs to create a new application</li>
          <ul>
            <li>example: <a href="http://joesmap.org">Craigslist and Google Maps</a></li>
          </ul>
          <li>Web APIs are built using URIs and HTTP just like Web UIs are</li>
          <ul>
            <li>Representations are different: XML or <link href="json">JSON</link> rather than HTML</li>
          </ul>
        </ul>
      </slide>
      <slide id="json">
        <title>Javascript Object Notation (JSON)</title>
        <ul>
          <li>JSON is a very simple text format for sending data over HTTP</li>
          <li>There are two basic structures: <em>objects</em> and <em>arrays</em></li>
          <ul>
            <li>objects are collections of name/value pairs enclosed in <code>{ }</code></li>
            <li>arrays are lists of values enclosed in <code>[ ]</code></li>
          </ul>
          <li>Values can be objects, arrays, text strings, numbers, <code>true</code> or <code>false</code>, or <code>null</code></li>
        </ul>
      </slide>
      <slide>
		<title>JSON Handling</title>
			<ol>
				<li>Client side Javascript Objects</li>
				<ul>
					<li>JSON parser transforms object to string</li>
					<li>URL encoded JSON is sent to the server vid HTTP request</li>
				</ul>
				<li>Server Side</li>
				<ul>
					<li>Decode incoming JSON string with parser into object</li>
					<li>The object can now be handled by any prefered server side language</li>
				</ul>
				<li>Client-side </li>
				<ul>
					<li>Returned JSON string is transformed into new object with JSON parser on client</li>
				</ul>
			</ol>
      </slide>
      <slide>
        <title>JSON Example</title>
        <pre>
{ 
  'name': 'Web Architecture &amp; Information Management',
  'semester': 'Spring 2011',
  'students': [
    { 
      'name': 'Angie Fredette',
      'year': 1 
    },
    { 
      'name': 'Philip Fall',
      'year': 4 
    },
    { 
      'name': 'Olivia Odum',
      'year': 2 
    } 
  ] 
}</pre>
      </slide>
    </part>
    <part>
      <title>Midterm</title>
      <slide>
        <title>Midterm</title>
        <ul>
          <li>Wednesday, March 16, during class</li>
          <li>no notes, no laptops</li>
          <li>17 short-answer questions, you pick 15</li>
          <li>each question is 4 points for a total of 60</li>
        </ul>
      </slide>
      <slide>
        <title>Review Session</title>
        <ul>
          <li>Place and time TBA?</li>
          <li>we can also use the remaining time in class today for Q&amp;A</li>
        </ul>
      </slide>
    </part>
  </presentation>

<!-- END 15 Anatomy of an Advanced Web Application -->



<!-- BEGIN 16 Mid-term Exam -->

  <presentation id="midterm" external="">
    <title short="Midterm">Mid-term Exam</title>
    <date>[INSERT DATE HERE]</date>
  </presentation>

<!-- END 16 Mid-term Exam -->



<!-- BEGIN 17 Web Search -->

  <presentation id="search">
    <title short="Search">Web Search</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://www.google.com/support/webmasters/bin/answer.py?hl=en&amp;answer=70897">Google Basics</a>&#160;· <a href="http://proquest.safaribooksonline.com/9780596809133/search_engine_basics">Search Engine Basics</a>&#160;· <a href="http://epl.scu.edu/~stsvalues/readings/ShapingTheWeb.pdf">Politics of Search Engines</a></toc>
    <toc class="resources"><a href="http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf">PageRank</a>&#160;· <a href="http://en.wikipedia.org/wiki/Robots_exclusion_standard">robots.txt</a>&#160;· <a href="http://en.wikipedia.org/wiki/Site_map">Site Map</a>&#160;· <a href="http://en.wikipedia.org/wiki/Nofollow">nofollow</a>&#160;· <a href="http://www.google.com/insights/search/#">Google Insights</a></toc>
    <toc class="abstract">In his early vision of the Web, Tim Berners-Lee expected that most people would discover information by following hyperlinks, rather than by using keyword searches. Thus there is no search functionality built into the Web. Web search engines came later and had a profound effect on how we use and experience the Web. Now it is hard to imagine using the Web without search, a fact that has both technological and political implications.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <part>
      <title>The Technology of Web Search</title>
      <slide>
        <title>The Technology of Web Search</title>
        <p>
          The specific details of how web search engines work are closely guarded trade secrets. However, the basic ingredients of web search are shared by all search engines. These are:
        </p>
        <ol>
          <li><strong>Crawling</strong>, or finding resources</li>
          <li><strong>Indexing</strong>, or analyzing representations</li> 
          <li><strong>Ranking</strong>, or ordering results for specific queries</li>
        </ol>
      </slide>
      <part>
        <title>Crawling</title>
        <slide id="webcrawlers">
          <title>Web Crawlers</title>
          <ul>
            <li>A <em>web crawler</em> or <em>web spider</em> is a program that finds web resources by following links</li>
            <li>Algorithm for a simple web crawler:</li>
            <ol>
              <li>Pick a URI to start with</li>
              <li>HTTP GET (download) that URI</li>
              <li>(Assuming it is HTML) extract URIs from all the links</li>
              <li>For each URI, go to step #2</li>
            </ol>
	    <li>Try a Wget example  wget -r -l 0 http://www.ischool.berkeley.edu</li>
            <li>In actuality, web crawling gets much more complicated than this</li>
            <li>Designers of web crawlers have 2 goals:</li>
            <ul>
              <li><strong>Freshness</strong>: finding new content as soon as possible</li>
              <li><strong>Comprehensiveness</strong>: finding as much (good) content as possible</li>
            </ul>
          </ul>
        </slide>
        <slide>
          <title>Web Crawling Visualization</title>
          <center>
            <a href="http://drunkmenworkhere.org/219.php?a=yahoo2hour">
              <img src="http://drunkmenworkhere.org/bintree/yahoo_small.png"/>
            </a>
            <p class="quotenote">via <a href="http://drunkmenworkhere.org/">Drunk Men Work Here</a></p>
          </center>
        </slide>
        <slide id="robotstxt">
          <title>robots.txt</title>
          <ul>
            <li>Sometimes website operators do not want certain pages do be crawled</li>
            <li><code>robots.txt</code> is the answer to this problem</li>
            <li><code>robots.txt</code> is a text file placed at the root of a given domain</li>
            <ul>
              <li>e.g. <a href="http://www.ischool.berkeley.edu/robots.txt">http://www.ischool.berkeley.edu/robots.txt</a></li>
            </ul>
            <li>The file lists URI paths that crawlers should not visit</li>
            <li>Compliance is <strong>voluntary</strong>: there is nothing to stop crawlers from visiting disallowed paths</li>
            <ul>
              <li>However website operators may attempt to block crawlers that do not respect <code>robots.txt</code></li>
            </ul>
          </ul>
        </slide>
        <slide id="sitemaps">
          <title>Site Maps</title>
          <ul>
            <li><em>Site maps</em> are the opposite of <code>robots.txt</code>: they tell crawlers what is important</li>
            <li>Website operators used to fill out forms to inform search engines about their sites</li>
            <li>Site maps ease the process of informing crawlers about a site</li>
            <ul>
              <li>Just submit the URI of your sitemap, <em>or</em></li>
              <li>refer to it from <link href="robotstxt"><code>robots.txt</code></link></li>
            </ul>
            <li>Site maps can specify for specific URIs:</li>
            <ul>
              <li>the time they were last updated</li>
              <li>how often they are expected to change</li>
              <li>their importance relative to other URIs on the site</li>
            </ul>
            <li>Supported by all major search engines</li>
            <ul>
              <li>But listing a URI in a site map does not <em>guarantee</em> that it will be crawled</li>
            </ul>
          </ul>
        </slide>
      </part>
      <part>
        <title>Indexing</title>
        <slide id="indexing">
          <title>Indexing</title>
          <ul>
            <li><em>Indexing</em> is the process by which a search engine analyzes a web page and stores it for retrieval</li>
            <li>Fast, effective indexing is critical to the quality of a search engine</li>
            <li>Different kinds of content must be indexed in addition to HTML pages</li>
            <ul>
              <li>PDFs, Excel, Powerpoint, Word</li>
            </ul>
            <li>For HTML pages, Indexing algorithms must try determine which text is meaningful and which is not</li>
            <li>This means separating content from navigation</li>
          </ul>
        </slide>
        <slide>
          <title>HTML Page Structure</title>
          <center>
            <img src="page-structure.png"/>
          </center>
        </slide>
        <slide>
          <title>HTML5 Structure Elements</title>
          <center>
            <img src="html5-structure.png"/>
          </center>
        </slide>
        <slide>
          <title>Indexing Multimedia</title>
          <ul>
            <li>Indexing the <em>content</em> of audio, video and images is still a research problem</li>
            <li>Most techniques are not fast or reliable enough for web search</li>
            <li>Web search engines still rely on indexing the <em>text</em> around media objects (e.g. captions, comments)</li>
            <li>Average pixel color can be used to detect pornography</li>
            <li>Audio fingerprinting can be used to ID copyrighted content</li>
            <li>Copies or reuses of images can be identified, e.g this <a href="http://www.tineye.com/search/9ab0f71ef8c36c1b2e55d3b33c3241213e65a082?page=24">famous kiss</a></li>
            <li>Faces can be detected, e.g. <a href="http://images.google.com/images?q=boa">boa</a> vs. <a href="http://images.google.com/images?q=boa&amp;imgtype=face">BoA</a></li>
            <ul>
              <li>Face <em>recognition</em> getting better too</li>
            </ul>
            <li>Some ability to distinguish <a href="http://images.google.com/images?q=boa&amp;imgtype=photo">photos</a> from <a href="http://images.google.com/images?q=boa&amp;imgtype=clipart">clip art</a> from <a href="http://images.google.com/images?q=boa&amp;imgtype=lineart">line drawings</a></li>
          </ul>
        </slide>
      </part>
      <part>
        <title>Ranking</title>
        <slide>
          <title>Ranking Results</title>
          <ul>
            <li>Ranking is the "secret sauce" of any search engine</li>
            <li>Good ranking is important</li>
            <ul>
              <li>the vast majority of users do not look beyond the first page of results</li>
            </ul>
            <li>Ranking can only be as good as indexing allows</li>
            <ul>
              <li>you can't consider X as a factor if you haven't indexed it</li>
            </ul>
            <li>Ranking takes into consideration not only what has been indexed (the content), but also the searcher and other context (time, location)</li>
          </ul>
        </slide>
        <slide>
          <title>Link Analysis</title>
          <ul>
            <li>Google's major breakthrough with web search was PageRank, an algorithm for link analysis</li>
            <li>The basic idea:</li>
            <ul>
              <li>Links are indications of importance or popularity</li>
              <li>The more links to a page, the more important/popular it is</li>
              <li>Links from important/popular pages should count more</li>
              <li>Links from pages on related topics should count more</li>
            </ul>
            <li>An old idea, applied to citation graphs before the web</li>
            <li>All the major search engines use some form of link analysis now</li>
          </ul>
        </slide>
        <slide>
          <title>PageRank</title>
          <center>
            <img src="img/pagerank.png"/>
          </center>
        </slide>
        <slide id="nofollow">
          <title>nofollow</title>
          <ul>
            <li>Problem: PageRank can be manipulated</li>
            <li>Spammers attempt to place links to their sites all over the web</li>
	    <li>This is what J.C. Penney did in 2011 for key terms such as 'dresses'</li>
            <li>Blog comment threads are particularly attractive to spammers</li>
            <li>Solution: indicate to <link href="webcrawlers">web crawlers</link> that certain links may not be trustworthy</li>
            <li>A <code>rel="nofollow"</code> attribute on an anchor (link) tag does this</li>
            <li>Web crawlers will not follow these links, and link analysis algorithms will not take them into consideration when ranking</li>
            <li>Most blogging software now automatically adds the <code>nofollow</code> attribute to links posted in comment threads</li>
          </ul>
        </slide>
        <slide>
          <title>Other Ranking Factors</title>
          <ul>
            <li>Location of query term</li>
            <ul>
              <li>in the <strong>URI</strong></li>
              <li>in the <strong>page title</strong></li>
              <li>in the <strong>anchor text</strong> of links pointing to the site</li>
              <li>in the <strong>body text</strong></li>
            </ul>
            <li>age of site (older is usually better)</li>
            <li>site's link structure (hence <link href="sitemaps">site maps</link></li>
            <li>Many more: Google claims to consider more than 200 factors when ranking</li>
          </ul>
        </slide>
        <slide>
          <title>Web Spam</title>
          <ul>
            <li>Search is not just about putting relevant web sites at the top of the results</li>
            <li>It's also about making sure bad sites don't show up in results</li>
            <li>This requires major effort at every step:</li>
            <ul>
              <li>Avoiding crawling such sites (hence <link href="nofollow"><code>nofollow</code></link>)</li>
              <li>Indexing properly, e.g. ignoring hidden text or false descriptions</li>
              <li>Ranking properly, e.g. identifying and ignoring sites trying to game the system</li>
            </ul>
            <li>This may be the hardest part of operating a search engine</li>
          </ul>
        </slide>
      </part>
    </part>
    <part>
      <title>The Politics of Web Search</title>
      <slide>
        <title>Search Engines as Gatekeepers</title>
        <ul>
          <li>Most web browsing sessions begin with a search</li>
          <li>Search engines mediate our use of the Web</li>
          <li>What responsibilities does this carry?</li>
        </ul>
      </slide>
      <slide>
        <title>Ranking Intervention</title>
        <ul>
          <li>How "natural" are ranking algorithms?</li>
          <li>When is it OK for search engines to manually intervene in ranking?</li>
          <ul>
            <li><a href="http://images.google.com/images?q=michelle%20obama">Michelle Obama?</a></li>
            <li><a href="http://www.google.com/search?q=jew">Jew?</a></li>
            <li>Jihad videos?</li>
            <li>Child porn?</li>
            <li>Web spam?</li>
            <li>Malware?</li>
            <li>China?</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Search Engines as TV Camera Crews</title>
        <blockquote cite="http://online.wsj.com/public/article/SB114116587424585798.html">
          Search engines are like a TV camera crew let loose in the middle of a crowd of rowdy fans after a game. Seeing the camera, everyone acts boorishly and jostles to get in front. The act of observing something changes it.
        </blockquote>
        <p class="quotenote">Lee Gomes, <a href="http://online.wsj.com/public/article/SB114116587424585798.html">"Our Columnist Creates Web 'Original Content' But Is in for a Surprise"</a>, Wall Street Journal, 2006</p>
      </slide>
      <slide>
        <title>The Rich Get Richer?</title>
        <ul>
          <li>Link analysis equates popularity and importance</li>
          <li>Are these really the same?</li>
          <li>Does controversial or lurid content attract more links?</li>
          <li>Does popularity beget popularity?</li>
        </ul>
      </slide>
      <slide>
        <title>Homogenization &amp; Hegemony</title>
        <ul>
          <li>It is sometimes claimed that link analysis is a "democratic" approach to ranking</li>
          <li>Anyone can create links and rankings will reflect "the will of the people"</li>
          <li>Non-scientific case study: <a href="http://whimsley.typepad.com/whimsley/2009/07/googling-barbie-again.html">Barbie</a></li>
          <li>Do Web search results reflect global views? U.S. views? "Developed world" views?</li>
          <li>Wikpedia dominates Google search results: neutral point of view?</li>
        </ul>
      </slide>
      <slide>
        <title>Personalized Search</title>
        <ul>
          <li>Perhaps <em>personalized search results</em> are the answer to homogenization and hegemony</li>
          <li>Everyone can have the results that best suit them</li>
          <li>Danger #1: echo chambers</li>
          <li>Danger #2: <a href="http://portal.acm.org/citation.cfm?id=42413">dataveillance</a></li>
          <li>Advertising-supported search engines have string incentives to compile information about their users for reasons other than personalizing search</li>
        </ul>
      </slide>
      <slide>
        <title>Search and Policy</title>
        <ul>
          <li>Search engines mediate everything from public discourse to economic transactions as more activity moves to the web</li>
          <li>Can private companies be trusted with this responsibility?</li>
          <li>Do market mechanisms provide adequate safeguards?</li>
          <ul>
            <li>Who are search engines' customers?</li>
          </ul>
          <li>What are our alternatives?</li>
          <ul>
            <li><a href="http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1002453">Regulation?</a></li>
            <li>More transparency?</li>
            <li>New technologies?</li>
          </ul>
        </ul>
      </slide>
    </part>
  </presentation>

<!-- END 17 Web Search -->



<!-- BEGIN 18 Web Intermediaries -->

  <presentation id="intermediaries">
    <title short="Intermediaries">Web Intermediaries</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://www.almaden.ibm.com/cs/wbi/papers/www7/Intermediaries.pdf">Web Intermediaries</a>&#160;· <a href="http://www.theatlantic.com/magazine/archive/2008/03/-ldquo-the-connection-has-been-reset-rdquo/6650/">The Great Firewall</a></toc>
    <toc class="resources"><a href="http://en.wikipedia.org/wiki/Proxy_auto-config">Proxy auto-config</a>&#160;· <a href="http://en.wikipedia.org/wiki/Content-control_software">Content-control software</a>&#160;· <a href="http://en.wikipedia.org/wiki/Web_cache">Web cache</a>&#160;· <a href="http://en.wikipedia.org/wiki/Anonymizer">Anonymizer</a>&#160;· <a href="http://en.wikipedia.org/wiki/Content_delivery_network">CDN</a></toc>
    <toc class="abstract">Until now we have discussed the Web in terms of interactions between Web servers (where content is published) and Web browsers (where content is displayed). In actuality, things are a bit more complicated than that. There are many different kinds of <em>Web intermediaries</em> that may occupy the path between where content originates and where it is consumed. These intermediaries can provide a number of services, from improving performance to filtering content to protecting privacy.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <part>
      <title>Intermediary Locations</title>
    <slide>
      <title>Web Browser &amp; Web Server</title>
      <center>
        <img src="img/http-txn.png"/>
      </center>
    </slide>
    <slide>
      <title>Web Intermediaries</title>
      <center>
        <img src="img/intermediaries.png"/>
      </center>
    </slide>
    <slide>
      <title>Intermediary Servers</title>
      <ul>
        <li>The most common type of intermediary is called a <em>proxy server</em></li>
        <li>A proxy server is a separate computer between the client (computer on which the browser is running) and server</li>
        <li>Proxy servers may be set up by the people operating a specific network (e.g) at a school or company)</li>
        <li>Or they may be configured by an end user, in their browser settings or operating system settings</li>
      </ul>
    </slide>
    <slide>
      <title>Intermediaries in the Browser</title>
      <ul>
        <li>Intermediaries are usually separate computers between the client and server</li>
        <li>But we can also think of things like <link href="add-on">browser add-ons and extensions</link> as <em>intermediaries running in the browser</em></li>
        <ul>
          <li>Firefox: <a href="https://addons.mozilla.org/en-US/firefox/">Add-ons</a>, <a href="http://userscripts.org/">user scripts</a>, <a href="https://jetpack.mozillalabs.com/">jetpacks</a></li>
          <li>IE: <a href="http://www.ieaddons.com/">Add-ons</a>, <a href="http://iescripts.org/">userscripts</a></li>
          <li>Chrome: <a href="https://chrome.google.com/extensions">Extensions</a></li>
          <li>Safari: <a href="http://pimpmysafari.com/">Plugins</a> (not to be confused with <link href="plug-in">the other kind of plug-in</link>)</li>
        </ul>
      </ul>
    </slide>
    </part>
    <part>
      <title>Intermediary Operations</title>
      <slide>
        <title>Modifying requests</title>
        <ul>
          <li>Redirecting the request</li>
          <li>Modifying request headers</li>
          <li>Modifying form values</li>
          <li>Adding/removing cookies</li>
        </ul>
      </slide>
      <slide>
        <title>Modifying responses</title>
        <ul>
          <li>Inserting or removing content</li>
          <li>Translating: formats, languages</li>
          <li>Adapting or compressing</li>
          <li>Adding annotations or overlays</li>
        </ul>
      </slide>
      <slide>
        <title>Passive monitoring</title>
        <ul>
          <li>Logging statistics</li>
          <li>Recording links followed</li>
          <li>Storing copies of documents</li>
        </ul>
      </slide>
    </part>
    <part>
      <title>Intermediary Applications</title>
      <slide>
        <title>Improving Performance</title>
        <ul>
          <li>Intermediaries are often used to <strong>improve performance</strong> (faster browsing) and <strong>save bandwidth</strong></li>
          <li>Rather than downloading content from a distant server, browsers can download from a server that is geographically close or connected by a fast (short) network link</li>
          <li>This kind of intermediary is called a <em>cache</em></li>
          <li>Caches exist at different locations:</li>
          <ul>
            <li>Caching in the browser</li>
            <ul>
              <li>very close and fast, but only has copies of what a single user has downloaded</li>
            </ul>
            <li>Caching in an organization's network</li>
            <ul>
              <li>still close, and has copies of what everyone in the organization has downloaded--save the organization's bandwidth costs</li>
            </ul>
            <li>Caching in a <em>content distribution network</em></li>
            <ul>
              <li>used by companies that want their content to be accessible quickly everywhere</li>
            </ul>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Content Distribution Network</title>
        <center>
          <img src="img/cloudfront.gif"/>
        </center>
        <p class="quotenote"><a href="http://aws.amazon.com/cloudfront/">Amazon CloudFront</a></p>
      </slide>
      <slide>
        <title>Content Modification</title>
        <ul>
          <li>Intermediaries can be used to modify content</li>
          <li>Removing ads is a popular use of intermediaries</li>
          <li><a href="http://en.wikipedia.org/wiki/NebuAd">NebuAd</a> got in trouble for using intermediaries to insert ads</li>
          <li>A more benign form of content modification is adaptation for mobile devices: <a href="http://cnn.com">CNN.com</a>, <a href="http://www.google.com/gwt/n?q=cnn.com&amp;site=search&amp;hl=en&amp;lr=&amp;c2coff=1&amp;safe=off&amp;mrestrict=xhtml&amp;ct=res&amp;cd=1&amp;rd=1&amp;u=www.cnn.com/">CNN.com adapted for mobile</a></li>
        </ul>
      </slide>
      <slide>
        <title>Protecting Privacy</title>
        <ul>
          <li>An intermediary may be used to provide anonymity or protect privacy</li>
          <ul>
            <li>Hide IP address of the client</li>
            <li>Removing information from HTTP headers</li>
            <li>Remove cookies or substitute fake ones</li>
            <li>Generate fake "noise" activity to confuse monitoring</li>
          </ul>
          <li>This can happen at different levels</li>
          <ul>
            <li>In the browser, e.g. <a href="http://mrl.nyu.edu/~dhowe/trackmenot/">TrackMeNot</a></li>
            <li>In an organization's network, e.g. <a href="http://www.torproject.org/">Tor</a>, <a href="http://www.googlesharing.net/">GoogleSharing</a></li>
            <li>On the Web: anonymous proxies (but <a href="http://en.wikipedia.org/wiki/Anonymizer#Risks_and_security">be careful!</a>)</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>GoogleSharing</title>
        <center>
          <table>
            <tr><td><img style="height: 400px" src="img/googlesharing-1.png"/></td><td><img style="height: 400px" src="img/googlesharing-2.png"/></td></tr>
          </table>
        </center>
      </slide>
      <slide>
        <title>Access Control</title>
        <ul>
          <li>Intermediaries are often used for access control</li>
          <li>Access control means both <em>blocking</em> and <em>enabling</em> access to resources</li>
          <li>Our library uses a <a href="http://www.lib.berkeley.edu/Help/proxy.html">proxy</a> for enabling access to subscription resources for off-campus users</li>
          <li>Schools and companies often use proxies for blocking access to porn, gambling, time-wasting sites</li>
          <li>Control may occur at the URI level, or by actually examining the content of web pages</li>
          <li>Whether it's used by <a href="http://www.ironport.com/technology/ironport_web_usage_controls.html">companies</a> or <a href="http://www.theatlantic.com/magazine/archive/2008/03/-ldquo-the-connection-has-been-reset-rdquo/6650/">governments</a>, it's the same technology</li>
        </ul>
      </slide>
      <slide>
        <title>Monitoring &amp; Surveillance</title>
        <ul>
          <li>Even if they're not actively blocking content, most companies passively monitor employee's web usage</li>
          <li>Be careful what you browse at work!</li>
          <li>China's "Golden Shield" program relies as much on people's fear of being passively monitored as it does on actively blocking access</li>
          <li>Monitoring can have positive uses as well</li>
          <li>Statistics on usage of subscription resources can help organizations with planning</li>
          <ul>
            <li>what isn't getting used?</li>
            <li>who are the heaviest users?</li>
            <li>should we be caching more?</li>
          </ul>
        </ul>
      </slide>
    </part>
  </presentation>

<!-- END 18 Web Intermediaries -->



<!-- BEGIN 19 Content Syndication (Atom &amp; RSS) -->

  <presentation id="syndication">
    <title short="Syndication">Content Syndication (Atom &amp; RSS)</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://en.wikipedia.org/wiki/History_of_web_syndication_technology" title="Wikipedia: History of Web Syndication Technology">History</a></toc>
    <toc class="resources"><a href="http://en.wikipedia.org/wiki/Web_syndication" title="Wikipedia: Web Syndication">Wikipedia (Syndication)</a>&#160;· <a href="http://en.wikipedia.org/wiki/Web_feed" title="Wikipedia: Web Feeds">Wikipedia (Feeds)</a>&#160;· <a href="http://www.apple.com/itunes/whatson/podcasts/specs.html" title="Apple's Podcast Specification">Podcast Spec</a></toc>
    <toc class="abstract">For many information sources on the Web, it is useful to have some standardized way of subscribing to information updates. Syndication formats such as RSS and Atom can be used by these information sources to publish a feed of updated information items. Feeds can be read directly in a browser, but in most cases they are read by specialized software; either a <em>feed reader</em> that allows users to subscribe to more than one feed and manage the information received through all these feeds, or some software module that reads feeds and embeds them for example in a Web page. This latter example is the classical usage of feeds; news feeds published by news agencies, and then embedded as news tickers into Web pages as a constantly updated source of information.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <slide>
      <title>Syndication</title>
      <ul>
        <li><strong>syndicate</strong>, <em>verb</em>. to publish simultaneously in a number of periodicals</li>
        <li>A syndicate (<em>noun</em>) is a group of people who create or acquire content to be sold in bulk to magazine and newspapers</li>
        <li>Examples: <a href="http://www.kingfeatures.com/">comic strips</a>, <a href="http://familyfeatures.com/">editorials</a></li> 
      </ul>
    </slide>
    <slide>
      <title>Content Feeds</title>
      <ul>
        <li>Early Web content was static or updated very infrequently</li>
        <ul>
          <li>there was not yet the requirement to reuse content in different contexts</li>
        </ul>
        <li>Frequently updated Web content quickly became a very common scenario</li>
        <ul>
          <li>as commercial interests took over the Web, users should have a reason to re-visit a site</li>
          <li>presenting a steady stream of new content creates the image of a live Web site</li>
        </ul>
        <li>There are two major use cases where HTML is not sufficient</li>
        <ol>
          <li>users want an efficient way to get the updated content from a site</li>
          <li>sites want to aggregate updated content from other sites and re-publish it</li>
        </ol>
        <li><link href="syndication-formats"/> are designed to support these two use cases</li>
        <ul>
          <li>container formats for updated items</li>
          <li>a small amount of metadata about these items for automated processing</li>
        </ul>
      </ul>
    </slide>
    <part id="syndication-formats">
      <title>Syndication Formats</title>
      <slide id="rss">
        <title short="RSS">RSS History</title>
        <ul>
          <li><q><a href="http://diveintomark.org/archives/2004/02/04/incompatible-rss">The Myth of RSS Compatibility</a></q> provides a good overview</li>
          <li>RSS is a text book example for <q>why standards are a good thing</q></li>
          <ul>
            <li>RSS 0.9 was created for the <em>My Netscape</em> portal in March 1999</li>
            <li>RSS 0.91 (a simplification) was introduced in July 1999 (as an interim solution)</li>
            <li>the AOL/Netscape merger removed the format from the company's portal</li>
            <li>RSS was without an owner, and different parties claimed/denied ownership</li>
            <li>RSS 1.0 was created by an informal developer group</li>
            <li>RSS 0.92 (and 0.93 and 0.94) were published without acknowledging RSS 1.0</li>
            <li>finally, RSS 2.0 was released as a follow-up to the RSS 0.9x versions</li>
          </ul>
          <li>Using RSS has become an exercise in managing a menagerie of versions</li>
        </ul>
      </slide>
      <slide>
        <title>The Case for Content Management</title>
        <ul>
          <li>RSS is very rarely produced by hand</li>
          <ul>
            <li>by definition, RSS contains redundant information for a specific purpose</li>
          </ul>
          <li>If a <em>Content Management System (CMS)</em> is used, RSS can be generated</li>
          <ul>
            <li>basic metadata can be generated by the CMS (title, author, date)</li>
            <li>better tagging of content results in better tagging of feeds</li>
            <li>well-tagged feeds are better foundations for large-scale reuse of feed items</li>
          </ul>
          <li>Blogging is simply a specialized case of a CMS</li>
          <ul>
            <li>Web-based interface for controlling everything</li>
            <li>strictly time-ordered sequenced of published items</li>
            <li>navigation features primarily based on the time-specific facets of the blog (maybe tags)</li>
            <li>all blogging tools include feed support</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Consuming RSS</title>
        <ul>
          <li>RSS feeds often have quality problems</li>
          <ul>
            <li>surprisingly often feeds do not even deliver well-formed XML</li>
            <li>the use of embedded markup in RSS is not well-defined</li>
          </ul>
          <li>Writing an RSS reader from scratch is not a good idea</li>
          <li>There are three major tasks which RSS readers must do</li>
          <ol>
            <li>accept non-XML RSS feeds and fix them to be XML</li>
            <li>look at the feed contents and bring them into a unified form</li>
            <li>produce a unified view of feeds regardless of the RSS version</li>
          </ol>
        </ul>
      </slide>
      <slide id="atom">
        <title>Atom History</title>
        <img src="atom-logo.png" href="http://atompub.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
        <ul>
          <li>RSS's shortcomings were very apparent and could not be fixed</li>
          <li>In mid-2003, discussions started about an improved format</li>
          <li>It also became apparent that the format should have a protocol</li>
          <li>Atom 0.3 was released in December 2003 but had no formal home</li>
          <li>IETF was chosen as the new home with a working group in June 2004</li>
          <li><a href="http://tools.ietf.org/html/rfc4287">RFC 4287</a> was published in December 2005</li>
          <li><em>AtomPub</em> has been published as <a href="http://tools.ietf.org/html/rfc5023">RFC 5023</a> in October 2007</li>
        </ul>
      </slide>
      <slide>
        <title>Atom vs. RSS</title>
        <ul>
          <li>Standardized by the IETF (well-defined process)</li>
          <li>Classification of entries (user-defined categories)</li>
          <li>More XML-like markup design (more nesting)</li>
          <li>Namespaces are used and supported as standard mechanism</li>
          <li>Atom feeds <em>must</em> be well-formed XML (there even <a href="http://atompub.org/2005/08/17/atom.rnc" title="Atom RELAX NG Schema">is a schema</a>)</li>
          <li>Interpretation of content is well-defined (various content types)</li>
          <li>Support for <code>xml:lang</code> and <code>xml:base</code></li>
        </ul>
      </slide>
      <slide>
        <title>Atom Example</title>
        <listing src="atom.xml"/>
      </slide>
      <slide>
        <title>Atom Content</title>
        <ul>
          <li>RSS had no safe way of finding out what an entry's content is</li>
          <ul>
            <li>this led to different implementations being <q>smart</q> about what the RSS author really wanted</li>
            <li>one of Atom's main goals was to improve this in a well-defined way</li>
            <li>Atom allows escaped markup (the only way to include non-XML HTML in an XML format)</li>
          </ul>
          <li>Each <elem>content</elem> element should have a <atom>type</atom> (the default is <code>text</code>)</li>
          <li>Atom's content interpretation algorithm (use first applicable rule):</li>
          <ol>
            <li>if <atom>type</atom> is <code>text</code>, no child elements are allowed (plain text content)</li>
            <li>if <atom>type</atom> is <code>html</code> then RSS's method of escaped markup is used</li>
            <li>if <atom>type</atom> is <code>xhtml</code> then there must be an <elem>div</elem> containing XHTML markup</li>
            <li>if <atom>type</atom> is an XML <link href="mime">media type</link> then the content should be treated as this type</li>
            <li>if <atom>type</atom> starts with <code>text/</code> then no child elements are allowed</li>
            <li>for all other values, the content must be an base64-encoded entity of the specified MIME type</li>
          </ol>
        </ul>
      </slide>
      <slide>
        <title>Atom Content Examples</title>
        <pre href="http://www.xml.com/lpt/a/1633"><![CDATA[<content type="xhtml">
        <div xmlns="http://www.w3.org/1999/xhtml">
        One <strong>bold</strong> foot forward
        </div>
        </content>]]></pre>
        <pre href="http://www.xml.com/lpt/a/1633"><![CDATA[<content>The "atom:content" element either contains or links to the content of the entry. The content of atom:content is Language-Sensitive.</content>]]></pre>
        <pre href="http://www.xml.com/lpt/a/1633"><![CDATA[<content type="html">The &lt;code>atom:content&lt;/code> element either contains or links to the content of the entry. The content of &lt;code>atom:content&lt;/code> is &lt;a href="http://www.ietf.org/rfc/rfc3066.txt">Language-Sensitive&lt;/a>.</content>]]></pre>
        <pre href="http://www.xml.com/lpt/a/1633"><![CDATA[<content type="image/png">
        iVBORw0KGgoA … TAAAAAElFTkSuQmCC
        </content>]]></pre>
        <pre href="http://www.xml.com/lpt/a/1633"><![CDATA[<content src="image.png" type="image/png"/>]]></pre>
      </slide>
      <slide>
        <title>Atom Categories</title>
        <ul>
          <li>Atom allows one to assign categories to entries</li>
          <ul>
            <li>each <elem>category</elem> element must have a <atom>term</atom> attribute for the category</li>
            <li>an optional <atom>scheme</atom> identifies the categorization scheme (ontology, taxonomy, …)</li>
            <li>an optional <atom>label</atom> attribute provides a human-readable label for the category</li>
          </ul>
          <li>Three different cases of categorization can be distinguished</li>
          <ol>
            <li>use a well-known scheme (such as <em>Dublin Core</em>)</li>
            <li>use a private but well-designed scheme (which has a URI and can be reused reliably)</li>
            <li>use tags without schemes, which then are little more than content labels</li>
          </ol>
          <li>Widely-known tags are <a href="http://www.tbray.org/ongoing/When/200x/2007/02/01/Tag-Scheme">not easy to handle</a></li>
          <ul>
            <li>they are more than just privately assigned tags</li>
            <li>there is no formal scheme for them, just an emerging consensus</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Podcasts</title>
        <ul>
          <li><em>Podcasts</em> are simply <em>feeds with a number of additional elements</em></li>
          <ul>
            <li>the current <q href="http://www.apple.com/itunes/whatson/podcasts/specs.html">podcast specification</q> only allows RSS 2.0</li>
            <li>in principle, there is no reason why podcasts cannot be Atom</li>
          </ul>
          <li>RSS 2.0's <code>enclosure</code> is used to point to the published item</li>
          <ul>
            <li><em>URL</em> points to the item itself so that it can be downloaded</li>
            <li><em>length</em> specifies the item's length in bytes</li>
            <li><em>type</em> specifies the items <link href="mime">media type</link> (video, audio, PDF)</li>
          </ul>
          <li>For business reasons, Apple wants podcasts to be <q>submitted to iTunes</q></li>
          <ul>
            <li>this ensures that the podcast can be found through iTunes</li>
            <li>the iPhone currently only updates iTunes-published Podcasts</li>
          </ul>
        </ul>
      </slide>
    </part>
    <part>
      <title>Using Feeds</title>
      <part>
        <title>Browser Handling</title>
        <slide>
          <title>Firefox</title>
          <img src="firefox-feed.png" style="height : 75% ; margin : 2% ; " title="Feed Display in Firefox"/>
        </slide>
        <slide>
          <title>Internet Explorer</title>
          <img src="ie-feed.png" style="height : 75% ; margin : 2% ; " title="Feed Display in Internet Explorer"/>
        </slide>
        <slide>
          <title>Safari</title>
          <img src="safari-feed.png" style="height : 75% ; margin : 2% ; " title="Feed Display in Safari"/>
        </slide>
        <slide>
          <title>Chrome</title>
          <img src="chrome-feed.png" style="height : 75% ; margin : 2% ; " title="Feed Display in Chrome"/>
        </slide>
        <slide>
          <title>Opera</title>
          <img src="opera-feed.png" style="height : 75% ; margin : 2% ; " title="Feed Display in Opera"/>
        </slide>
      </part>
      <part>
        <title>Feed Readers</title>
        <slide>
          <title>Google Reader</title>
          <img src="google-reader.png" style="height : 75% ; margin : 2% ; " href="http://www.google.com/reader/view/"/>
        </slide>
        <slide>
          <title>iTunes Podcasts</title>
          <img src="itunes.png" style="width : 90% ; margin : 2% ; "/>
        </slide>
        <slide>
          <title>Podcast Channel Information</title>
          <listing src="eco.xml" line="1-24" title="" href="http://feeds.sf.tv/podcast/eco"/>
        </slide>
        <slide>
          <title>Podcast Item Information</title>
          <listing src="eco.xml" line="25-35" title="" href="http://feeds.sf.tv/podcast/eco"/>
        </slide>
        <slide>
          <title>Planet</title>
          <ul>
            <li><a href="http://www.planetplanet.org/">Planet</a> is a feed reader intended to be installed on a web server</li>
            <li>Although it could be used by a single person, more typically it is used to aggregate a number of feeds relevant to a community</li>
            <li>Mainly used by software development communities to bring together posts of interest</li>
            <li>Good example of how any feed reader is potentially also a feed creator: enabling community curation and aggregation of content</li>
            <li>Nice example: <a href="http://www.nytimes.com/ref/topnews/blog-index.html">NYT blogs</a></li>
          </ul>
        </slide>
      </part>
    </part>
    <slide>
      <title>Simple Web Services</title>
      <ul>
        <li>Syndication creates representations for lists of information items (articles, posts, messages, etc.)</li>
        <li>Atom adds some concepts to RSS's model</li>
        <li>Syndication revolves around the ideas of distribution, aggregating, and interacting with items</li>
        <li>Atom-based interaction is one way of implementing an <link href="api">API</link></li>
        <li>For more semantics, Atom is only the foundation</li>
      </ul>
    </slide>
  </presentation>

<!-- END 19 Content Syndication (Atom &amp; RSS) -->



<!-- BEGIN 20 Third-party Content -->

  <presentation id="third-party">
    <title short="Third-Party">Third-party Content</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://blogs.zdnet.com/Hinchcliffe/?p=80">Widgets, badges, and gadgets</a></toc>
    <toc class="resources"><a href="http://en.wikipedia.org/wiki/Transclusion">Transclusion</a>&#160;· <a href="http://www.w3.org/TR/widgets-land/">Widget landscape</a>&#160;· <a href="http://www.startup-review.com/blog/youtube-case-study-widget-marketing-comes-of-age.php">Widget Marketing</a></toc>
    <toc class="abstract">HTML pages served by one web server can "host" content from a 3rd-party web server. That functionality is basic to the Web, but it has only really been exploited in recent years. In this lecture we'll look at methods for including 3rd-party content in web page, and some common patterns of application that use these methods.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <slide>
      <title>The Rise of 3rd-Party Content</title>
      <a style="float: right; margin: 20px; border-bottom: none" href="http://blogs.zdnet.com/Hinchcliffe/?p=80"><img src="img/webparts.png"/></a>
      <ul>
        <li>One of the hallmarks of "Web 2.0" has been the rise of embedded third-party content</li>
        <li>Blogs, wikis, portals, and social networks encouraged users to customize and add their own content to hosted web pages</li>
        <li>Other sites took advantage of this openness, creating "gadgets", "widgets", "badges", and "modules" for users to put on web pages</li>
      </ul>
    </slide>
    <part>
      <title>Transclusion Technologies</title>
      <slide>
        <title>Transclusion</title>
        <ul>
          <li><strong>Transclusion</strong> means to include some remote content inside a web page</li>
          <li>Instead of the included content being <em>copied</em>, it is <em>pointed to</em> in a way that allows it to viewed (or listened to) in different contexts</li>
          <li>Transclusion differs from linking: instead of the user having to follow a link, the browser fetches the included content and displays it directly</li>
          <li>We've already seen several examples of transclusion</li>
          <ul>
            <li><link href="image"/>, <link href="svg"/>, <link href="canvas"/>, <link href="html5-av"/></li>
          </ul>
          <li>Today we'll be talking about transcluding more "independent" third-party content</li>
        </ul>
      </slide>
      <slide>
        <title>iframes</title>
        <iframe src="http://mobile.yelp.com/biz/qHmamQPCAKkia9X0uryA8g" width="50%" height="450px" style="float: right; margin: 20px;">
          <p>Your browser does not support iframes.</p>
        </iframe>
        <ul>
          <li>The <code>iframe</code> element can be used to include any HTML page within any other HTML page</li>
          <li>The content within the iframe is loaded directly from the source web server by the browser, just as if the user had visited that page directly</li>
        </ul>
        <pre style="clear: right"><![CDATA[<iframe src="http://mobile.yelp.com/biz/qHmamQPCAKkia9X0uryA8g" width="50%" height="450px" style="float: right; margin: 20px;">]]></pre>
      </slide>
      <slide>
        <title>Embedded Objects</title>
        <object width="640" height="385" style="float: right; margin: 20px;"><param name="movie" value="http://www.youtube.com/v/lAl28d6tbko&amp;hl=en_US&amp;fs=1&amp;"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/lAl28d6tbko&amp;hl=en_US&amp;fs=1&amp;" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="385"></embed></object>
        <ul>
          <li>The <code>object</code> and <code>embed</code> elements are used to transclude non-HTML content</li>
          <li>Usually used for <a href="http://java.sun.com/docs/books/tutorial/deployment/applet/">Java applets</a>, <a href="http://en.wikipedia.org/wiki/Microsoft_Silverlight">Silverlight</a>, and Flash applications</li>
          <li>Sophisticated embedded objects can allow users to explore sites without needing to visit them (e.g. YouTube)</li>
        </ul>
        <pre style="clear: right"><![CDATA[<object width="640" height="385" style="float: right; margin: 20px;">
<param name="movie" value="http://www.youtube.com/v/lAl28d6tbko&hl=en_US&fs=1&"></param>
<param name="allowFullScreen" value="true"></param>
<param name="allowscriptaccess" value="always"></param>
<embed src="http://www.youtube.com/v/lAl28d6tbko&hl=en_US&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="385"></embed>
</object>]]></pre>
      </slide>
      <slide>
        <title>Javascript Widgets</title>
        <div style="float: right; margin: 20px">
          <script type="text/javascript" src="http://cdn.widgetserver.com/syndication/subscriber/InsertWidget.js"></script><script>if (WIDGETBOX) WIDGETBOX.renderWidget('d8e2e8e9-8b6d-4f9f-a143-b1dd4347e398');</script>
        </div>
        <ul>
          <li>Rather than directly adding elements to transclude 3rd-party content, you can reference a script that adds the elements for you</li>
          <li>This is very simple, but you are trusting the 3rd party not to do evil things to your page</li>
          <li>On the other hand, any time you transclude 3rd-party content you are entrusting part of your page to someone else</li>
        </ul>
        <pre style="clear: right"><![CDATA[<script type="text/javascript" src="http://cdn.widgetserver.com/syndication/subscriber/InsertWidget.js"></script>
<script>if (WIDGETBOX) WIDGETBOX.renderWidget('d8e2e8e9-8b6d-4f9f-a143-b1dd4347e398');</script>]]></pre>
      </slide>
      <slide>
        <title>Server-Side Transclusion</title>
        <ul>
          <li>All the previous methods of transcluding 3rd-party content are <em>client-side</em> methods</li>
          <ul>
            <li>the browser is loading the 3rd-party content directly</li>
          </ul>
          <li>With <em>server-side</em> widgets, the 3rd-party content is loaded by a web server (such as a widget <link href="widget-portal">portal</link> or <link href="widget-platform">platform</link>) and integrated into a web page before sending it to the browser</li>
          <ul>
            <li>The browser never contacts the 3rd-party server</li>
          </ul>
        </ul>
        <center>
          <img src="img/transclusion.png"/>
        </center>
      </slide>
    </part>
    <part>
      <title>Third-Party Content Patterns</title>
      <slide>
        <title>Social Media</title>
        <a style="float: right; margin: 20px; border-bottom: none" href="http://blogs.zdnet.com/Hinchcliffe/?p=80"><img src="img/widgetnetworkeffect.png"/></a>
        <ul>
          <li>The big success of 3rd-party content has been driven by social networking sites: MySpace, Facebook, but also things like <a href="http://www.phpbb.com/">phpBB</a></li>
          <li>Profiles, wiki pages, blog posts, comment threads are all places where client-side transclusion can be used (if allowed)</li>
          <li>Note that social networking sites can be both <a href="http://www.facebook.com/platform_tour.php">hosts</a> and <a href="http://www.facebook.com/facebook-widgets/">sources</a> of 3rd-party content</li>
          <li>Through a popular host site, providers of third-party content can also grow very popular</li>
          <li>Sometimes the third-party (para)site can "eat its host"</li>
          <ul>
            <li>MySpace &amp; YouTube, Facebook &amp; <a href="http://www.zynga.com/">Zynga</a>?</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Widget Marketing Success</title>
        <center>
          <img src="img/myspace_vs_youtube.png"/>
        </center>
      </slide>
      <slide id="widget-portal">
        <title>Widget Portals</title>
        <div style="float: right; margin: 20px;">
          <a style="border-bottom: none" href="http://google.com/ig"><img src="img/igoogle.gif"/></a>
          <br/><br/>
          <a style="border-bottom: none" href="http://netvibes.com"><img src="img/netvibes.png"/></a>
        </div>
        <ul>
          <li>Widget portals are an update of the old <link href="rss">My Netscape portal</link> idea</li>
          <li>Intended for use as "start pages" with an overview of commonly accessed content</li>
          <ul>
            <li>Weather, news, sports scores, email inbox, etc.</li>
          </ul>
          <li><a href="http://developer.yahoo.net/blog/archives/2009/09/yaps_on_yahoo.html">Yahoo!</a>, <a href="http://www.google.com/ig/directory">Google</a>, and <a href="http://gallery.live.com/default.aspx?pl=4">Microsoft</a> all have variations on this theme</li>
          <li>Widget portals use server-side transclusion, so 3rd parties must develop widgets according to portal specifications (or use <link href="syndication-formats">syndication</link>)</li>
        </ul>
      </slide>
      <slide id="widget-platform">
        <title>Widget Platforms</title>
        <div style="float: right; margin: 20px;">
          <a style="border-bottom: none" href="http://www.facebook.com/platform_tour.php"><img src="img/fb-platform.jpg"/></a>
          <br/><br/>
          <a style="border-bottom: none" href="http://code.google.com/apis/wave/"><img src="img/google_wave.jpg"/></a>
        </div> 
        <ul>
          <li>Widget <link href="widget-portal">portals</link> just aggregate 3rd-party content or functionality</li>
          <li>Widget <em>platforms</em> provide some special functionality that 3rd parties can integrate with</li>
          <li>For example:</li>
          <ul>
            <li>the <a href="http://www.facebook.com/platform_tour.php">Facebook Platform</a> provides functionality relating to social networking (inviting, sharing, etc.)</li>
            <li>the <a href="http://code.google.com/apis/wave/">Google Wave platform</a> provides functionality relating to real-time collaboration (chatting, editing, etc.)</li>
          </ul>
          <li>Note that both of these sites also can be 3rd parties themselves:</li>
          <ul>
            <li>Facebook has widgets that you can embed anywhere</li>
            <li>Google Wave documents/conversations can be embedded anywhere</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Advertising</title>
        <ul>
          <li>Advertising is the "killer app" of 3rd-party content</li>
          <li>Publishers can make money by hosting 3rd-party content (advertising) on their sites</li>
          <li>3rd-party content providers can also sell advertising space, e.g. in embedded videos or games</li>
          <li>Client-side or server-side transclusion?</li>
          <li>Issues for branded advertising</li>
        </ul>
      </slide>
      <slide>
        <title>&#8220;Outsourcing&#8221;</title>
        <div style="float: right; margin: 20px;">
          <a style="background-color: #397EA9; border-bottom: none; display: block; height: 50px; width: 350px;" href="http://disqus.com/"><img style="margin: 4px 0 0 4px" src="img/disqus.gif"/></a>
          <br/><br/>
          <a style="border-bottom: none" href="http://en.gravatar.com/"><img src="img/gravatar.png"/></a>
        </div> 
        <ul>
          <li>Transclusion isn't just for <q>extra</q> stuff like badges or ads</li>
          <li>It can be used to <q>outsource</q> core functionality to another company or service</li>
          <li>For example:</li>
          <ul>
            <li><a href="http://disqus.com/">Disqus</a> provides commenting for other sites (like <a href="http://tumblinerb.com/post/482404218/review-wiz-khalifa-yelawolf-9-30-club#disqus_thread">Tumblr</a>)</li>
            <li><a href="http://en.gravatar.com/">Gravatar</a> provides avatars for other sites (like Disqus)</li>
          </ul>
          <li>What are the advantages of this kind of outsourcing? Disadvantages?</li>
        </ul>
      </slide>
    </part>
    <slide>
      <title>Conclusions</title>
      <ul>
        <li>3rd-party content takes advantage of basic Web functionality: transclusion</li>
        <li>The rise of 3rd-party badges, widgets, and gadgets is disintegrating our notions of web "pages" or "sites"</li>
        <li>A <q>site</q> or <q>page</q> is likely to be a synthesis of content and functionality from various sources</li>
        <li>This raises some interesting questions about responsibility, copyright, preservation …</li>
      </ul>
    </slide>
  </presentation>

<!-- END 20 Third-party Content -->



<!-- BEGIN 21 Semantic Web, Linked Data &amp; Microformats -->

  <presentation id="semantics">
    <title short="Semantics">Semantic Web, Linked Data &amp; Microformats</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://en.wikipedia.org/wiki/Semantic_Web" title="Wikipedia: Semantic Web">Wikipedia</a></toc>
    <toc class="resources"><a href="http://www.w3.org/2001/sw/SW-FAQ" title="W3C Semantic Web FAQ">FAQ</a>&#160;· <a href="http://proquest.safaribooksonline.com/9780596802141/3">Why Semantics?</a>&#160;· <a href="http://microformats.org/about">Microformats</a>&#160;· <a href="http://linkeddata.org/">Linked Data</a>&#160;· <a href="http://www.ted.com/talks/tim_berners_lee_on_the_next_web.html">The Next Web?</a></toc>
    <toc class="abstract">HTML pages are for human users and describe a resource in structural terms (headings, lists, tables, …). For machine-based interaction, it is often useful to have more information about the meanings of application concepts. The <em>Semantic Web</em> is a research program and set of standards for trying to specify these meanings. One goal is to enable data published on the Web to be easily interlinked.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <part>
	    <title>Adding Meaning to HTML</title>
		<slide>
			<title>Problem of Semantics: Syntax vs. Meaning</title>
			<ul>
				<li>Computation is great at syntax and grammar</li>
				<ul>
					<li>All <em>X</em> are <em>Y</em></li>
				</ul>
				<li>Take the following syllogisms</li>
				<ul>
					<li>All <em>dogs</em> are <em>mammals</em></li>
					<li>All <em>cats</em> are <em>bipeds</em></li>
					<li>All <em>Lady Gagas</em> are <em>cats</em></li>
				</ul>
				<li>Logical syntax does not necessarily take into consideration meaning</li>
				<ul>
					<li><q>The sum of the angles of a triangle is equal to the color red</q></li>
					<li>While grammatically correct this makes no sense</li>
				</ul>
			</ul>
	    </slide>
      <slide>
        <title>Adding Meaning to HTML</title>
        <ul>
          <li>HTML describes structures in a very general way</li>
          <ul>
            <li>HTML elements describe logical page structures such as headings, lists, tables, …</li>
            <li>useful for dynamic and adaptive page rendering, but not for understanding contents</li>
          </ul>
          <li>Good HTML may have more information available</li>
          <ul>
            <li>classes in HTML elements may represent underlying concepts (CSS may use this)</li>
            <li>HTML containers (e.g. lists) may represent aggregation of some basic information items</li>
          </ul>
          <li>Very good HTML</li>
          <ul>
            <li>standard class names and some guidelines for using them</li>
            <li>some rules for using combinations of particular class names</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Plain HTML</title>
        <listing src="event-plain.html" line="7-18"/>
      </slide>
      <slide>
        <title>Good HTML</title>
        <listing src="event-good.html" line="7-20"/>
      </slide>
      <slide>
        <title>Very Good HTML: Microformats</title>
        <listing src="event-microformat.html" line="7-23"/>
      </slide>
      <slide>
        <title>Microformats</title>
        <ul>
          <li>A <strong>microformat</strong> is an agreed-upon set of names for HTML element classes, and rules for using them</li>
          <li>Microformats do not add anything new to HTML: they are a way of using HTML</li>
          <li>Microformats are good for small, commonly encountered bits of data</li>
          <ul>
            <li>
              <a href="http://microformats.org/wiki/hcalendar">Calendar events</a>, 
              <a href="http://microformats.org/wiki/hcard">contact info</a>, 
              <a href="http://microformats.org/wiki/rel-license">licensing info</a>, etc.
            </li>
            <li><link href="nofollow"/> is a microformat too</li>
          </ul>
          <li>Creating new microformats involves reaching consensus in the microformat community</li>
          <ul>
            <li>This takes time and effort, so there are lots of "draft" microformats and few actually in use</li>
            <li>Only the most common kinds of data get standardized</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Very Good HTML: RDFa</title>
        <listing src="event-rdfa.html" line="7-35"/>
      </slide>
      <slide>
        <title>RDFa</title>
        <ul>
          <li><strong>RDFa</strong> is another approach to adding meaning to HTML</li>
          <li>Unlike microformats, RDFa adds some new attributes to HTML</li>
          <li>While microformats are defined for specific kinds of data, RDFa can be used for <em>any</em> kind of data</li>
          <ul>
            <li>No need for wide consensus</li>
          </ul>
          <li>But RDFa is a little more complicated to use than microformats</li>
        </ul>
      </slide>
      <slide>
        <title>Using Microformats &amp; RDFa with Operator</title>
        <ul>
          <li><a href="https://addons.mozilla.org/en-US/firefox/addon/4106">Operator</a> is a Firefox add-on for interacting with microformats and RDFa</li>
          <li>It looks for microformat and RDFa classes and attributes and does intelligent things with them</li>
          <li>Its functionality can be extended with user scripts</li>
          <li>Try it on our <a href="src/event-rdfa.html">example</a>, or <a href="http://www.yelp.com/biz/top-dog-berkeley">Yelp</a>, or <a href="http://products.semweb.bestbuy.com/y/products/9811355/">Best Buy</a></li>
        </ul>
      </slide>
    </part>
    <part>
      <title>Semantic Web &amp; Linked Data</title>
      <slide>
        <title>Linked Data Principles</title>
        <ol>
          <li>Use URIs as names for things.</li>
          <li>Use HTTP URIs so that people can look up those names.</li>
          <li>When someone looks up a URI, provide useful information, using a standard data model.</li>
          <li>Include links to other URIs, so that people can discover more things.</li>
        </ol>
      </slide>
      <slide>
        <title>URIs as Names</title>
        <ul>
          <li><link href="representation-resource">Recall</link> that a URI identifies an abstract resource</li>
          <li>This means that a URI can identify any abstract concept, not just web pages</li>
          <li>The Semantic Web is mainly about how to assign URIs to any concept</li>
          <li><a href="http://dbpedia.org/">DBpedia</a> is a project creating URIs for every topic in Wikipedia</li>
          <ul>
            <li>Spoon: <a href="http://dbpedia.org/resource/Spoon_%28band%29">http://dbpedia.org/resource/Spoon_%28band%29</a></li>
            <li>Mysticism: <a href="http://dbpedia.org/resource/Mysticism">http://dbpedia.org/resource/Mysticism</a></li>
          </ul>
          <li>But anyone can create URIs for concepts</li>
          <ul>
            <li>Panthera tigris: <a href="http://lod.geospecies.org/ses/QMUrD">http://lod.geospecies.org/ses/QMUrD</a></li>
          </ul>
          <li>Multiple people or groups can create URIs for the same concept</li>
          <ul>
            <li>All the <a href="http://sameas.org/html?uri=http%3A%2F%2Flod.geospecies.org%2Fses%2FQMUrD">URIs for Panthera tigris</a></li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Semantic Web Data Model</title>
        <ul>
          <li>The standard data model defined by Semantic Web standards is called <strong>RDF</strong></li>
          <ul>
            <li>Stands for <em>Resource Description Framework</em></li>
          </ul>
          <li>Data in RDF is just lists of <em>statements</em>:</li>
          <ul>
            <li>Spoon is a music group</li>
            <li>Spoon is named "Spoon"</li>
            <li>Spoon has a member Britt Daniel</li>
          </ul>
          <li>A statement consists of three parts: [subject] [predicate] [object]</li>
          <ul>
            <li>[Spoon] [is a] [music group]</li>
            <li>[Spoon] [is named] ["Spoon"]</li>
            <li>[Spoon] [has a member] [Britt Daniel]</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Semantic Web Data Model</title>
        <center>
          <img src="rdf-triple.png"/>
        </center>
      </slide>
      <slide>
        <title>Semantic Web Data Model</title>
        <center>
          <img src="rdf-triple-uris.png"/>
        </center>
      </slide>
      <slide>
        <title>Linking Data Sets</title>
        <center>
          <img src="http://linkeddata.org/static/images/lod-datasets_2009-03-05-scaled.png"/>
        </center>
      </slide>
    </part>
    <part>
      <title>Practical Applications</title>
      <slide>
        <title>Enhanced Search Results</title>
        <ul>
          <li>When <link href="indexing">indexing</link> web pages, search engines can parse microformats and RDFa to add details to result pages</li>
          <li>Instead of trying to guess at address, prices, or reviews, they can access this data directly</li>
          <li>Doesn't affect ranking, only the display of results</li>
          <ul>
            <li>So there's no point in putting in fake/spam data</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <ul>Yahoo! SearchMonkey</ul>
        <center>
          <a href="http://search.yahoo.com/search?p=avila+boston">
            <img src="img/searchmonkey.png"/>
          </a>
        </center>
      </slide>
      <slide>
        <ul>Google Rich Snippets</ul>
        <center>
          <a href="http://www.google.com/search?q=fillmore+new+york+concerts">
            <img src="img/rich-snippets.png"/>
          </a>
        </center>
      </slide>
      <slide>
        <title>Government Data</title>
        <ul>
          <li>Government data sets are a good use case for the Semantic Web</li>
          <ul>
            <li>Government data is intended to be made available to the public</li>
            <li>Publishing on the web is a great way to make data widely available</li>
          </ul>
          <li>Data sets are more useful when they can be linked and merged</li>
          <li>Linking and merging <em>before</em> publishing to some centralized place creates a bottleneck</li>
          <li>In theory, the Semantic Web can enable linking and merging of data sets published independently</li>
          <li>Theory being tested at <a href="http://data.gov.uk/">data.gov.uk</a></li>
        </ul>
      </slide>
    </part>
    <slide>
      <title>Conclusions</title>
      <ul>
        <li>Standard vocabularies for describing data can make data more useful</li>
        <li>There are various approaches for using such vocabularies on the web</li>
        <li>It is not clear yet which approaches will become most widely used</li>
        <li>Nevertheless this is an important area to watch</li>
      </ul>
    </slide>
  </presentation>

<!-- END 21 Semantic Web, Linked Data &amp; Microformats -->



<!-- BEGIN 22 Mobile Web -->

  <presentation id="mobile">
    <title short="Mobile">Mobile Web</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://en.wikipedia.org/wiki/Mobile_Web">Mobile Web</a>&#160;· <a href="http://proquest.safaribooksonline.com/9780596806231/45">Context</a></toc>
    <toc class="resources"><a href="http://www.quantcast.com/docs/display/info/Mobile+Report">Mobile Web Trends</a>&#160;· <a href="http://www.w3.org/Mobile/">W3C Mobile Web</a>&#160;· <a href="http://www.mozilla.com/en-US/firefox/geolocation/">Geolocation in Firefox</a>&#160;· <a href="http://escholarship.org/uc/item/0rp834wf">Geolocation Privacy Issues</a></toc>
    <toc class="abstract">A mobile device is a computer you carry around with you. Today, any mobile device has some capability to access the Web, and a quickly growing percentage of all Web usage is done on mobile devices. Clearly, web content needs to be adadpted for the wide variety of sizes, shapes, and functionality of mobile devices. More importantly, however, mobile devices open new possibilities for adapting content based on a user's <em>context</em>. </toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <part>
      <title>Rise of the Mobile Web</title>
      <slide>
        <title>Rise of the Mobile Web</title>
        <ul>
          <li>There are far more mobile devices than personal computers in the world</li>
          <ul>
            <li>Approximate 1 billion PCs vs. 4 billion mobile</li>
          </ul>
          <li>Increasingly, mobile devices have Web capability</li>
          <li>A small but quickly growing segment of all Web access is done from mobile devices</li>
          <li>Improved Web access is viewed as a major factor in the recent success of "smartphones"</li>
        </ul>
      </slide>
      <title>Rise of the Mobile Web</title>
      <slide>
	      <title>Rise of the Mobile Platform</title>
	      <ul>
		      <li>Nearly half (47%) of all Americans report getting some news and info from mobile phone</li>
		      <li>42% get weather updates 37% get local restaurant and business info.</li>
		      <li>13% report using an "app" to get this local and practical info</li>
		      <li>While almost half of all adults get info on mobile, just 1 in 10 use an app for this (app-gap)</li>
		      <div class="credit"><em>Source:</em> Pew Internet and American Life Project, <a href="http://www.pewinternet.org/Reports/2011/Local-mobile-news.aspx">"2011 State of the News Media Report"</a></div>
	      </ul>
      </slide>
      <slide>
        <title>Rise of the Mobile Web</title>
        <center>
          <img src="img/mobile-share.png"/>
          <p class="quotenote">Quantcast, <a href="http://www.quantcast.com/docs/display/info/Mobile+Report">2009 Mobile Web Trends Report</a></p>
        </center>
      </slide>
      <slide>
        <title>iPhone Dominance</title>
        <center>
          <img src="img/vendor-share.png"/>
          <p class="quotenote">Quantcast, <a href="http://www.quantcast.com/docs/display/info/Mobile+Report">2009 Mobile Web Trends Report</a></p>
        </center>
      </slide>
    </part>
    <part>
      <title>Browsers vs. Apps</title>
      <part>
        <title>Mobile Browsers</title>
        <slide>
          <title>Early Mobile Browsers</title>
          <ul>
            <li>Early mobile browsers weren't really Web browsers at all</li>
            <li>Mobile devices didn't have much computing power</li>
            <ul>
              <li>Rendering full web pages wasn't possible</li>
              <li>Special markup languages instead of HTML</li>
            </ul>
            <li>Mobile networks were slow</li>
            <ul>
              <li>Mobile providers proprietary protocols optimized for mobile networks</li>
            </ul>
	    <li>Content providers had to develop separate mobile sites and invest in special "gateway" servers <a href="http://www.google.com/gwt/n?q=cnn.com&amp;site=search&amp;hl=en&amp;lr=&amp;c2coff=1&amp;safe=off&amp;mrestrict=xhtml&amp;ct=res&amp;cd=1&amp;rd=1&amp;u=www.cnn.com/">CNN.com adapted for mobile</a>
	    </li>
          </ul>
        </slide>
        <slide>
          <title>WAP Browser</title>
          <center>
            <img src="img/wap-browser.jpg"/>
          </center>
        </slide>
        <slide>
          <title>i-mode Browser</title>
          <center>
            <img src="img/imode-browser.gif"/>
          </center>
        </slide>
        <slide>
          <title>Mobile Web Browsers</title>
          <ul>
            <li>As mobile devices got more powerful, proprietary markup languages were abandoned for HTML</li>
            <li>As mobile networks got faster, proprietary protocols were abandoned for HTTP</li>
            <li>Easier for content providers to adapt their content</li>
            <li>Improved interaction design reduced need for adaption</li>
            <li>Now we truly have a mobile Web</li>
            <ul>
              <li>Still worthwhile to design mobile versions of sites</li>
            </ul>
          </ul>
        </slide>
        <slide>
          <title>Safari on iPhone</title>
          <center>
            <img src="img/iphone-browser.png"/>
          </center>
        </slide>
        <slide>
          <title>Opera Mini Browser</title>
          <center>
            <img src="img/opera-browser.png"/>
          </center>
        </slide>
        <slide>
          <title>Mobile Browser Market Share</title>
          <center>
            <img src="img/browser-share.png"/>
            <p class="quotenote">Quantcast, <a href="http://www.quantcast.com/docs/display/info/Mobile+Report">2009 Mobile Web Trends Report</a></p>
          </center>
        </slide>
      </part>
      <part>
        <title>Mobile Apps</title>
        <slide>
          <title>Mobile Apps</title>
          <ul>
            <li>Using a modern mobile web browser, users can browser ordinary web pages</li>
            <li>However, it may be desirable to adapt content for a mobile device</li>
            <li>For example, scrolling and zooming can be annoying on a mobile device</li>
            <li>Sites that expect a lot of mobile use may design a mobile <em>application</em> for accessing their content</li>
            <li>Two possibilities:</li>
            <ul>
              <li>A <em>web application</em> built using HTML + CSS + Javascript</li>
              <li>A <em>native application</em> built using a platform-specific toolkit</li>
            </ul>
          </ul>
        </slide>
        <slide>
          <title>Mobile Web Apps</title>
          <ul>
            <li>A mobile <link href="webapps-advanced">web application</link> is built using standard web technologies</li>
            <ul>
              <li>HTML, CSS, Javascript</li>
            </ul>
            <li>Screen layout and interaction optimized for mobile</li>
            <li>Example: <a href="http://gmail.com">Gmail</a></li>
            <li>Advantages:</li>
            <ul>
              <li>Will work on any modern mobile browser</li>
              <li>Easily updated</li>
            </ul>
            <li>Disadvantages:</li>
            <ul>
              <li>Can't access native functionality</li>
              <li>Limited offline use</li>
              <li>Hard to charge for web applications</li>
            </ul>
          </ul>
        </slide>
        <slide>
          <title>Native Mobile Apps</title>
          <img style="float: right; margin: 1em;" src="img/yelp-iphone.jpg"/>
          <ul>
            <li>A native application is built using a platform-specific software develop kit, e.g.:</li>
            <ul>
              <li><a href="http://developer.apple.com/iphone/">iPhone SDK</a></li>
              <li><a href="http://developer.android.com/">Android SDK</a></li>
            </ul>
            <li>Interface is not built using Web technologies</li>
            <li>But still accessing the Web via HTTP:</li>
            <ul>
              <li><link href="api"/></li>
              <li><link href="syndication-formats"/></li>
            </ul>
            <li>Advantages:</li>
            <ul>
              <li>Can use the full functionality of the phone</li>
              <ul>
                <li>Camera, GPS, compass, accelerometer, etc.</li>
              </ul>
              <li>Easier offline use</li>
              <li>Make money!</li>
            </ul>
            <li>Disadvantages:</li>
            <ul>
              <li>Harder to develop</li>
              <li>Have to target a specific platform</li>
              <li>Users have to install updates</li>
            </ul>
          </ul>
        </slide>
      </part>
    </part>
    <part>
      <title>Sensing Context</title>
      <slide>
        <title>Location</title>
        <img style="float: right; margin: 1em;" src="img/wikitude.jpg"/>
        <ul>
          <li>Mobile devices can sense location</li>
          <ul>
            <li><em>Coordinates</em> using GPS, wifi router, IP address …</li>
            <li><em>Orientation</em> using compass</li>
          </ul>
          <li>Adapting content based on location becomes far more interesting on a mobile device</li>
          <li>HTML5 includes geolocation, so you do not need a native app to sense corrdinates</li>
	  <li><a href="http://diveintohtml5.org/geolocation.html#"> geo.js HTML 5.0 example</a></li>
	  <div class="credit"><em>Source:</em><a href="http://diveintohtml5.org">diveintohtml5.org</a></div>
          <ul>
            <li>but doesn't include orientation info</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Presence</title>
        <img style="float: right; margin: 1em;" src="img/qrcode.jpg"/>
        <ul>
          <li>Sometimes the presence of objects or people is more important than absolute location</li>
          <li><a href="http://en.wikipedia.org/wiki/QR_Code">QR codes</a> can be incorporated into stickers, posters, etc.</li>
          <li>Newer phones can read ordinary bar codes too</li>
          <li>Cutting-edge phones can use <a href="http://www.google.com/mobile/goggles/">image recognition</a></li>
          <li>People can be sensed via their mobile devices</li>
        </ul>
      </slide>
      <slide>
        <title>Situation</title>
        <center>
        <object width="640" height="385"><param name="movie" value="http://www.youtube.com/v/AvJyz2PhjX0&amp;hl=en_US&amp;fs=1&amp;start=94"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/AvJyz2PhjX0&amp;hl=en_US&amp;fs=1&amp;start=94" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="385"></embed></object>
        </center>
      </slide>
    </part>
  </presentation>

<!-- END 22 Mobile Web -->



<!-- BEGIN 23 Real-time Web -->

  <presentation id="realtime">
    <title short="Real-time">Real-time Web</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://en.wikipedia.org/wiki/Real-time_web">Real-time Web</a></toc>
    <toc class="resources"><a href="http://www.readwriteweb.com/archives/introduction_to_the_real_time_web.php">Intro to the Real-Time Web</a>&#160;· <a href="http://www.businessweek.com/magazine/content/09_33/b4143046834887.htm">Betting on the Real-Time Web</a>&#160;· <a href="http://www.roughtype.com/archives/2009/02/the_free_arts_a.php">The Realtime Chronicles</a></toc>
   <toc class="abstract">Real Time Web is a collection of technlogies that allow immediate and direct web publishing. Real time is perhaps the newest evolution in web technology but in manys ways is more hype than reality. Real time Web has attracted the attention of marketers and those interested in finding new ways to target ads and more actionable user behavior.  </toc>
<slide>
      <title>Abstract</title>
            <p class="abstract"><toc class="abstract"/></p>
                </slide>
                <part id="realtime">
                 <title>Real Time Web</title>

 <title>Real Time Web</title> 

<ul>
<li>Realtime publishing is not like Feeds (RSS)</li>
      <ul>
         <li>RSS relies on a client (e.g. Feed Reader) to make requests to RSS server for changed content</li>
         <li>RSS feeds rely on a time interval for polling set by site operator (server side) or by user (client)</li>
         <li>RSS is timely but not immediate, that is 1s response</li>
         <li>RSS + Instant is a goal  <a href="http://blog.notifixio.us/post/73594997/how-can-we-do-a-realtime-web"> RSS + Realtime</a> </li>
 	</ul>                                                         
 </ul>
</part>
<slide>        
<title>Real Time Web</title>


<ul>
<li>Realtime is almost instant (PUSH)</li>
      <ul>
               <li>Instead of asynchronous request/reponse</li>
                        <li>Content is pushed to clients</li>
                                 <li>We are all famliar with Instant Messaging(IM)Jabber/ICQ/AOL etc</li>
                                 <li>Lacks some reliability present with request/reponse </li>
                                          <li>Extensible Messaging and Presence Protocol (XMPP) </li>
                                          <li>XMPP is based upon Jabber IM technology</li>
                                                  </ul>                                                                
                                                   </ul>
</slide>
<slide>
                                <title>Real Time Web</title>


<ul>
<li>Twitter: Realtime's Popular Example</li>
      <ul>
        <li>Uses SMS simple messageing service (already widespread) on wireless </li>
              <li>150 character mini blogs posts are instantly pushed to web clients or alternates</li>
              <li>Realtime (more like real fast) indexing of tweets</li>
            <li>Tweet space is not indexed by search Google, Teoma, BING etc.. </li>
          <li>In Google Universe static pages must be indexed (time) and link relations computed, not instant</li>
     </ul>
  </ul>

</slide>


<slide>
                                <title>Real Time Web</title>


<ul>
<li>Realtime Pros/Cons (Twitter)</li>
      <ul>
              <li>The key is pushing content/data to passive clients without the request/response latency</li>
                            <li>Very timely information, e.g. Haiti Earthquake</li>
                                          <li>Content is immediately relevant to your social network, rather than PAGE Rank</li>
                                                      <li>Not mediated content (think of Charlie Sheen fiasco) </li>
                                   
                                     <li>Ones social network may potentially close off new info (echo chamber effect)</li>
                                                                     </ul>

                                                                     </ul>
</slide>
</presentation>	 


<!-- BEGIN  -->

  <presentation id="security">
    <title short="Security">Security &amp; Privacy</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading"><a href="http://en.wikipedia.org/wiki/Internet_security" title="Wikipedia: Internet Security">Security</a>&#160;· <a href="http://en.wikipedia.org/wiki/Internet_privacy" title="Wikipedia: Internet Privacy">Privacy</a>&#160;· <a href="http://cacm.acm.org/magazines/2009/8/34494-browser-security/fulltext" title="Browser Security: Lessons from Google Chrome, Charles Reis, Adam Barth, Carlos Pizano, Communications of the ACM, Vol. 52 No. 8, Pages 45-49, August 2009">Browser Security</a></toc>
    <toc class="resources"><a href="http://support.mozilla.com/en-US/kb/Options+window" title="Firefox Options for Security and Privacy">Browser Options</a>&#160;· <a href="http://en.wikipedia.org/wiki/Https" title="Wikipedia: HTTPS">HTTPS</a>&#160;· <a href="http://tools.ietf.org/html/rfc2818" title="IETF RFC 2818: HTTP over TLS (HTTPS)">HTTPS Spec</a></toc>
    <toc class="abstract">TCP and thus HTTP are clear-text protocols, which make no attempt to hide the data being transmitted. For secure data transfers, it thus is necessary to use additional technologies for providing secure data transfers. For the Web, the most interesting security feature are secure HTTP interactions, which are provided by <em>HTTP over SSL (HTTPS)</em>, a protocol that layers an encryption layer (SSL or TLS) between TCP and HTTP. For any task involving personalization and/or trust, it is not only necessary to have a concept for providing privacy, but also to have concepts for identity and how to prove identity, which needs authentication.</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <part id="web-security">
      <title>Security on the Web</title>
      <slide>
        <title>Trust and Security on the Web</title>
        <ul>
          <li>Web-based applications introduce many risks</li>
          <ul>
            <li>do you trust your browser? (it may not safeguard your information)</li>
            <li>do you trust your computer? (it may have a virus)</li>
            <li>do you trust your network? (it may be monitored on various levels)</li>
            <li>do you trust the server? (it may be a fake <a href="http://en.wikipedia.org/wiki/Phishing">phishing</a> server)</li>
          </ul>
          <li>Most of these risks are amplified by the Web's scale</li>
          <ul>
            <li>phishing and spamming only work because the Web makes fraud more effective</li>
          </ul>
          <li>Controlling Web access is important for safe browsing</li>
          <ul>
            <li>trusting shared browsers is risky (they may store logins and cache pages)</li>
            <li>trusting the network can be risky (more and more networks are wire-tapped)</li>
            <li>trusting the server is risky (phishing and poor server security)</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Session Hijacking</title>
        <ul>
          <li><link href="session">HTTP sessions</link> require a session ID</li>
          <li>If an attacker can steal the ID of your active session, he can pretend to be you</li>
          <li>Many ways this can happen:</li>
          <ul>
            <li>Most common: <em>Cross-site scripting</em> (XSS) is when an attacker injects malicious code into another website</li>
            <ul>
              <li>XSS exploits the trust victims have for a particular website (e.g. Facebook)</li>
            </ul>
            <li><em>Cross-site request forgery</em> (XSRF) is when an attacker tricks a victim's browser into executing some action on a target website</li>
            <ul>
              <li>XSRF exploits the trust a website has in a victim's browser</li>
            </ul>
            <li><em>Clickjacking</em> is when an attacker creates some interactive content (e.g. a game) that tricks a victim into executing some action on a target website</li>
            <ul>
              <li>Clickjacking exploits user interface bugs in browsers</li>
            </ul>
          </ul>
          <li>Many variations on and combinations of these</li>
        </ul>
      </slide>
      <slide>
        <title>Malware</title>
        <ul>
          <li><em>Malware</em> is software that, when installed on a victim's computer, does something bad:</li>
          <ul>
            <li>steals data: passwords, credit card numbers, or files</li>
            <li>sends spam</li>
            <li>attacks other computers or web sites</li>
            <li>distributes itself to others</li>
            <li>tracks victim's behavior</li>
            <li>uses computing power for nefarious purposes (e.g. breaking password)</li>
            <li>uses the victim's computer for storing illegal material</li>
          </ul>
          <li>The Web is the primary way malware is transmitted</li>
          <ul>
            <li>Attacked or evil sites can take advantage of browser security bugs to install malware silently</li>
            <li>Victims can be tricked into installing malware</li>
            <li>Attackers can inject malware into otherwise innocuous software installs</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Network Security Risks</title>
        <ul>
          <li>HTTP sends clear-text messages</li>
          <li>Attackers on the same network can intercept and read these messages</li>
          <li>Examples:</li>
          <ul>
            <li>An attacker sharing the same LAN (for example wifi at a cafe, wired network in a dorm) can read the contents of all HTTP packets</li>
            <li>An attacker can set up an "evil twin" wifi hotspot and trick people into connecting to it</li>
          </ul>
          <li>Making HTTP secure requires additional mechanisms</li>
          <li>Encryption is done by a layer on top of TCP</li>
          <ul>
            <li><em>Secure Sockets Layer (SSL)</em> is the protocol layer invented by Netscape</li>
            <li><em>Transport Layer Security (TLS)</em> is the standardized Internet version</li>
            <li>TLS adds more encryption schemes and more flexibility</li>
          </ul>
          <li>Lower-level methods may also provide encryption</li>
          <ul>
            <li><em>Virtual Private Networks (VPN)</em> provide IP-based encryption</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Social Engineering and Phishing</title>
        <ul>
          <li><em>Social engineering</em> is tricking or manipulating people into doing something, like clicking on a link or entering information into a form</li>
          <ul>
            <li>Many of the previously discussed attacks rely on tricking someone in this way</li>
          </ul>
          <li><em>Phishing</em> is a common form of social engineering in which an attacker pretends to be a trusted party</li>
          <ul>
            <li>Typically, the victim receives a fraudulent but realistic "official" email with a link to an attack site</li>
            <ul>
              <li>or a chat message, or a Facebook update, or …</li>
            </ul>
            <li>URL obscuring techniques are used to make the attack site URL look trustworthy</li>
            <li>The attack site is designed to mimic a trusted site</li>
            <li>Further techniques may be used to hide the real URL, e.g. in the address bar</li>
            <li>Or instead of building a fake site, the attackers may use XSS or XSRF to achieve the same ends</li>
          </ul>
        </ul>
      </slide>
    </part>
    <part id="web-privacy">
      <title>Privacy on the Web</title>
      <slide id="tracking">
        <title>Behavioral tracking</title>
        <ul>
          <li>Behavioral tracking is the recording and analysis of individuals' actions, in order to provide:</li>
          <ul>
            <li>Personalized content (e.g. news)</li>
            <li>Targeted advertising</li>
            <li>Customized pricing</li>
            <li>or, just to learn about users</li>
          </ul>
          <li>Actions may be tracked:</li>
          <ul>
            <li>on the website offering the personalized/customized/targeted content</li>
            <li>on <em>other</em> websites, via advertising networks</li>
            <li>even <em>offline</em>, via real-world retailers</li>
          </ul>
        </ul>
      </slide>
      <slide>
        <title>Flash Cookies</title>
        <ul>
          <li>Behavioral tracking relies on cookies</li>
          <li>Many people clear cookies regularly to avoid behavioral tracking</li>
          <li>Increasingly, this is a useless exercise due to <a href="http://en.wikipedia.org/wiki/Local_Shared_Object">Flash cookies</a></li>
          <li>Flash cookies are local information stored by Flash Player</li>
          <ul>
            <li>Flash cookies can store the same data as browser cookies</li>
            <li>Not deleted when you clear cookies in your browser</li>
            <li>Can be used to re-create the browser cookies with the same data after they have been deleted</li>
          </ul>
          <li>A <a href="http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1446862">study</a> by UC Berkeley researchers showed that Flash cookies are widespread and used to re-create deleted cookies</li>
          <li><a href="https://addons.mozilla.org/en-US/firefox/addon/6623">BetterPrivacy</a> is a Firefix extension that can show and delete Flash cookies</li>
        </ul>
      </slide>
      <slide>
        <title>New Potential Privacy Threats</title>
        <ul>
          <li><a href="http://escholarship.org/uc/item/0rp834wf">HTML5 geolocation privacy issues</a></li>
          <ul>
            <li>Sites using the new geolocation features can request users' location, either one time or on an ongoing basis</li>
            <li>Users have to explicitly grant access <em>the first time</em></li>
            <li>If the site has requested <em>ongoing</em> access, users may not be aware that their location information is being sent subsequently</li>
            <li>Users may not be aware or have any control over the <em>precision</em> of location data</li>
            <li>Users may not be aware of <em>what else</em> their location is used for (e.g. <link href="tracking"/>)</li>
          </ul>
          <li><link href="web-storage"/> could be abused similarly to Flash cookies</li>
        </ul>
      </slide>
      <slide>
        <title>Privacy Policy Quiz</title>
        <ul>
          <li><strong>True or false:</strong></li>
          <ul>
            <li>If a website has a privacy policy, it means that the site cannot share information about you with other companies, unless you give the website your permission.</li>
            <li>If a website has a privacy policy, it means that the site cannot give your address and purchase history to the government.</li>
            <li>If a website has a privacy policy, it means that the website must delete information it has about you, such as name and address, if you request them to do so.</li>
            <li>If a website violates its privacy policy, it means that you have the right to sue the website for violating it.</li>
            <li>If a company wants to follow your internet use across multiple sites on the internet, it must first obtain your permission.</li>
          </ul>
        </ul>
      </slide>
    </part>
  </presentation>

<!-- END 23 Real-time Web -->



<!-- BEGIN 24 Openness &amp; Transparency -->

  <presentation id="openness">
    <toc class="author"><a href="http://www.ischool.berkeley.edu/people/students/ashwinmathew">Ashwin Jacob Mathew</a></toc>
    <title short="Openness">Openness &amp; Transparency</title>
    <date>[INSERT DATE HERE]</date>
    <toc class="reading">
      <a href="http://firstmonday.org/htbin/cgiwrap/bin/ojs/index.php/fm/article/view/1367/1286">Openness in Communication</a>&#160;· <a href="http://googleblog.blogspot.com/2009/12/meaning-of-open.html">Meaning of Open</a>&#160;· <a href="http://www.tnr.com/article/books-and-arts/against-transparency">Against Transparency</a>
    </toc>
    <toc class="resources">
      <a href="http://openwebfoundation.org/">Open Web Foundation</a>&#160;· <a href="http://creativecommons.org/">Creative Commons</a>&#160;· <a href="http://www.earlham.edu/~peters/fos/overview.htm">Open Access</a>&#160;· <a href="http://www.sunlightfoundation.com/">Sunlight Foundation</a>&#160;· <a href="http://www.data.gov/">Data.gov</a>&#160;· <a href="http://www.publicknowledge.org/">Public Knowledge</a>&#160;· <a href="http://www.okfn.org/">Open Knowledge</a>
    </toc>
     <toc class="abstract">It has become commnplace to praise the Web as "open" or to hear impassioned defenses of "the Open Web." But what does it mean for an information system to be open? Today we will examine some varying definitions of openness, and guest speaker <a href="http://www.ischool.berkeley.edu/people/students/ashwinmathew">Ashwin Jacobs Mathew </a> will present some questions about issues about "openness" raised by his study of the <a href="./img/ashwin.pdf">Internet Networking Protocols</a>.(Click for Slide Presentation)</toc>
    <slide>
      <title>Abstract</title>
      <p class="abstract"><toc class="abstract"/></p>
    </slide>
    <slide>
      <title><q>Open</q></title>
      <ul>
        <li>In discussions of the Web, people often use the word <strong>"open"</strong></li>
        <li>Two primary senses (<a href="http://dictionary.oed.com/cgi/entry/00332387?query_type=word&amp;queryword=open&amp;first=1&amp;max_to_show=10&amp;sort_type=alpha&amp;result_place=3&amp;search_id=y5KK-O7xHPF-9677&amp;hilite=00332387">OED</a>):</li>
        <ul>
          <li>Not restricted to a few, generally accessible or available; such that anyone may use it, share it, or take part in it.</li>
          <li>Exposed to general view or knowledge; existing, performed, or carried on without concealment or so that all may see or hear; known; public.</li>
        </ul>
        <li>First definition emphasizes <em>freedom to act</em></li>
        <li>Second definiton emphasizes <em>freedom to see</em> or <em>transparency</em></li>
        <li>"Open" is a <a href="http://books.google.com/books?id=zh3rjwjAz7UC&amp;pg=PA75">hooray word</a></li>
        <ul>
          <li>Positive connotations yet vague enough that no one can take issue with it</li>
        </ul>
      </ul>
    </slide>
    <slide>
      <title><q>Open</q> according to Google [1]</title>
        <blockquote cite="http://googleblog.blogspot.com/2009/12/meaning-of-open.html"><q>At Google we believe that open systems win. They lead to more innovation, value, and freedom of choice for consumers, and a vibrant, profitable, and competitive ecosystem for businesses. Many companies will claim roughly the same thing since they know that declaring themselves to be open is both good for their brand and completely without risk. After all, <strong>in our industry there is no clear definition of what open really means</strong>. It is a <a href="http://en.wikipedia.org/wiki/Rashomon_effect">Rashomon</a>-like term: <strong>highly subjective and vitally important</strong>.</q></blockquote>
        <p class="quotenote">Jonathan Rosenberg, <a href="http://googleblog.blogspot.com/2009/12/meaning-of-open.html">"The meaning of open"</a>, <em>Official Google Blog</em>, 2009</p>
    </slide>
    <slide>
      <title>Is the Web open?</title>
      <ul>
        <li><strong>Physical</strong> level: the actual physical infrastructure (wires and radio spectrum that carry data)</li>
        <ul>
          <li>Not open: physical infrastructure is by and large private property</li>
        </ul>
        <li><strong>Logical</strong> level: the standards that define the Web and the software that implement it</li>
        <ul>
          <li>Standards are open. Much software is open source, but much is not and some only in name</li>
        </ul>
        <li><strong>Content</strong> level: what we read, write, see, watch, show</li>
        <ul>
          <li>No simple answer. Complex interaction of laws, social structure, technical architecture</li>
          <li>Who controls creation, dissemination, consumption, re-dissemination, re-use?</li>
        </ul>
      </ul>
    </slide>
    <slide>
      <title>"Open" according to Google [2]</title>
      <ul>
        <li>Google focuses on the logical level (<q>open technology</q>) and the content level (<q>open information</q>)</li>
        <li>Emphasis on consumer choice, competition, innovation, and growth</li>
        <ul>
          <li><q>Our commitment to open systems is not altruistic. Rather it's good business</q></li>
        </ul>
        <li>Open technology means open source code and open standards</li>
        <li><strong>But</strong> code should be open only when it doesn't <q>hurt users</q></li>
        <ul>
          <li>Google decides what will hurt users</li>
          <li>opening up search and ads technology is off the table</li>
        </ul>
        <li>Open information is narrowly defined to focus on Google's storage of user data</li>
        <ul>
          <li><em>transparency</em>: let users see what information Google has</li>
          <li><em>control</em>: enable users to modify, delete or move this information</li>
        </ul>
      </ul>
    </slide>
    <slide>
      <title>"Open" according to Facebook [1]</title>
      <center>
        <a href="http://techcrunch.com/2010/04/23/facebook-open-graph/"><img src="img/meaning-of-open.png"/></a>
      </center>
    </slide>
    <slide>
      <title>"Open" according to Facebook [1]</title>
      <ul>
        <li>Anyone can read metadata embedded in HTML pages</li>
        <li>Created and implemented by more than one company</li>
        <li>Available under an open license</li>
      </ul>
      <p class="quotenote">David Recordon, <a href="http://groups.google.com/group/open-graph-protocol/msg/5b700e5b7e563acf?pli=1"><q>What does the <q>open</q> in <q>open graph protocol</q> mean?</q></a>, 2010</p>
    </slide>
    <slide>
      <title>Conclusions</title>
      <ul>
        <li>No simple definitions of openness. Depends on</li>
        <ul>
          <li>technological level (physical, logical, content)</li>
          <li>business models</li>
          <li>law &amp; policy</li>
        </ul>
        <li>Despite positive connotations, openness is not always desirable</li>
        <ul>
          <li><link href="web-security"/> requires denying "freedom-to-act"</li>
          <li><link href="web-privacy"/> requires denying "freedom-to-see"</li>
        </ul>
      </ul>
    </slide>
  </presentation>

<!-- END 24 Openness &amp; Transparency -->



<!-- BEGIN 25 Course Recap -->

  <presentation id="recap" external="">
    <title short="Recap">Course Recap</title>
    <date>[INSERT DATE HERE]</date>
  </presentation>

<!-- END 25 Course Recap -->

	 
</hotspot>
